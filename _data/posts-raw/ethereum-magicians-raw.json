{"rss":{"@version":"2.0","@xmlns:discourse":"http://www.discourse.org/","@xmlns:atom":"http://www.w3.org/2005/Atom","@xmlns:dc":"http://purl.org/dc/elements/1.1/","channel":{"title":"Fellowship of Ethereum Magicians - Latest topics","link":"https://ethereum-magicians.org/latest","description":"Latest topics","lastBuildDate":"Tue, 16 Jul 2024 18:45:13 +0000","atom:link":{"@href":"https://ethereum-magicians.org/latest.rss","@rel":"self","@type":"application/rss+xml"},"item":[{"title":"ERC: Code Index","dc:creator":"peersky","category":"ERCs","description":"<p>Code Index is a core component of <a href=\"https://github.com/peersky/eds/tree/main\" rel=\"noopener nofollow ugc\">Ethereum Distribution System</a></p>\n<p>It creates a simple, global index that maps already deployed bytecode to it’s location via <code>address.codehash</code></p>\n<p>Reference implementation is here<br>\n<a href=\"https://github.com/peersky/eds/blob/main/src/CodeIndex.sol\" rel=\"noopener nofollow ugc\">CodeIndex.sol</a></p>\n<p><a href=\"https://github.com/peersky/eds/blob/main/deploy/01_codeIndex.ts\" rel=\"noopener nofollow ugc\">Deployment script</a></p>\n            <p><small>2 posts - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-code-index/20569\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-code-index/20569","pubDate":"Tue, 16 Jul 2024 18:45:13 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20569"},"source":{"@url":"https://ethereum-magicians.org/t/erc-code-index/20569.rss","#text":"ERC: Code Index"}},{"title":"Verkle implementers call #21, July 15 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1092\" class=\"inline-onebox\">Verkle Implementers Call #21 · Issue #1092 · ethereum/pm · GitHub</a><br>\n<span data-date=\"2024-07-15\" data-time=\"15:00:00\" class=\"discourse-local-date\" data-timezone=\"UTC\" data-email-preview=\"2024-07-15T15:00:00Z UTC\">2024-07-15T15:00:00Z UTC</span></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/rudolf\">@rudolf</a></p>\n<h3><a name=\"notes-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#notes-2\"></a>Notes</h3>\n<p>Notes by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/rudolf\">@rudolf</a></p>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/verkle-implementers-call-21-july-15-2024/20566\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/verkle-implementers-call-21-july-15-2024/20566","pubDate":"Tue, 16 Jul 2024 13:01:34 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20566"},"source":{"@url":"https://ethereum-magicians.org/t/verkle-implementers-call-21-july-15-2024/20566.rss","#text":"Verkle implementers call #21, July 15 2024"}},{"title":"All Core Devs - Execution (ACDE) call #192, July 18 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1098\" class=\"inline-onebox\">Execution Layer Meeting 192 · Issue #1098 · ethereum/pm · GitHub</a></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/timbeiko\">@timbeiko</a></p>\n<h3><a name=\"summary-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#summary-2\"></a>Summary</h3>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<p>Stream: <a href=\"https://youtube.com/live/kL58hvM0E68\">https://youtube.com/live/kL58hvM0E68</a></p>\n<h3><a name=\"transcript-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#transcript-4\"></a>Transcript</h3>\n<p>[To be added]</p>\n<h3><a name=\"additional-info-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#additional-info-5\"></a>Additional info</h3>\n<p>Notes by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/christine_dkim\">@Christine_dkim</a>: <a href=\"https://www.galaxy.com/insights/research/ethereum-all-core-developers-execution-call-192\"></a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/all-core-devs-execution-acde-call-192-july-18-2024/20565\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/all-core-devs-execution-acde-call-192-july-18-2024/20565","pubDate":"Tue, 16 Jul 2024 12:44:09 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20565"},"source":{"@url":"https://ethereum-magicians.org/t/all-core-devs-execution-acde-call-192-july-18-2024/20565.rss","#text":"All Core Devs - Execution (ACDE) call #192, July 18 2024"}},{"title":"Supporting EIP-3085 with a ERC-4337 wallet","dc:creator":"ajhodges","category":"Primordial Soup","description":"<p>There is currently a gap in the interface between dapps and ERC-4337 wallets; support for network addition via <a href=\"https://eips.ethereum.org/EIPS/eip-3085\" rel=\"noopener nofollow ugc\">EIP-3085 wallet_addEthereumChain</a>. In order for a 4337 wallet to function with an arbitrary chain, it needs to be provided with an RPC URL that can serve the <a href=\"https://eips.ethereum.org/EIPS/eip-4337#rpc-methods-eth-namespace\" rel=\"noopener nofollow ugc\">4337-specific RPC methods</a>.</p>\n<p>I see a few potential paths forward here:</p>\n<ol>\n<li>Reuse EIP-3085 <code>EthereumChainAddRequest.rpcUrls</code> by leveraging the fact that a dapp can already provide multiple RPC providers with the existing interface\n<ol>\n<li>We could specify the ordering of these URLs, i.e. the first one is always the bundler, and subsequent ones are always general-purpose RPCs</li>\n<li>We could define a prefix to be added the bundler URL so that the wallet can identify it</li>\n</ol>\n</li>\n<li>Standardize around a single RPC URL - the RPC provider passed via 3085 should handle both traditional as well as 4337-specific RPC methods\n<ul>\n<li>Some bundlers such as Alchemy already work in this way. Others (i.e. Pimlico) expressly do not.</li>\n<li>Dapps may need to build a JSON RPC reverse proxy depending on their bundler provider.</li>\n</ul>\n</li>\n<li>Extend EIP-3085 <code>EthereumChainAddRequest</code>\n<ol>\n<li>Add an <code>rpcMetadata</code> mapping of RPC URLs to metadata (maybe a dictionary with e.g. <code>\"supports4337\": true</code>)</li>\n<li>Add a <code>bundlerRpcUrls</code> parameter</li>\n</ol>\n</li>\n</ol>\n<p>I would love to hear from anyone else who is already thinking about this!</p>\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/supporting-eip-3085-with-a-erc-4337-wallet/20551\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/supporting-eip-3085-with-a-erc-4337-wallet/20551","pubDate":"Mon, 15 Jul 2024 18:12:50 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20551"},"source":{"@url":"https://ethereum-magicians.org/t/supporting-eip-3085-with-a-erc-4337-wallet/20551.rss","#text":"Supporting EIP-3085 with a ERC-4337 wallet"}},{"title":"EIP-7742: Uncouple blob count between CL and EL","dc:creator":"ralexstokes","category":"Core EIPs","description":"<p>Discussions for EIP-7742.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7742-uncouple-blob-count-between-cl-and-el/20550\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7742-uncouple-blob-count-between-cl-and-el/20550","pubDate":"Mon, 15 Jul 2024 16:42:15 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20550"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7742-uncouple-blob-count-between-cl-and-el/20550.rss","#text":"EIP-7742: Uncouple blob count between CL and EL"}},{"title":"ERC-7741: Authorize Operator","dc:creator":"jeroen","category":"ERCs","description":"<p>Discussion for <a href=\"https://github.com/ethereum/ERCs/pull/536\" rel=\"noopener nofollow ugc\"> Add ERC: Authorize Operator #536 </a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7741-authorize-operator/20531\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7741-authorize-operator/20531","pubDate":"Fri, 12 Jul 2024 16:43:05 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20531"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7741-authorize-operator/20531.rss","#text":"ERC-7741: Authorize Operator"}},{"title":"ERC-7739: Readable Typed Signatures for Smart Accounts","dc:creator":"Vectorized","category":"ERCs","description":"<h1><a name=\"readable-typed-signatures-for-smart-accounts-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#readable-typed-signatures-for-smart-accounts-1\"></a>Readable Typed Signatures for Smart Accounts</h1>\n<p><strong>Description:</strong> A defensive rehashing scheme which prevents signature replays across smart accounts and preserves the readability of the signed contents.</p>\n<p><strong>Authors:</strong> vectorized (<a class=\"mention\" href=\"https://ethereum-magicians.org/u/vectorized\">@vectorized</a>), Sihoon Lee (<span class=\"mention\">@push0ebp</span>), Francisco Giordano (<a class=\"mention\" href=\"https://ethereum-magicians.org/u/frangio\">@frangio</a>), Im Juno (<span class=\"mention\">@junomonster</span>), howydev (<span class=\"mention\">@howydev</span>), 0xcuriousapple (<span class=\"mention\">@0xcuriousapple</span>)</p>\n<p><strong>Requires:</strong> 191, 712, 1271, 5267</p>\n<h2><a name=\"preliminary-reading-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#preliminary-reading-2\"></a>Preliminary Reading</h2>\n<h3><a name=\"signature-replay-vulnerability-with-erc-1271-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#signature-replay-vulnerability-with-erc-1271-3\"></a>Signature replay vulnerability with ERC-1271</h3>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/6/65af1eb86ac88b46b616ccfdcdc771188a45ba6c.png\" class=\"site-icon\" data-dominant-color=\"489FFF\" width=\"16\" height=\"16\">\n\n      <a href=\"https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\" target=\"_blank\" rel=\"noopener nofollow ugc\">mirror.xyz</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/345;\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/d/dca4254106904038d1fb8be6fec3c3c239cb838d_2_690x345.jpeg\" class=\"thumbnail\" data-dominant-color=\"433A2A\" width=\"690\" height=\"345\"></div>\n\n<h3><a href=\"https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\" target=\"_blank\" rel=\"noopener nofollow ugc\">ERC1271 Replay - 15+ Teams Affected</a></h3>\n\n  <p>Sep 25, 2023, I found an issue in a widely used implementation of the ERC1271 pattern that affected 15+ teams. This blog describes the sequence of events regarding how it all came together. If you are a wallet team or a security researcher, consider...</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h3><a name=\"defensive-rehashing-implementations-in-smart-accounts-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#defensive-rehashing-implementations-in-smart-accounts-4\"></a>Defensive rehashing implementations in smart accounts</h3>\n<ul>\n<li>\n<p>Safe: <a href=\"https://github.com/safe-global/safe-smart-account/blob/5feb0d08f59cfbb44918be1ed5889d9bb634562a/contracts/handler/CompatibilityFallbackHandler.sol#L57\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">safe-smart-account/contracts/handler/CompatibilityFallbackHandler.sol at 5feb0d08f59cfbb44918be1ed5889d9bb634562a · safe-global/safe-smart-account · GitHub</a></p>\n</li>\n<li>\n<p>Coinbase: <a href=\"https://github.com/coinbase/smart-wallet/blob/facf1a5a00a393c859c77a7cff38de1e557c393f/src/ERC1271.sol#L70\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">smart-wallet/src/ERC1271.sol at facf1a5a00a393c859c77a7cff38de1e557c393f · coinbase/smart-wallet · GitHub</a></p>\n</li>\n</ul>\n<p>Twitter thread on opaqueness in defensive rehashing:<br>\n<a href=\"https://twitter.com/howydev/status/1780353754333634738\" class=\"onebox\" target=\"_blank\" rel=\"noopener nofollow ugc\">https://twitter.com/howydev/status/1780353754333634738</a></p>\n<p>Twitter thread on a possible phishing vector with readable defensive rehashing, and how it was fixed:<br>\n<a href=\"https://twitter.com/push0ebp/status/1786460154277572718\" class=\"onebox\" target=\"_blank\" rel=\"noopener nofollow ugc\">https://twitter.com/push0ebp/status/1786460154277572718</a></p>\n<h1><a name=\"code-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#code-5\"></a>Code</h1>\n<p>Solady Solidity ERC-1271 implementation, which implements this ERC-7739.</p><aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol\" target=\"_blank\" rel=\"noopener nofollow ugc\">Vectorized/solady/blob/main/src/accounts/ERC1271.sol</a></h4>\n\n\n      <pre><code class=\"lang-sol\">// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {EIP712} from \"../utils/EIP712.sol\";\nimport {SignatureCheckerLib} from \"../utils/SignatureCheckerLib.sol\";\n\n/// @notice ERC1271 mixin with nested EIP-712 approach.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/accounts/ERC1271.sol)\nabstract contract ERC1271 is EIP712 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    bytes32 internal constant _PERSONAL_SIGN_TYPEHASH =\n        0x983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     ERC1271 OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n</code></pre>\n\n\n\n  This file has been truncated. <a href=\"https://github.com/Vectorized/solady/blob/main/src/accounts/ERC1271.sol\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Viem utilities for Solady ERC-1271:</p><aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://viem.sh/experimental/solady/hashTypedData\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/3/3d5e1b406ccbb0fa3782762e2021084fd3dd715d.png\" class=\"site-icon\" data-dominant-color=\"1E1E20\" width=\"50\" height=\"50\">\n\n      <a href=\"https://viem.sh/experimental/solady/hashTypedData\" target=\"_blank\" rel=\"noopener nofollow ugc\">viem.sh</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/362;\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/d/d5de5c62551b2d1ec3baf69e56704f481b193113_2_690x362.jpeg\" class=\"thumbnail\" data-dominant-color=\"2C2B2D\" width=\"690\" height=\"362\"></div>\n\n<h3><a href=\"https://viem.sh/experimental/solady/hashTypedData\" target=\"_blank\" rel=\"noopener nofollow ugc\">hashTypedData</a></h3>\n\n  <p>Hashes EIP-712 typed data via Solady's ERC-1271 format.</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<hr>\n<h2><a name=\"abstract-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-6\"></a>Abstract</h2>\n<p>This proposal defines a standard to prevent signature replays across multiple smart accounts when they are owned by a single Externally Owned Account (EOA). This is achieved through a defensive rehashing scheme for <a href=\"https://ethereum-magicians.org\">ERC-1271</a> verification using specific nested <a href=\"https://ethereum-magicians.org\">EIP-712</a> typed structures, which preserves the readability of the signed contents during wallet client signature requests.</p>\n<h2><a name=\"motivation-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-7\"></a>Motivation</h2>\n<p>Smart accounts can verify signatures with via <a href=\"https://ethereum-magicians.org\">ERC-1271</a> using the <code>isValidSignature</code> function.</p>\n<p>A straightforward implementation as shown below, is vulnerable to signature replay attacks.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">/// @dev This implementation is NOT safe.\nfunction isValidSignature(\n    bytes32 hash,\n    bytes calldata signature\n) external override view returns (bytes4) {\n    if (ECDSA.recover(hash, signature) == owner) {\n        return 0x1626ba7e;\n    } else {\n        return 0xffffffff;\n    }\n}\n</code></pre>\n<p>When a multiple smart accounts are owned by a single EOA, the same signature can be replayed across the smart accounts if the <code>hash</code> does not include the smart account address.</p>\n<p>Unfortunately, this is the case for many popular applications (e.g. Permit2). As such, many smart account implementations perform some form of defensive rehashing. First, the smart account computes a final hash from minimally: (1) the hash, (2) its own address, (3) the chain ID. Then, the smart account verifies the final hash against the signature. Defensive rehashing can be implemented with <a href=\"https://ethereum-magicians.org\">EIP-712</a>, but a straightforward implementation will make the signed contents opaque.</p>\n<p>This standard provides a defensive rehashing scheme that makes the signed contents visible across all wallet clients that support <a href=\"https://ethereum-magicians.org\">EIP-712</a>. It is designed for minimal adoption friction. Even if wallet clients or application frontends are not updated, users can still inject client side JavaScript to enable the defensive rehashing.</p>\n<h2><a name=\"specification-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-8\"></a>Specification</h2>\n<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174.</p>\n<h3><a name=\"overview-9\" class=\"anchor\" href=\"https://ethereum-magicians.org#overview-9\"></a>Overview</h3>\n<p>Compliant smart account MUST implement the following:</p>\n<ul>\n<li>\n<p><a href=\"https://ethereum-magicians.org\">EIP-712</a> Typed structured data hashing and signing.<br>\nProvides the relevant typed data hashing logic internally, which is required to construct the final hashes.</p>\n</li>\n<li>\n<p><a href=\"https://ethereum-magicians.org\">ERC-1271</a> Standard Signature Validation Method for Contracts.<br>\nProvides the <code>isValidSignature(bytes32 hash, bytes calldata signature)</code> function.</p>\n</li>\n<li>\n<p><a href=\"https://ethereum-magicians.org\">ERC-5267</a> Retrieval of EIP-712 domain.<br>\nProvides the <code>eip712Domain()</code> function which is required to compute the final hashes.</p>\n</li>\n</ul>\n<p>This standard defines the behavior of the <code>isValidSignature</code> function for <a href=\"https://ethereum-magicians.org\">ERC-1271</a>, which comprises of two workflows: (1) the <code>TypedDataSign</code> workflow, (2) the <code>PersonalSign</code> workflow.</p>\n<h3><a name=\"typeddatasign-workflow-10\" class=\"anchor\" href=\"https://ethereum-magicians.org#typeddatasign-workflow-10\"></a><code>TypedDataSign</code> workflow</h3>\n<p>The <code>TypedDataSign</code> workflow handles the case where the <code>hash</code> is originally computed with <a href=\"https://ethereum-magicians.org\">EIP-712</a>.</p>\n<h4><a name=\"typeddatasign-final-hash-11\" class=\"anchor\" href=\"https://ethereum-magicians.org#typeddatasign-final-hash-11\"></a><code>TypedDataSign</code> final hash</h4>\n<p>The final hash for the <code>TypedDataSign</code> workflow is defined as:</p>\n<pre><code class=\"lang-auto\">keccak256(\\x19\\x01 ‖ APP_DOMAIN_SEPARATOR ‖\n    hashStruct(TypedDataSign({\n        contents: hashStruct(originalStruct),\n        name: eip712Domain().name,\n        version: eip712Domain().version,\n        chainId: eip712Domain().chainId,\n        verifyingContract: eip712Domain().verifyingContract,\n        salt: eip712Domain().salt,\n        extensions: eip712Domain().extensions\n    }))\n)\n</code></pre>\n<p>where <code>‖</code> denotes the concatenation operator for bytes.</p>\n<p>In Solidity, this can be written as:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">keccak256(\n    abi.encodePacked(\n        hex\"1901\",\n        // Application specific domain separator. Passed via `signature`.\n        bytes32(APP_DOMAIN_SEPARATOR),\n        keccak256(\n            abi.encode(\n                // Computed on-the-fly with `contentsType`, which is passed via `signature`.\n                typedDataSignTypehash, \n                // This is the `contents` struct hash, which is passed via `signature`.\n                bytes32(hashStruct(originalStruct)),\n                // `eip712Domain()` is from ERC-5267. \n                keccak256(bytes(eip712Domain().name)), \n                keccak256(bytes(eip712Domain().version)),\n                uint256(eip712Domain().chainId),\n                uint256(uint160(eip712Domain().verifyingContract)),\n                bytes32(eip712Domain().salt),\n                keccak256(abi.encodePacked(eip712Domain().extensions))\n            )\n        )\n    )\n)\n</code></pre>\n<p>where <code>typedDataSignTypehash</code> is:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">abi.encodePacked(\n    \"TypedDataSign(\",\n        contentsTypeName,\n        \"bytes1 fields,\",\n        \"string name,\",\n        \"string version,\",\n        \"uint256 chainId,\",\n        \"address verifyingContract,\",\n        \"bytes32 salt,\",\n        \"uint256[] extensions\",\n    \")\",\n    contentsType\n)\n</code></pre>\n<p>If <code>contentsType</code> is <code>\"Mail(address from,address to,string message)\"</code>, then <code>contentsTypeName</code> will be <code>\"Mail\"</code>.</p>\n<p>The <code>contentsTypeName</code> function can be computed with:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">// `LibString`: https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol\n//\n// `slice(string memory subject, uint256 start, uint256 end)` \n// returns a copy of `subject` sliced from `start` to `end` (exclusive).\n// `start` and `end` are byte offsets.\n//\n// `indexOf(string memory subject, string memory search)`\n// Returns the byte index of the first location of `search` in `subject`,\n// searching from left to right. Returns `2**256 - 1` if `search` is not found.\nLibString.slice(t, 0, LibString.indexOf(t, \"(\"));\n</code></pre>\n<p>For safety, smart accounts MUST treat the signature as invalid if any of the following is true:</p>\n<ul>\n<li><code>contentsTypeName</code> is the empty string (i.e. <code>bytes(contentsTypeName).length == 0</code>).</li>\n<li><code>contentsTypeName</code> starts with any of the following bytes <code>abcdefghijklmnopqrstuvwxyz(</code>.</li>\n<li><code>contentsTypeName</code> contains any of the following bytes <code>, )\\x00</code>.</li>\n</ul>\n<h4><a name=\"typeddatasign-signature-12\" class=\"anchor\" href=\"https://ethereum-magicians.org#typeddatasign-signature-12\"></a><code>TypedDataSign</code> signature</h4>\n<p>The <code>signature</code> passed into <code>isValidSignature</code> will be changed to:</p>\n<pre><code class=\"lang-auto\">originalSignature ‖ APP_DOMAIN_SEPARATOR ‖ contents ‖ contentsType ‖ uint16(contentsType.length)\n</code></pre>\n<p>where <code>contents</code> is the bytes32 struct hash of the original struct.</p>\n<p>In Solidity, this can be written as:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">abi.encodePacked(\n    bytes(originalSignature),\n    bytes32(APP_DOMAIN_SEPARATOR),\n    bytes32(contents),\n    bytes(contentsType),\n    uint16(contentsType.length)\n)\n</code></pre>\n<p>The appended <code>APP_DOMAIN_SEPARATOR</code> and <code>contents</code> struct hash will be used to verify if the <code>hash</code> passed into <code>isValidSignature</code> is indeed correct via:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">hash == keccak256(\n    abi.encodePacked(\n        hex\"1901\",\n        bytes32(APP_DOMAIN_SEPARATOR),\n        bytes32(contents)\n    )\n)\n</code></pre>\n<h3><a name=\"personalsign-workflow-13\" class=\"anchor\" href=\"https://ethereum-magicians.org#personalsign-workflow-13\"></a><code>PersonalSign</code> workflow</h3>\n<p>This <code>PersonalSign</code> workflow handles the case where the <code>hash</code> is originally computed with <a href=\"https://ethereum-magicians.org\">EIP-191</a>.</p>\n<h4><a name=\"personalsign-final-hash-14\" class=\"anchor\" href=\"https://ethereum-magicians.org#personalsign-final-hash-14\"></a><code>PersonalSign</code> final hash</h4>\n<p>The final hash for the <code>PersonalSign</code> workflow is defined as:</p>\n<pre><code class=\"lang-auto\">keccak256(\\x19\\x01 ‖ ACCOUNT_DOMAIN_SEPARATOR ‖\n    hashStruct(PersonalSign({\n        prefixed: keccak256(bytes(\\x19Ethereum Signed Message:\\n ‖\n        base10(bytes(someString).length) ‖ someString))\n    }))\n)\n</code></pre>\n<p>where <code>‖</code> denotes the concatenation operator for bytes.</p>\n<p>In Solidity, this can be written as:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">keccak256(\n    abi.encodePacked(\n        hex\"1901\",\n        // Smart account domain separator.\n        // Can be computed via `eip712Domain()` from ERC-5267.\n        bytes32(ACCOUNT_DOMAIN_SEPARATOR),\n        keccak256(\n            abi.encode(\n                // `PERSONAL_SIGN_TYPEHASH`.\n                keccak256(\"PersonalSign(bytes prefixed)\"),\n                // `hash` is from `isValidSignature(hash, signature)`\n                hash\n            )\n        )\n    )\n)\n</code></pre>\n<p>Here, <code>hash</code> is computed in the application contract and passed into <code>isValidSignature</code>.</p>\n<p>The smart account does not need to know how <code>hash</code> is computed. For completeness, this is how it can be computed:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">abi.encodePacked(\n    \"\\x19Ethereum Signed Message:\\n\",\n    // `LibString`: https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol\n    //\n    // `toString` returns the base10 representation of a uint256.\n    LibString.toString(someString.length),\n    // This is the original message to be signed.\n    someString\n)\n</code></pre>\n<h4><a name=\"personalsign-signature-15\" class=\"anchor\" href=\"https://ethereum-magicians.org#personalsign-signature-15\"></a><code>PersonalSign</code> signature</h4>\n<p>The <code>PersonalSign</code> workflow does not require additional data to be appended to the <code>signature</code> passed into <code>isValidSignature</code>.</p>\n<h3><a name=\"supportsnestedtypeddatasign-function-for-detection-16\" class=\"anchor\" href=\"https://ethereum-magicians.org#supportsnestedtypeddatasign-function-for-detection-16\"></a><code>supportsNestedTypedDataSign</code> function for detection</h3>\n<p>To facilitate automatic detection, smart accounts SHOULD implement the following function:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">/// @dev For automatic detection that the smart account supports the nested EIP-712 workflow.\n/// By default, it returns `bytes32(bytes4(keccak256(\"supportsNestedTypedDataSign()\")))`,\n/// denoting support for the default behavior, as implemented in\n/// `_erc1271IsValidSignatureViaNestedEIP712`, which is called in `isValidSignature`.\n/// Future extensions should return a different non-zero `result` to denote different behavior.\n/// This method intentionally returns bytes32 to allow freedom for future extensions.\nfunction supportsNestedTypedDataSign() public view virtual returns (bytes32 result) {\n    result = bytes4(0xd620c85a);\n}\n</code></pre>\n<h3><a name=\"workflow-detection-17\" class=\"anchor\" href=\"https://ethereum-magicians.org#workflow-detection-17\"></a>Workflow detection</h3>\n<p>The <code>isValidSignature</code> function MUST perform the <code>TypedDataSign</code> workflow if the signature contains the correct data to reconstruct the <code>hash</code>.</p>\n<p>This can be checked via:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">// If this is true, it means that the `signature` contains \n// the correct `APP_DOMAIN_SEPARATOR` and `contents`.\nhash == keccak256(\n    abi.encodePacked(\n        hex\"1901\",\n        bytes32(APP_DOMAIN_SEPARATOR),\n        bytes32(contents)\n    )\n)\n</code></pre>\n<p>If this expression returns false, then the <code>PersonalSign</code> workflow MUST be attempted.</p>\n<h3><a name=\"conditional-skipping-of-defensive-rehashing-18\" class=\"anchor\" href=\"https://ethereum-magicians.org#conditional-skipping-of-defensive-rehashing-18\"></a>Conditional skipping of defensive rehashing</h3>\n<p>Smart accounts MAY skip the defensive rehashing workflows if any of the following is true:</p>\n<ul>\n<li><code>isValidSignature</code> is called off-chain.</li>\n<li>The <code>hash</code> passed into <code>isValidSignature</code> has already included the address of the smart account.</li>\n</ul>\n<h2><a name=\"rationale-19\" class=\"anchor\" href=\"https://ethereum-magicians.org#rationale-19\"></a>Rationale</h2>\n<h3><a name=\"typeddatasign-structure-20\" class=\"anchor\" href=\"https://ethereum-magicians.org#typeddatasign-structure-20\"></a><code>TypedDataSign</code> structure</h3>\n<p>The <code>typedDataSignTypehash</code> must be constructed on-the-fly on-chain. This is to enforce that the signed contents will be visible in the signature request, by requiring that <code>contents</code> be a user defined type.</p>\n<p>The structure is intentionally made flat with the fields of <code>eip712Domain</code> to make implementation feasible. Otherwise, smart accounts must implement on-chain lexographical sorting of strings for the struct type names when constructing <code>typedDataSignTypehash</code>.</p>\n<h3><a name=\"supportsnestedtypeddatasign-for-detection-21\" class=\"anchor\" href=\"https://ethereum-magicians.org#supportsnestedtypeddatasign-for-detection-21\"></a><code>supportsNestedTypedDataSign</code> for detection</h3>\n<p>Without this function, this standard will not change the interface of the smart account, as it defines the behavior of <code>isValidSignature</code> without adding any new functions. As such, <a href=\"https://ethereum-magicians.org\">ERC-165</a> cannot be used.</p>\n<p>For future extendability, <code>supportsNestedTypedDataSign</code> is defined to return a bytes32 as the first word of its returned data. For bytecode compactness and to leave space for bit packing, only the leftmost 4 bytes are set to the function selector of <code>supportsNestedTypedDataSign</code>.</p>\n<p>The <code>supportsNestedTypedDataSign</code> function may be extended to return multiple values (e.g. <code>bytes32 result, bytes memory data</code>), as long as the first word of the returned data is a bytes32 identifier. This will not change the function selector.</p>\n<h2><a name=\"backwards-compatibility-22\" class=\"anchor\" href=\"https://ethereum-magicians.org#backwards-compatibility-22\"></a>Backwards Compatibility</h2>\n<p>No backwards compatibility issues.</p>\n<h2><a name=\"reference-implementation-23\" class=\"anchor\" href=\"https://ethereum-magicians.org#reference-implementation-23\"></a>Reference Implementation</h2>\n<p>The following reference implementation is production ready and optimized. It also includes relevant complementary features required for safety, flexibility, developer experience, and user experience.</p>\n<p>It is intentionally not minimalistic. This is to avoid repeating the mistake of <a href=\"https://ethereum-magicians.org\">ERC-1271</a>, where a reference implementation is wrongly assumed to be safe for production use.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// https://github.com/Vectorized/solady/blob/main/src/utils/EIP712.sol\nimport {EIP712} from \"../utils/EIP712.sol\";\n// https://github.com/Vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol\nimport {SignatureCheckerLib} from \"../utils/SignatureCheckerLib.sol\";\n\n/// @notice ERC1271 mixin with nested EIP-712 approach.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/accounts/ERC1271.sol)\nabstract contract ERC1271 is EIP712 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    bytes32 internal constant _PERSONAL_SIGN_TYPEHASH =\n        0x983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     ERC1271 OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Validates the signature with ERC1271 return,\n    /// so that this account can also be used as a signer.\n    function isValidSignature(bytes32 hash, bytes calldata signature)\n        public\n        view\n        virtual\n        returns (bytes4 result)\n    {\n        bool success = _erc1271IsValidSignature(hash, _erc1271UnwrapSignature(signature));\n        /// @solidity memory-safe-assembly\n        assembly {\n            // `success ? bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")) : 0xffffffff`.\n            // We use `0xffffffff` for invalid, in convention with the reference implementation.\n            result := shl(224, or(0x1626ba7e, sub(0, iszero(success))))\n        }\n    }\n\n    /// @dev For automatic detection that the smart account supports the nested EIP-712 workflow.\n    /// By default, it returns `bytes32(bytes4(keccak256(\"supportsNestedTypedDataSign()\")))`,\n    /// denoting support for the default behavior, as implemented in\n    /// `_erc1271IsValidSignatureViaNestedEIP712`, which is called in `isValidSignature`.\n    /// Future extensions should return a different non-zero `result` to denote different behavior.\n    /// This method intentionally returns bytes32 to allow freedom for future extensions.\n    function supportsNestedTypedDataSign() public view virtual returns (bytes32 result) {\n        result = bytes4(0xd620c85a);\n    }\n\n    /// @dev Returns the ERC1271 signer.\n    /// Override to return the signer `isValidSignature` checks against.\n    function _erc1271Signer() internal view virtual returns (address);\n\n    /// @dev Returns whether the `msg.sender` is considered safe, such\n    /// that we don't need to use the nested EIP-712 workflow.\n    /// Override to return true for more callers.\n    /// See: https://mirror.xyz/curiousapple.eth/pFqAdW2LiJ-6S4sg_u1z08k4vK6BCJ33LcyXpnNb8yU\n    function _erc1271CallerIsSafe() internal view virtual returns (bool) {\n        // The canonical `MulticallerWithSigner` at 0x000000000000D9ECebf3C23529de49815Dac1c4c\n        // is known to include the account in the hash to be signed.\n        return msg.sender == 0x000000000000D9ECebf3C23529de49815Dac1c4c;\n    }\n\n    /// @dev Returns whether the `hash` and `signature` are valid.\n    /// Override if you need non-ECDSA logic.\n    function _erc1271IsValidSignatureNowCalldata(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return SignatureCheckerLib.isValidSignatureNowCalldata(_erc1271Signer(), hash, signature);\n    }\n\n    /// @dev Unwraps and returns the signature.\n    function _erc1271UnwrapSignature(bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bytes calldata result)\n    {\n        result = signature;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Unwraps the ERC6492 wrapper if it exists.\n            // See: https://eips.ethereum.org/EIPS/eip-6492\n            if eq(\n                calldataload(add(result.offset, sub(result.length, 0x20))),\n                mul(0x6492, div(not(mload(0x60)), 0xffff)) // `0x6492...6492`.\n            ) {\n                let o := add(result.offset, calldataload(add(result.offset, 0x40)))\n                result.length := calldataload(o)\n                result.offset := add(o, 0x20)\n            }\n        }\n    }\n\n    /// @dev Returns whether the `signature` is valid for the `hash.\n    function _erc1271IsValidSignature(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return _erc1271IsValidSignatureViaSafeCaller(hash, signature)\n            || _erc1271IsValidSignatureViaNestedEIP712(hash, signature)\n            || _erc1271IsValidSignatureViaRPC(hash, signature);\n    }\n\n    /// @dev Performs the signature validation without nested EIP-712 if the caller is\n    /// a safe caller. A safe caller must include the address of this account in the hash.\n    function _erc1271IsValidSignatureViaSafeCaller(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        if (_erc1271CallerIsSafe()) result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n    }\n\n    /// @dev ERC1271 signature validation (Nested EIP-712 workflow).\n    ///\n    /// This uses ECDSA recovery by default (see: `_erc1271IsValidSignatureNowCalldata`).\n    /// It also uses a nested EIP-712 approach to prevent signature replays when a single EOA\n    /// owns multiple smart contract accounts,\n    /// while still enabling wallet UIs (e.g. Metamask) to show the EIP-712 values.\n    ///\n    /// Crafted for phishing resistance, efficiency, flexibility.\n    /// __________________________________________________________________________________________\n    ///\n    /// Glossary:\n    ///\n    /// - `APP_DOMAIN_SEPARATOR`: The domain separator of the `hash` passed in by the application.\n    ///   Provided by the front end. Intended to be the domain separator of the contract\n    ///   that will call `isValidSignature` on this account.\n    ///\n    /// - `ACCOUNT_DOMAIN_SEPARATOR`: The domain separator of this account.\n    ///   See: `EIP712._domainSeparator()`.\n    /// __________________________________________________________________________________________\n    ///\n    /// For the `TypedDataSign` workflow, the final hash will be:\n    /// ```\n    ///     keccak256(\\x19\\x01 ‖ APP_DOMAIN_SEPARATOR ‖\n    ///         hashStruct(TypedDataSign({\n    ///             contents: hashStruct(originalStruct),\n    ///             name: keccak256(bytes(eip712Domain().name)),\n    ///             version: keccak256(bytes(eip712Domain().version)),\n    ///             chainId: eip712Domain().chainId,\n    ///             verifyingContract: eip712Domain().verifyingContract,\n    ///             salt: eip712Domain().salt,\n    ///             extensions: keccak256(abi.encodePacked(eip712Domain().extensions))\n    ///         }))\n    ///     )\n    /// ```\n    /// where `‖` denotes the concatenation operator for bytes.\n    /// The order of the fields is important: `contents` comes before `name`.\n    ///\n    /// The signature will be `r ‖ s ‖ v ‖\n    ///     APP_DOMAIN_SEPARATOR ‖ contents ‖ contentsType ‖ uint16(contentsType.length)`,\n    /// where `contents` is the bytes32 struct hash of the original struct.\n    ///\n    /// The `APP_DOMAIN_SEPARATOR` and `contents` will be used to verify if `hash` is indeed correct.\n    /// __________________________________________________________________________________________\n    ///\n    /// For the `PersonalSign` workflow, the final hash will be:\n    /// ```\n    ///     keccak256(\\x19\\x01 ‖ ACCOUNT_DOMAIN_SEPARATOR ‖\n    ///         hashStruct(PersonalSign({\n    ///             prefixed: keccak256(bytes(\\x19Ethereum Signed Message:\\n ‖\n    ///                 base10(bytes(someString).length) ‖ someString))\n    ///         }))\n    ///     )\n    /// ```\n    /// where `‖` denotes the concatenation operator for bytes.\n    ///\n    /// The `PersonalSign` type hash will be `keccak256(\"PersonalSign(bytes prefixed)\")`.\n    /// The signature will be `r ‖ s ‖ v`.\n    /// __________________________________________________________________________________________\n    ///\n    /// For demo and typescript code, see:\n    /// - https://github.com/junomonster/nested-eip-712\n    /// - https://github.com/frangio/eip712-wrapper-for-eip1271\n    ///\n    /// Their nomenclature may differ from ours, although the high-level idea is similar.\n    ///\n    /// Of course, if you have control over the codebase of the wallet client(s) too,\n    /// you can choose a more minimalistic signature scheme like\n    /// `keccak256(abi.encode(address(this), hash))` instead of all these acrobatics.\n    /// All these are just for widespread out-of-the-box compatibility with other wallet clients.\n    /// We want to create bazaars, not walled castles.\n    /// And we'll use push the Turing Completeness of the EVM to the limits to do so.\n    function _erc1271IsValidSignatureViaNestedEIP712(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        bytes32 t = _typedDataSignFields();\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n            // `c` is `contentsType.length`, which is stored in the last 2 bytes of the signature.\n            let c := shr(240, calldataload(add(signature.offset, sub(signature.length, 2))))\n            for {} 1 {} {\n                let l := add(0x42, c) // Total length of appended data (32 + 32 + c + 2).\n                let o := add(signature.offset, sub(signature.length, l)) // Offset of appended data.\n                mstore(0x00, 0x1901) // Store the \"\\x19\\x01\" prefix.\n                calldatacopy(0x20, o, 0x40) // Copy the `APP_DOMAIN_SEPARATOR` and `contents` struct hash.\n                // Use the `PersonalSign` workflow if the reconstructed hash doesn't match,\n                // or if the appended data is invalid, i.e.\n                // `appendedData.length &gt; signature.length || contentsType.length == 0`.\n                if or(xor(keccak256(0x1e, 0x42), hash), or(lt(signature.length, l), iszero(c))) {\n                    t := 0 // Set `t` to 0, denoting that we need to `hash = _hashTypedData(hash)`.\n                    mstore(t, _PERSONAL_SIGN_TYPEHASH)\n                    mstore(0x20, hash) // Store the `prefixed`.\n                    hash := keccak256(t, 0x40) // Compute the `PersonalSign` struct hash.\n                    break\n                }\n                // Else, use the `TypedDataSign` workflow.\n                // `TypedDataSign({ContentsName} contents,bytes1 fields,...){ContentsType}`.\n                mstore(m, \"TypedDataSign(\") // Store the start of `TypedDataSign`'s type encoding.\n                let p := add(m, 0x0e) // Advance 14 bytes to skip \"TypedDataSign(\".\n                calldatacopy(p, add(o, 0x40), c) // Copy `contentsType` to extract `contentsName`.\n                // `d &amp; 1 == 1` means that `contentsName` is invalid.\n                let d := shr(byte(0, mload(p)), 0x7fffffe000000000000010000000000) // Starts with `[a-z(]`.\n                // Store the end sentinel '(', and advance `p` until we encounter a '(' byte.\n                for { mstore(add(p, c), 40) } iszero(eq(byte(0, mload(p)), 40)) { p := add(p, 1) } {\n                    d := or(shr(byte(0, mload(p)), 0x120100000001), d) // Has a byte in \", )\\x00\".\n                }\n                mstore(p, \" contents,bytes1 fields,string n\") // Store the rest of the encoding.\n                mstore(add(p, 0x20), \"ame,string version,uint256 chain\")\n                mstore(add(p, 0x40), \"Id,address verifyingContract,byt\")\n                mstore(add(p, 0x60), \"es32 salt,uint256[] extensions)\")\n                p := add(p, 0x7f)\n                calldatacopy(p, add(o, 0x40), c) // Copy `contentsType`.\n                // Fill in the missing fields of the `TypedDataSign`.\n                calldatacopy(t, o, 0x40) // Copy the `contents` struct hash to `add(t, 0x20)`.\n                mstore(t, keccak256(m, sub(add(p, c), m))) // Store `typedDataSignTypehash`.\n                // The \"\\x19\\x01\" prefix is already at 0x00.\n                // `APP_DOMAIN_SEPARATOR` is already at 0x20.\n                mstore(0x40, keccak256(t, 0x120)) // `hashStruct(typedDataSign)`.\n                // Compute the final hash, corrupted if `contentsName` is invalid.\n                hash := keccak256(0x1e, add(0x42, and(1, d)))\n                signature.length := sub(signature.length, l) // Truncate the signature.\n                break\n            }\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n        if (t == bytes32(0)) hash = _hashTypedData(hash); // `PersonalSign` workflow.\n        result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n    }\n\n    /// @dev For use in `_erc1271IsValidSignatureViaNestedEIP712`,\n    function _typedDataSignFields() private view returns (bytes32 m) {\n        (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        ) = eip712Domain();\n        /// @solidity memory-safe-assembly\n        assembly {\n            m := mload(0x40) // Grab the free memory pointer.\n            mstore(0x40, add(m, 0x120)) // Allocate the memory.\n            // Skip 2 words for the `typedDataSignTypehash` and `contents` struct hash.\n            mstore(add(m, 0x40), shl(248, byte(0, fields)))\n            mstore(add(m, 0x60), keccak256(add(name, 0x20), mload(name)))\n            mstore(add(m, 0x80), keccak256(add(version, 0x20), mload(version)))\n            mstore(add(m, 0xa0), chainId)\n            mstore(add(m, 0xc0), shr(96, shl(96, verifyingContract)))\n            mstore(add(m, 0xe0), salt)\n            mstore(add(m, 0x100), keccak256(add(extensions, 0x20), shl(5, mload(extensions))))\n        }\n    }\n\n    /// @dev Performs the signature validation without nested EIP-712 to allow for easy sign ins.\n    /// This function must always return false or revert if called on-chain.\n    function _erc1271IsValidSignatureViaRPC(bytes32 hash, bytes calldata signature)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        // Non-zero gasprice is a heuristic to check if a call is on-chain,\n        // but we can't fully depend on it because it can be manipulated.\n        // See: https://x.com/NoahCitron/status/1580359718341484544\n        if (tx.gasprice == uint256(0)) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(gasprice(), gasprice())\n                // See: https://gist.github.com/Vectorized/3c9b63524d57492b265454f62d895f71\n                let b := 0x000000000000378eDCD5B5B0A24f5342d8C10485 // Basefee contract,\n                pop(staticcall(0xffff, b, codesize(), gasprice(), gasprice(), 0x20))\n                // If `gasprice &lt; basefee`, the call cannot be on-chain, and we can skip the gas burn.\n                if iszero(mload(gasprice())) {\n                    let m := mload(0x40) // Cache the free memory pointer.\n                    mstore(gasprice(), 0x1626ba7e) // `isValidSignature(bytes32,bytes)`.\n                    mstore(0x20, b) // Recycle `b` to denote if we need to burn gas.\n                    mstore(0x40, 0x40)\n                    let gasToBurn := or(add(0xffff, gaslimit()), gaslimit())\n                    // Burns gas computationally efficiently. Also, requires that `gas &gt; gasToBurn`.\n                    if or(eq(hash, b), lt(gas(), gasToBurn)) { invalid() }\n                    // Make a call to this with `b`, efficiently burning the gas provided.\n                    // No valid transaction can consume more than the gaslimit.\n                    // See: https://ethereum.github.io/yellowpaper/paper.pdf\n                    // Most RPCs perform calls with a gas budget greater than the gaslimit.\n                    pop(staticcall(gasToBurn, address(), 0x1c, 0x64, gasprice(), gasprice()))\n                    mstore(0x40, m) // Restore the free memory pointer.\n                }\n            }\n            result = _erc1271IsValidSignatureNowCalldata(hash, signature);\n        }\n    }\n}\n</code></pre>\n<h2><a name=\"security-considerations-24\" class=\"anchor\" href=\"https://ethereum-magicians.org#security-considerations-24\"></a>Security Considerations</h2>\n<h3><a name=\"rejecting-invalid-contentstypename-25\" class=\"anchor\" href=\"https://ethereum-magicians.org#rejecting-invalid-contentstypename-25\"></a>Rejecting invalid <code>contentsTypeName</code></h3>\n<p>Current major implementations of <code>eth_signTypedData</code> do not sanitize the names of custom types.</p>\n<p>A phishing website can craft a <code>contentsTypeName</code> with control characters to break out of the <code>PersonalSign</code> type encoding, resulting in the wallet client asking the user to sign an opaque hash.</p>\n<p>Requiring on-chain sanitization of <code>contentsTypeName</code> will block this phishing attack vector.</p>\n<h2><a name=\"copyright-26\" class=\"anchor\" href=\"https://ethereum-magicians.org#copyright-26\"></a>Copyright</h2>\n<p>Copyright and related rights waived via <a href=\"https://ethereum-magicians.org\">CC0</a>.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7739-readable-typed-signatures-for-smart-accounts/20513\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7739-readable-typed-signatures-for-smart-accounts/20513","pubDate":"Wed, 10 Jul 2024 03:21:14 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20513"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7739-readable-typed-signatures-for-smart-accounts/20513.rss","#text":"ERC-7739: Readable Typed Signatures for Smart Accounts"}},{"title":"RIP Idea: L2 Transaction Status Standard","dc:creator":"highlander","category":"RIPs","description":"<p>A recent discussion (June 2024) in the RollCall Telegram Group has yet again shown that a lack of standards around the processing status of an L2 transaction is confusing not only for users and developers (block explorers, wallets, smart contracts, chain analytics) but also for client teams themselves trying to understand what different statuses mean and what trust assumptions have been made for each status. Besides confusion, there are real security risks, especially for L2 bridges based on the processing status of an L2 transaction (finalized on the L2 but not on the L1 vs finalized on the L2 and the L1).</p>\n<p>This topic of discussion also arose in the <a href=\"https://github.com/ethereum-oasis-op/L2\" rel=\"noopener nofollow ugc\">OASIS Ethereum Open Projects L2 Standards WG</a> when discussing the <a href=\"https://github.com/ethereum-oasis-op/L2/pull/53\" rel=\"noopener nofollow ugc\">L2 Transaction Fee API specification</a>. The WG decided to make L2 Transaction Statuses their next work item.</p>\n<p>To start the discussion, the WG decided to propose a simple set of statuses both as a string and as a hex value, their definitions and trust assumptions. The minimal set of transaction statuses proposed is as follows:</p>\n<ul>\n<li><strong>L2 Pending</strong>: An L2 transaction submitted to an L2, and waiting to be processed by a sequencer. <strong>Trust Assumption</strong>: No inclusion guarantee on the L2</li>\n<li><strong>L2 Replaced</strong>: An L2 transaction that was “Pending” was replaced by another L2 transaction. T<strong>rust Assumption</strong>: Same as L2 Pending</li>\n<li><strong>L2 Dropped</strong>: An L2 transaction that was removed from the L2 processing queue. <strong>Trust Assumption</strong>: NA</li>\n<li><strong>L2 Confirmed</strong>: An L2 transaction processed by a sequencer and assigned an order in a proposed L2 block by the sequencer by applying an L2 client-specific L2 transaction ordering protocol. <strong>Trust Assumption</strong>: The L2 transaction order guarantee is based on the security guarantee of the ordering protocol. Inclusion in finalized L2 and L1 blocks is not guaranteed.</li>\n<li><strong>L2 Included, L1 Pending</strong>: An L2 transaction included in an L2 block but not yet submitted to the L1. <strong>Trust Assumption</strong>: The L2 inclusion guarantee is dependent on the submission guarantee of the L2 block to the L1 and L1 Finalization.</li>\n<li><strong>L2 Included, L1 Included</strong>: An L2 transaction included in an L2 block submitted to the L1. Trust Assumption: The L2 inclusion guarantee is dependent on L1 finalization.</li>\n<li><strong>L2 Finalized, L1 Finalized</strong>: An L2 transaction included in a L2 block that has been included in a finalized L1 transaction. <strong>Trust Assumption</strong>: The L2 transaction finalization guarantee is equivalent to an L1 transaction finalization guarantee in a finalized L1 block.</li>\n</ul>\n            <p><small>7 posts - 4 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/rip-idea-l2-transaction-status-standard/20511\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/rip-idea-l2-transaction-status-standard/20511","pubDate":"Tue, 09 Jul 2024 23:30:37 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20511"},"source":{"@url":"https://ethereum-magicians.org/t/rip-idea-l2-transaction-status-standard/20511.rss","#text":"RIP Idea: L2 Transaction Status Standard"}},{"title":"ERC-7738: Permissionless Script Registry","dc:creator":"JamesB","category":"ERCs","description":"<p>Discussion topic for EIP-7738</p>\n<p>This is the discussion on a draft EIP for an onchain script registry.</p>\n<h2><a name=\"abstract-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-1\"></a>Abstract</h2>\n<p>This EIP provides a means to create a standard registry for locating executable scripts associated with contracts.</p>\n<h2><a name=\"motivation-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-2\"></a>Motivation</h2>\n<p><a href=\"https://github.com/ethereum/ERCs/blob/master/ERCS/erc-5169.md\" rel=\"noopener nofollow ugc\">ERC-5169</a> (<code>scriptURI</code>) provides a client script lookup method for contracts. This requires the contract to have implemented the ERC-5169 interface at the time of construction (or allow an upgrade path).</p>\n<p>This proposal outlines a contract that can supply prototype and certified scripts. The contract would be a singleton instance multichain that would be deployed at identical addresses on supported chains.</p>\n<h3><a name=\"overview-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#overview-3\"></a>Overview</h3>\n<p>The registry contract will supply a set of URI links for a given contract address. These URI links point to script programs that can be fetched by a wallet, viewer or mini-dapp.</p>\n<p>The pointers can be set using a setter in the registry contract.</p>\n<p>The scripts provided could be authenticated in various ways:</p>\n<ol>\n<li>The target contract which the setter specifies implements the <code>Ownable</code> interface. Once the script is fetched, the signature can be verified to match the Owner(). In the case of TokenScript this can be checked by a dapp or wallet using the TokenScript SDK, the TokenScript online verification service, or by extracting the signature from the XML, taking a keccak256 of the script and ecrecover the signing key address.</li>\n<li>If the contract does not implement Ownable, further steps can be taken:<br>\na. The hosting app/wallet can acertain the deployment key using 3rd party API or block explorer. The implementing wallet, dapp or viewer would then check the signature matches this deployment key.<br>\nb. Signing keys could be pre-authenticated by a hosting app, using an embedded keychain.<br>\nc. A governance token could allow a script council to authenticate requests to set and validate keys.</li>\n</ol>\n<p>If these criteria are not met:</p>\n<ul>\n<li>For mainnet implementations the implementing wallet should be cautious about using the script - it would be at the app and/or user’s discretion.</li>\n<li>For testnets, it is acceptable to allow the script to function, at the discretion of the wallet provider.</li>\n</ul>\n<h2><a name=\"specification-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-4\"></a>Specification</h2>\n<p>The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY” and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.</p>\n<p>The contract MUST implement the IDecentralisedRegistry interface.<br>\nThe contract MUST emit the ScriptUpdate event when the script is updated.<br>\nThe contract SHOULD order the scriptURI returned so that the owner script is returned first (in the case of simple implementations the wallet will pick the first scriptURI returned).</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">interface IDecentralisedRegistry {\n    /// @dev This event emits when the scriptURI is updated, \n    /// so wallets implementing this interface can update a cached script\n    event ScriptUpdate(address indexed contractAddress, string[] newScriptURI);\n\n    /// @notice Get the scriptURI for the contract\n    /// @return The scriptURI\n    function scriptURI(address contractAddress) external view returns (string[] memory);\n\n    /// @notice Update the scriptURI \n    /// emits event ScriptUpdate(address indexed contractAddress, scriptURI memory newScriptURI);\n    function setScriptURI(address contractAddress, string[] memory scriptURIList) external;\n}\n</code></pre>\n<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174.</p>\n<h2><a name=\"rationale-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#rationale-5\"></a>Rationale</h2>\n<p>This method allows contracts written without the ERC-5169 interface to associate scripts with themselves, and avoids the need for a centralised online server, with subsequent need for security and the requires an organisation to become a gatekeeper for the database.</p>\n<h2><a name=\"reference-implementation-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#reference-implementation-6\"></a>Reference Implementation</h2>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">import \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract DecentralisedRegistry is IDecentralisedRegistry {\n    struct ScriptEntry {\n        mapping(address =&gt; string[]) scriptURIs;\n        address[] addrList;\n    }\n\n    mapping(address =&gt; ScriptEntry) private _scriptURIs;\n\n    function setScriptURI(\n        address contractAddress,\n        string[] memory scriptURIList\n    ) public {\n        require (scriptURIList.length &gt; 0, \"&gt; 0 entries required in scriptURIList\");\n        bool isOwnerOrExistingEntry = Ownable(contractAddress).owner() == msg.sender \n            || _scriptURIs[contractAddress].scriptURIs[msg.sender].length &gt; 0;\n        _scriptURIs[contractAddress].scriptURIs[msg.sender] = scriptURIList;\n        if (!isOwnerOrExistingEntry) {\n            _scriptURIs[contractAddress].addrList.push(msg.sender);\n        }\n        \n        emit ScriptUpdate(contractAddress, msg.sender, scriptURIList);\n    }\n\n    // Return the list of scriptURI for this contract.\n    // Order the return list so `Owner()` assigned scripts are first in the list\n    function scriptURI(\n        address contractAddress\n    ) public view returns (string[] memory) {\n        //build scriptURI return list, owner first\n        address contractOwner = Ownable(contractAddress).owner();\n        address[] memory addrList = _scriptURIs[contractAddress].addrList;\n        uint256 i;\n\n        //now calculate list length\n        uint256 listLen = _scriptURIs[contractAddress].scriptURIs[contractOwner].length;\n        for (i = 0; i &lt; addrList.length; i++) {\n            listLen += _scriptURIs[contractAddress].scriptURIs[addrList[i]].length;\n        }\n\n        string[] memory ownerScripts = new string[](listLen);\n        uint256 scriptIndex = 0;\n\n        // Add owner strings\n        for (i = 0; i &lt; _scriptURIs[contractAddress].scriptURIs[contractOwner].length; i++) {\n            ownerScripts[scriptIndex++] = _scriptURIs[contractAddress].scriptURIs[contractOwner][i];\n        }\n\n        // remainder\n        for (i = 0; i &lt; addrList.length; i++) {\n            for (uint256 j = 0; j &lt; _scriptURIs[contractAddress].scriptURIs[addrList[i]].length; j++) {\n                string memory thisScriptURI = _scriptURIs[contractAddress].scriptURIs[addrList[i]][j];\n                if (bytes(thisScriptURI).length &gt; 0) {\n                    ownerScripts[scriptIndex++] = thisScriptURI;\n                }\n            }\n        }\n\n        //fill remainder of any removed strings\n        for (i = scriptIndex; i &lt; listLen; i++) {\n            ownerScripts[scriptIndex++] = \"\";\n        }\n\n        return ownerScripts;\n    }\n}\n</code></pre>\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7738-permissionless-script-registry/20503\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7738-permissionless-script-registry/20503","pubDate":"Tue, 09 Jul 2024 10:01:39 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20503"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7738-permissionless-script-registry/20503.rss","#text":"ERC-7738: Permissionless Script Registry"}},{"title":"ERC-7731: Vulnerability and Exposure Identifier","dc:creator":"dimitrysc","category":"ERCs","description":"<p>Currently, there is no clear, common language to specify vulnerabilities in crypto. Ethical hackers often refer to vulnerabilities using a combination of “Protocol Name + Exploit,” which can be very confusing, especially when multiple attacks occur on the same protocol.</p>\n<p>To reduce communication costs between protocol developers and ethical hackers and build on the security practices of Web2, we propose the VE (Vulnerability and Exposure) identifier. This EIP allows any organization or individual to maintain its own VE on-chain, standardizing the language used to describe and report vulnerabilities.</p>\n<aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/ERCs/pull/513\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/ERCs/pull/513\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/ERCs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/ERCs/pull/513\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add ERC: Vulnerability and Exposure Identifier Specification and Indexing</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>SecurFi:master</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-06-30\" data-time=\"09:31:16\" data-timezone=\"UTC\">09:31AM - 30 Jun 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/dimitrysuen\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"dimitrysuen\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/0/0a7dbb662442ff0349c951a317c7f62dc897668c.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"AA6363\">\n            dimitrysuen\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"1 commits changed 2 files with 182 additions and 0 deletions\">\n          <a href=\"https://github.com/ethereum/ERCs/pull/513/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+182</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">To address the absence of a standardized reference method for vulnerabilities an<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/ERCs/pull/513\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">d to reduce communication costs between protocol developers and ethical hackers, this ERC proposes a rule for creating unique identifiers for vulnerabilities. The aim is to establish a common language in these scenarios.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7731-vulnerability-and-exposure-identifier/20497\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7731-vulnerability-and-exposure-identifier/20497","pubDate":"Mon, 08 Jul 2024 13:16:00 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20497"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7731-vulnerability-and-exposure-identifier/20497.rss","#text":"ERC-7731: Vulnerability and Exposure Identifier"}},{"title":"ERC-7714: Simple Permissions Checks","dc:creator":"jeroen","category":"ERCs","description":"<p>Discussion for <a href=\"https://github.com/ethereum/ERCs/pull/435\" rel=\"noopener nofollow ugc\"> Add ERC: Simple Permissions Checks #435</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7714-simple-permissions-checks/20495\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7714-simple-permissions-checks/20495","pubDate":"Mon, 08 Jul 2024 08:39:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20495"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7714-simple-permissions-checks/20495.rss","#text":"ERC-7714: Simple Permissions Checks"}},{"title":"PeerDAS breakout #3, July 9 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1093\" class=\"inline-onebox\">PeerDAS Breakout Room #3 · Issue #1093 · ethereum/pm · GitHub</a></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/hwwang\">@hwwang</a></p>\n<h3><a name=\"key-items-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#key-items-2\"></a>Key items</h3>\n<p>by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/hwwang\">@hwwang</a> <em>(from Eth R&amp;D <a href=\"https://discord.com/channels/595666850260713488/988798065894907934/1260238069685289053\" class=\"inline-onebox\">Discord</a>)</em>:</p>\n<ul>\n<li><code>devnet-1</code> has many forks that would be hard to recover. See the meeting notes for the issues)</li>\n<li><strong>ACTION: relaunch <code>devnet-2</code> by the end of the week with all the client fixes.</strong></li>\n<li>Please review “Decouple network subnets from das-core” PR (a potential <code>devnet-3</code> update): <a href=\"https://github.com/ethereum/consensus-specs/pull/3832\" class=\"inline-onebox\">EIP-7594: Decouple network subnets from das-core by ppopth · Pull Request #3832 · ethereum/consensus-specs · GitHub</a></li>\n<li>Teams want to include <a href=\"https://github.com/ethereum/consensus-specs/pull/3800\" class=\"inline-onebox\">Specify the max blobs per block with each payload by ralexstokes · Pull Request #3800 · ethereum/consensus-specs · GitHub</a> into Pectra so that PeerDAS can be a pure network update (not hard fork).</li>\n</ul>\n<h3><a name=\"notes-chat-log-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#notes-chat-log-3\"></a>Notes &amp; chat log</h3>\n<aside class=\"onebox googledocs\" data-onebox-src=\"https://docs.google.com/document/d/1Ng2IrCe28kTt1BnIsjtMlKHq2MHgaja24LhFXSvqfJQ/edit\">\n  <header class=\"source\">\n\n      <a href=\"https://docs.google.com/document/d/1Ng2IrCe28kTt1BnIsjtMlKHq2MHgaja24LhFXSvqfJQ/edit\" target=\"_blank\" rel=\"noopener\">docs.google.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <a href=\"https://docs.google.com/document/d/1Ng2IrCe28kTt1BnIsjtMlKHq2MHgaja24LhFXSvqfJQ/edit\" target=\"_blank\" rel=\"noopener\"><span class=\"googledocs-onebox-logo g-docs-logo\"></span></a>\n\n<h3><a href=\"https://docs.google.com/document/d/1Ng2IrCe28kTt1BnIsjtMlKHq2MHgaja24LhFXSvqfJQ/edit\" target=\"_blank\" rel=\"noopener\">PeerDAS Breakout Room notes</a></h3>\n\n<p>PeerDAS Breakout Room #3 Date: 2024.07.09 Agenda: https://github.com/ethereum/pm/issues/1093 YouTube Video:   Client updates Prysm:  testing with new KZG APIs working on fixing bugs in devnet-1 Lighthouse: Mostly working on sync, fixed an issue with...</p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h3><a name=\"recording-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-4\"></a>Recording</h3>\n<p><a href=\"https://www.youtube.com/watch?v=kr356fArKbI&amp;t=487s\">PeerDAS Breakout Room #3</a></p>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/peerdas-breakout-3-july-9-2024/20482\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/peerdas-breakout-3-july-9-2024/20482","pubDate":"Sat, 06 Jul 2024 01:35:39 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20482"},"source":{"@url":"https://ethereum-magicians.org/t/peerdas-breakout-3-july-9-2024/20482.rss","#text":"PeerDAS breakout #3, July 9 2024"}},{"title":"All Core Devs - Consensus (ACDC) call #137, July 11 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1096\" class=\"inline-onebox\">Consensus-layer Call 137 · Issue #1096 · ethereum/pm · GitHub</a></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/ralexstokes\">@ralexstokes</a></p>\n<h3><a name=\"summary-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#summary-2\"></a>Summary</h3>\n<p><strong>ACDC <span class=\"hashtag-raw\">#137</span> recap</strong>  by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/ralexstokes\">@ralexstokes</a> <em>(from Eth R&amp;D <a href=\"https://discord.com/channels/595666850260713488/745077610685661265/1261006075818414263\" class=\"inline-onebox\">Discord</a>)</em><br>\nShorter call today!</p>\n<p>We began with Pectra:</p>\n<ul>\n<li>CL clients are generally ready for <code>pectra-devnet-1</code></li>\n<li>CL clients working well with static test vectors</li>\n<li>Given a few EL clients are ready, we should launch <code>pectra-devnet-1</code> as soon as possible, aiming for sometime next week</li>\n</ul>\n<p>Then, turned to PeerDAS:</p>\n<ul>\n<li><code>peerdas-devnet-1</code> launched but surfaced a number of client bugs which are being resolved</li>\n<li>Expect a <code>peerdas-devnet-2</code> soon as client teams continue to iterate on scaling blob bandwidth</li>\n<li>I gave an update on the work to uncouple the blob max and target values between the consensus and execution layers\n<ul>\n<li>After reviewing the syncing semantics, it appears the check for the blob maximum on the EL is redundant and we can safely drop that check and have it done solely at the CL</li>\n<li>We also want the same uncoupling treatment for the blob target so this value will be driven by the CL but needs to be included in the EL block header for the security of client sync</li>\n<li>Expect updates to <a href=\"https://github.com/ethereum/consensus-specs/pull/3800\">this PR</a> on the CL and an EIP for the 4844 changes soon™!</li>\n</ul>\n</li>\n</ul>\n<p>Wrapped the call with an update on some work to expand the fork choice testing</p>\n<ul>\n<li>Presentation from TXRX research here: <a href=\"https://docs.google.com/presentation/d/1W2DUwcu411cebQXi_9m-zVk1MASirpIop1cPdqg8dGE/edit#slide=id.g2ead0dd7c78_2_97\" class=\"inline-onebox\">FC compliance test suite on ACDC - Google Slides</a></li>\n<li>This work introduces tooling to expand the scope of the fork choice test suite for static coverage in clients</li>\n<li>Uses a constraint-driven programming language to generate interesting test cases which extend the static test corpus CL clients use for conformance testing</li>\n<li>CTA: CL teams please take a look and incorporate into your client for enhanced coverage</li>\n</ul>\n<p>See you next time!</p>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://www.youtube.com/live/IXgfhk_bFwA?t=160s\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/8/8a5cfde1fd98502653449e76075997a822e56753.png\" class=\"site-icon\" data-dominant-color=\"FF1010\" width=\"16\" height=\"16\">\n\n      <a href=\"https://www.youtube.com/live/IXgfhk_bFwA?t=160s\" target=\"_blank\" rel=\"noopener\">YouTube</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:480/360;\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/d/d96fc998480769431bc8968edfc27724d820cebb.jpeg\" class=\"thumbnail\" data-dominant-color=\"A2A5BA\" width=\"480\" height=\"360\"></div>\n\n<h3><a href=\"https://www.youtube.com/live/IXgfhk_bFwA?t=160s\" target=\"_blank\" rel=\"noopener\">Consensus Layer Meeting 137 [2024-7-11]</a></h3>\n\n  <p>https://github.com/ethereum/pm/issues/1096</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h3><a name=\"transcript-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#transcript-4\"></a>Transcript</h3>\n<p>[To be added]</p>\n<h3><a name=\"additional-info-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#additional-info-5\"></a>Additional info</h3>\n<p>Notes by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/christine_dkim\">@Christine_dkim</a>: <a href=\"https://www.galaxy.com/insights/research/ethereum-all-core-developers-consensus-call-137-writeup/\" class=\"inline-onebox\">Ethereum All Core Developers Consensus Call #137 Writeup | Galaxy</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/all-core-devs-consensus-acdc-call-137-july-11-2024/20481\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/all-core-devs-consensus-acdc-call-137-july-11-2024/20481","pubDate":"Sat, 06 Jul 2024 01:32:36 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20481"},"source":{"@url":"https://ethereum-magicians.org/t/all-core-devs-consensus-acdc-call-137-july-11-2024/20481.rss","#text":"All Core Devs - Consensus (ACDC) call #137, July 11 2024"}},{"title":"EIP-7736: Leaf-level state expiry in verkle trees","dc:creator":"gballet","category":"EIPs","description":"<p>This proposal relies on the structure of verkle trees to implement state expiry. A counter is maintained at the extension node level, and only extention-and-suffix nodes (colloquially referred to as “leaves”) are deleted.</p>\n<p>Proposal at: <a href=\"https://github.com/ethereum/EIPs/pull/8724\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: Leaf-level state expiry in verkle trees by gballet · Pull Request #8724 · ethereum/EIPs · GitHub</a></p>\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7736-leaf-level-state-expiry-in-verkle-trees/20474\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7736-leaf-level-state-expiry-in-verkle-trees/20474","pubDate":"Fri, 05 Jul 2024 08:05:31 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20474"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7736-leaf-level-state-expiry-in-verkle-trees/20474.rss","#text":"EIP-7736: Leaf-level state expiry in verkle trees"}},{"title":"EIP-7733: Deactivate EIP-158","dc:creator":"gballet","category":"EIPs","description":"<p>After EIP-6780, the <code>SELFDESTRUCT</code> instruction was neutered, so that contracts could no longer be deleted. Contract deletions can still occur, however, via EIP-158. While EIP-7702 this can not happen, this latter EIP introduces the possibility for an empty EoA to have state. This is causing some issues when interfacing with verkle, for which state deletion is not possible.</p>\n<p>EIP-158 was meant as a temporary measure to combat the “Shanghai attacks”. Now that this is attack has been mitigated by other means, it can be deactivated.</p>\n<p>Note: The deactivation should happen in Prague, for alternative methods to EIP-7612 to be valid. If EIP-7612 is accepted, then nothing opposes its inclusion in Osaka instead.</p>\n<p>PR URL: <a href=\"https://github.com/ethereum/EIPs/pull/8712/files\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: Deactivate EIP-158 by gballet · Pull Request #8712 · ethereum/EIPs · GitHub</a></p>\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7733-deactivate-eip-158/20445\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7733-deactivate-eip-158/20445","pubDate":"Tue, 02 Jul 2024 19:28:57 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20445"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7733-deactivate-eip-158/20445.rss","#text":"EIP-7733: Deactivate EIP-158"}},{"title":"Ethereum's complexity is a more centralising force than the OG web","dc:creator":"luke","category":"Uncategorized","description":"<p>Dear community,</p>\n<p>As an experienced (aging) programmer trying to work with Ethereum, I’d like to share some disillusionment creeping in today. I feel very thankful for the people who work so hard on libraries and OS projects, though ideally I should be able to code this all myself with a smile.</p>\n<p>I’ve previously expressed concerns about the quality of writing (and thus, also review) in EIPs, but today the content itself is the cause of my concern.</p>\n<p>Today, I find myself particularly despondent contemplating whether Ethereum can really be the future of software in the way HTTP became the future in 1989; HyperText was fundamentally text based and extensible, and therefore a joy from day one, while Ethereum feels like a stack of workarounds that may rapidly become untenable.</p>\n<p>Compared to the elegance and adaptability of the original web protocols, I find Ethereum esoteric and increasingly difficult to grasp, i.e. getting tougher, especially since Account Abstraction. The nature of the blockchain is challenging enough but the compounding complexity makes the system an almost vertical climb for newcomers and exhausting for experienced developers.</p>\n<p>The core problem with Ethereum seems to be rooted in the protocol’s lack of extensibility. I wonder if the decision to use RLP for message encoding, rather than a more flexible self-describing format that can better tolerate the unknowable, has led to spiralling complications. Each EIP reads like a trick way to get around some past decision and together they resemble a tower of hacks to sniff bytes, wrap payloads within payloads and dodge bullets with binary.</p>\n<p>Importantly, each hack necessitates burdensome code that must be added, tested and maintained in apps, and this pain drives people to centralised libraries and service providers. I think nothing of preparing and shooting off my own HTTP requests, but I’ll happily pay a service to prepare and send a transaction or user operation. This situation is the very antithesis of Ethereum’s values. It’s a more centralising force than the original web and we’ll see giant companies who’s value is pain relief.</p>\n<p>This situation appears to stem from an extreme application of the YAGNI principle. I’m sympathetic that blockchains are severely resource constrained, but do we see this situation as permanent or will there come a time when the trade offs change and it can be reconceptualised? YAGNI is fine for private app code, but does it apply here? When designing the future of all connected software, you probably are going to need a lot of things that evade your imagination right now.</p>\n<p>Each improvement prioritises efficiency and frugality, apparently even in its writing, and I rarely read a discussion about how the proposal can be extended or could handle some hypothetical cases. Given that we now have a good idea of just how often “we do need it”, an Extensibility section might be a prudent mandatory addition to EIPs. Another useful section would be a Realworld Integration Example which would add much needed concretion to the abstract terminology and help it all “click” for people.</p>\n<p>Today, Ethereum’s EIP quagmire feels too much like a “high WTFs per hour” codebase where team-mates churn due to years of untackled debt which repels the very people needed to reform it. As such, I also feel a Developer Pain section might also help authors think through the impact of their improvement on everyone else. This brings me back to the selfish writing: time saved by a few authors is time stolen from many thousands of readers. That must change.</p>\n<p>I’m curious about the community’s thoughts on balancing efficiency with extensibility in protocol design, and how Ethereum might evolve to address these challenges. As it stands, it is a slog.</p>\n<p>I am deeply concerned that it will ultimately prove too steep and too rough going to cross the chasm unless the developer experience is radically improved, without libraries and SaaS companies.</p>\n<p>“An important scientific innovation rarely makes its way by gradually winning over and converting its opponents: it rarely happens that <a href=\"https://en.wikipedia.org/wiki/Conversion_of_Paul_the_Apostle\" rel=\"noopener nofollow ugc\">Saul becomes Paul</a>. What does happen is that its opponents gradually die out, and that the growing generation is familiarized with the ideas from the beginning: another instance of the fact that the future lies with the youth.” — Max Planck</p>\n<p>I’ve not yet come across this in software. New ways frequently win over and convert. Software developers are insatiably curious and tend to relish learning new things. Yet with blockchain, I don’t see the excitement shared among my IRL peers. It’s eerie. I can’t tell if I’m on the bleeding edge or if it’s because no one else is coming.</p>\n<p>I had my doubt today because I was unable to be productive. Without productivity life is stressful, I feel like a loser, lonely, and I wonder if I am making a mistake going down this path.</p>\n<p>Then I reach the for $$$ painkillers.</p>\n<p>Sincerely,</p>\n<p>Luke Puplett</p>\n            <p><small>5 posts - 4 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/ethereums-complexity-is-a-more-centralising-force-than-the-og-web/20432\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/ethereums-complexity-is-a-more-centralising-force-than-the-og-web/20432","pubDate":"Tue, 02 Jul 2024 08:34:03 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20432"},"source":{"@url":"https://ethereum-magicians.org/t/ethereums-complexity-is-a-more-centralising-force-than-the-og-web/20432.rss","#text":"Ethereum's complexity is a more centralising force than the OG web"}},{"title":"ePBS breakout #4, July 5 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1083\" class=\"inline-onebox\">ePBS Breakout room #4 · Issue #1083 · ethereum/pm · GitHub</a><br>\n<span data-date=\"2024-07-05\" data-time=\"14:00:00\" class=\"discourse-local-date\" data-timezone=\"UTC\" data-email-preview=\"2024-07-05T14:00:00Z UTC\">2024-07-05T14:00:00Z UTC</span></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/potuz\">@potuz</a></p>\n<h3><a name=\"notes-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#notes-2\"></a>Notes</h3>\n<p><a href=\"https://hackmd.io/@ttsao/epbs-breakout4\" class=\"inline-onebox\">ePBS breakout #4 notes - HackMD</a></p>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<p><a href=\"https://www.youtube.com/watch?v=WC9XsungamU\">https://www.youtube.com/watch?v=WC9XsungamU</a></p>\n<h3><a name=\"additional-info-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#additional-info-4\"></a>Additional info</h3>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://eips.ethereum.org/EIPS/eip-7732\">\n  <header class=\"source\">\n\n      <a href=\"https://eips.ethereum.org/EIPS/eip-7732\" target=\"_blank\" rel=\"noopener\">Ethereum Improvement Proposals</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    \n\n<h3><a href=\"https://eips.ethereum.org/EIPS/eip-7732\" target=\"_blank\" rel=\"noopener\">EIP-7732: Enshrined Proposer-Builder Separation</a></h3>\n\n  <p>Separates the ethereum block in consensus and execution parts, adds a mechanism for the consensus proposer to choose the execution proposer.</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/epbs-breakout-4-july-5-2024/20429\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/epbs-breakout-4-july-5-2024/20429","pubDate":"Tue, 02 Jul 2024 02:21:38 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20429"},"source":{"@url":"https://ethereum-magicians.org/t/epbs-breakout-4-july-5-2024/20429.rss","#text":"ePBS breakout #4, July 5 2024"}},{"title":"Verkle implementers call #20, July 1 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1089\" class=\"inline-onebox\">Verkle Implementers Call #20 · Issue #1089 · ethereum/pm · GitHub</a><br>\n<span data-date=\"2024-07-01\" data-time=\"13:00:00\" class=\"discourse-local-date\" data-timezone=\"UTC\" data-email-preview=\"2024-07-01T13:00:00Z UTC\">2024-07-01T13:00:00Z UTC</span></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/rudolf\">@rudolf</a></p>\n<h3><a name=\"notes-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#notes-2\"></a>Notes</h3>\n<p>Notes by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/rudolf\">@rudolf</a> <em>from <a href=\"https://x.com/rudolf6_/status/1808790395394085224\">X</a></em></p>\n<h4><a name=\"h-1-team-updates-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#h-1-team-updates-3\"></a>1. Team updates</h4>\n<p>Starting things off as usual with quick updates from the client teams:</p>\n<p><a href=\"https://x.com/jasoriatanishq\">@jasoriatanishq</a> for <a href=\"https://x.com/nethermindeth\">@nethermindeth</a>: continuing testing the verkle sync implementation. Last week implemented the healing part. Anyone can now join the testnet using verkle sync.</p>\n<p><a class=\"mention\" href=\"https://ethereum-magicians.org/u/gballet\">@gballet</a> &amp; <a href=\"https://x.com/ignaciohagopian\">@ignaciohagopian</a> for <a href=\"https://x.com/go_ethereum\">@go_ethereum</a>: did a lot of work on the spec. Started implementation of EIP-4762. Still need to re-run the testing framework after it’s complete. Have also spent some time doing a new analysis of Verkle gas cost / code chunking using more recent mainnet transactions. Will be able to share this analysis soon.</p>\n<p><a href=\"https://x.com/kt2am1990\">@kt2am1990</a> for <a href=\"https://x.com/HyperledgerBesu\">@HyperledgerBesu</a>: working on the flat DB refactor for Verkle. Also looking at how we can optimize to reduce the size of the db. Also some performance optimizations around preloading the trie node during block processing, so at the end of the block when have to compute the state root everything is already in memory.</p>\n<p><a href=\"https://x.com/techbro_ccoli\">@techbro_ccoli</a> for the testing team: we now have a successful test framework, and our first release is out. These are the simplest form of the transition tests (mid fork) where the test block starts on the fork transition block. For next steps: filling the “genesis test” (starting at the verkle fork) as opposed to during transition.</p>\n<h4><a name=\"h-2-eip-7709-and-eip-2935-updates-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#h-2-eip-7709-and-eip-2935-updates-4\"></a>2. EIP-7709 and EIP-2935 updates</h4>\n<p>There’s been a bit of pushback on how Verkle handles blockhash, and suggestion that we should copy the behavior of 4788. Going forward, EIP-2935 will behave the same way as 4788.</p>\n<p><a class=\"mention\" href=\"https://ethereum-magicians.org/u/gballet\">@gballet</a> has opened a PR: <a href=\"https://t.co/MoN8hxVfHQ\">https://github.com/ethereum/EIPs/pull/8698…</a>.</p>\n<h4><a name=\"h-3-testnet-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#h-3-testnet-5\"></a>3. Testnet</h4>\n<p>For next testnet: we had a quick discussion on whether it should include deactivating EIP-158. There was no opposition to this on the call. Will also likely be some discussion around this topic of deactivating EIP-158 on this week’s ACD.</p>\n<h4><a name=\"h-4-the-transition-preimage-distribution-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#h-4-the-transition-preimage-distribution-6\"></a>4. The transition &amp; preimage distribution</h4>\n<p>Gary from Besu team joined to share recent ideas and questions around the transition (migrating state from Merkle to Verkle) and preimage distribution.</p>\n<p>Guillaume and Gary discussed that during the actual transition (which could take a month or more), clients will not be able to snap sync to latest. Only full sync will be possible. For a client syncing from scratch: they would do a snap sync up to the last Merkle Patricia Tree block, and then do a full sync from there. This seems like a reasonable approach since it would only take 2 hours or so to do a full sync in this case.</p>\n<p>On the topic of preimage distribution and including the preimage keys in the execution witness: <a href=\"https://x.com/kt2am1990\">@kt2am1990</a> mentioned that if we can have the address/slot we are touching in each transaction, it might enable some parallelization when we want to import the block. Guillaume will be adding this in next round of spec updates. So we’ll know which are being touched in the tx. One potential downside though is that it will make the witness much larger. Guillaume to make the spec update and then continue discussion on this topic.</p>\n<h4><a name=\"h-5-cost-of-extcodehashextcodesize-in-eof-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#h-5-cost-of-extcodehashextcodesize-in-eof-7\"></a>5. Cost of extcodehash/extcodesize in EOF</h4>\n<p>Last up, there was some discussion around a few things where EOF differs from legacy code and potentially adds cost: extcodehash, extcodesize, delegatecall. For each of these 3: in addition to reading the code hash you also need to check this is an EOF format. So the question is can we put it directly in the header to avoid this?</p>\n<p><a class=\"mention\" href=\"https://ethereum-magicians.org/u/shemnon\">@shemnon</a> suggested this is a great use case for a flag. If the EOF flag is set, then extcodesize and extcodehash will go down the separate EOF path to signal its EOF code versus an empty account. Importantly this flag would avoid the need to read an extra chunk which would incur extra cost. If the flag is there, then don’t need to read the chunk.</p>\n<hr>\n<p>That’s it for this week’s call…<br>\nCheck out <a href=\"https://t.co/gquxi5n9gU\">http://verkle.info</a> or head over to the Eth R&amp;D Discord (<a href=\"https://discord.com/channels/595666850260713488/824798757618188339\">verkle-trie-migration channel</a>) to stay up-to-date ! <img src=\"https://ethereum-magicians.org/images/emoji/twitter/pray.png?v=12\" title=\":pray:\" class=\"emoji\" alt=\":pray:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<h3><a name=\"recording-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-8\"></a>Recording</h3>\n<p><a href=\"https://www.youtube.com/watch?v=L873Z5K6XZQ\">https://www.youtube.com/watch?v=L873Z5K6XZQ</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/verkle-implementers-call-20-july-1-2024/20428\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/verkle-implementers-call-20-july-1-2024/20428","pubDate":"Tue, 02 Jul 2024 02:15:15 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20428"},"source":{"@url":"https://ethereum-magicians.org/t/verkle-implementers-call-20-july-1-2024/20428.rss","#text":"Verkle implementers call #20, July 1 2024"}},{"title":"All Core Devs - Execution (ACDE) call #191, July 4 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1080\" class=\"inline-onebox\">Execution Layer Meeting 191 · Issue #1080 · ethereum/pm · GitHub</a></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/ralexstokes\">@ralexstokes</a> (filling in for <a class=\"mention\" href=\"https://ethereum-magicians.org/u/timbeiko\">@timbeiko</a>)</p>\n<h3><a name=\"summary-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#summary-2\"></a>Summary</h3>\n<p>Recap by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/ralexstokes\">@ralexstokes</a> from <em><a href=\"https://discord.com/channels/595666850260713488/745077610685661265/1258457376638632016\">Eth R&amp;D Discord</a></em></p>\n<p>Started with Pectra updates</p>\n<ul>\n<li>Clients moving ahead with devnet-1 implementations</li>\n<li>Waiting for a greater number of clients to be ready before we launch devnet-1, but expect to be there in the next week or two</li>\n<li>Got an <a href=\"https://github.com/ethereum/EIPs/pull/8677\">update on 7702 progress</a> that will likely go into devnet-2; please take a look as the intention is to merge in the next week\n<ul>\n<li>Note: devnet-1 will reflect the current spec of EIP-7702</li>\n</ul>\n</li>\n</ul>\n<p>Then turned to discuss EIP-7212</p>\n<ul>\n<li>There’s support for the feature as it brings a lot of nice UX improvements around key/wallet management with a widely supported cryptographic curve</li>\n<li>We discussed the point around formal inclusion in Pectra, but will wait till the next ACDE to make that decision. While the EIP in isolation brings a nice set of features, it needs to be weighed against the already large scope of Pectra</li>\n<li>There are a few minor things to address around the EIP itself, including mirroring the precompile address across L2 deployments and L1. These will be resolved over the next two weeks to tee us up for an inclusion discussion on the next call</li>\n</ul>\n<p>Next, <a href=\"https://ethereum-magicians.org/t/eip-7002-execution-layer-triggerable-exits/14195/13\">we discussed a proposal to add events</a> to the predeploy system contracts for cross-layer communication with EIP-7002 and EIP-7251. Consensus was that this change makes sense and the corresponding contracts will be updated.</p>\n<p>Then, we had a call to <a href=\"https://github.com/ethereum/EIPs/pull/8712\">deactivate EIP-158</a> to simplify the effects of deploying EIP-7702 and the Verkle migration. In light of the latest updates to 7702 we no longer need this proposal and decided to ignore it.</p>\n<p>And to wrap the call, we had a discussion around making progress on other protocol improvements like history expiry and changes to the blob mempool to streamline usage of blobs by users like rollups. We jumped across various concerns here so check the call for the details. In short, there was a call for more regular updates on EIP-4444’s progress, and a call out to various things both rollups and clients can do to more intelligently handle the pipeline from blob producer to blob inclusion on-chain.</p>\n<p>Reminder: Goerli has been deprecated and so clients will (or have already!) dropped support for this testnet.</p>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://www.youtube.com/live/58_bJD_dmm0?t=35s\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/b/b115373510a81727e66d2e71ec3542fd26fde62e.png\" class=\"site-icon\" data-dominant-color=\"FF1010\" width=\"16\" height=\"16\">\n\n      <a href=\"https://www.youtube.com/live/58_bJD_dmm0?t=35s\" target=\"_blank\" rel=\"noopener\">YouTube</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:480/360;\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/f/f74a00e8f9c61b7ac507624f601d18a3fd72bf55.jpeg\" class=\"thumbnail\" data-dominant-color=\"334040\" width=\"480\" height=\"360\"></div>\n\n<h3><a href=\"https://www.youtube.com/live/58_bJD_dmm0?t=35s\" target=\"_blank\" rel=\"noopener\">Execution Layer Meeting 191 [2024-07-04]</a></h3>\n\n  <p>https://github.com/ethereum/pm/issues/1080</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/all-core-devs-execution-acde-call-191-july-4-2024/20427\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/all-core-devs-execution-acde-call-191-july-4-2024/20427","pubDate":"Tue, 02 Jul 2024 01:55:11 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20427"},"source":{"@url":"https://ethereum-magicians.org/t/all-core-devs-execution-acde-call-191-july-4-2024/20427.rss","#text":"All Core Devs - Execution (ACDE) call #191, July 4 2024"}},{"title":"RollCall #6, July 10 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h2><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h2>\n<p><a href=\"https://github.com/ethereum/pm/issues/1071\" class=\"inline-onebox\">RollCall #6 · Issue #1071 · ethereum/pm · GitHub</a><br>\nModerator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/carlbeek\">@CarlBeek</a></p>\n<h2><a name=\"summary-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#summary-2\"></a>Summary:</h2>\n<p><a href=\"https://notes.ethereum.org/@CarlBeek/RollCall-6-Summary\" class=\"inline-onebox\">RollCall #6 Summary - HackMD</a> by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/carlbeek\">@CarlBeek</a></p>\n<h2><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h2>\n<p><a href=\"https://www.youtube.com/watch?v=k-7z6lgleLw\">RollCall #6 [2024-07-10]</a></p>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/rollcall-6-july-10-2024/20426\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/rollcall-6-july-10-2024/20426","pubDate":"Tue, 02 Jul 2024 01:50:29 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20426"},"source":{"@url":"https://ethereum-magicians.org/t/rollcall-6-july-10-2024/20426.rss","#text":"RollCall #6, July 10 2024"}},{"title":"Post-Quantum Proxy Contract Pattern","dc:creator":"srarcharles","category":"Primordial Soup","description":"<p>I want you all to check out my idea.<br>\nNew “Proxy Pattern Smart Contract with Quantum-Resistance Ability”</p>\n<p>I’m concerning about quantum-computer’s attacks on Proxy contract. It may become single point of failure(SPOF) for many smart contract(DApps like LIDO, DEFIs, etc…) because malicious quantum attacker can upgrade proxy’s embedded address to any address they want without users knowing it have happened.</p>\n<ul>\n<li>About commonly used “Proxy Pattern”<br>\n<a href=\"https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Proxy Upgrade Pattern - OpenZeppelin Docs</a></li>\n</ul>\n<p>But, I find out new smart contract to protect it to be attacked when secret keys of smart contract owner of proxy contract is stollen.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethereum-magicians.org/uploads/default/original/2X/7/7ad2f3bd746cd2391e8c7c498769cd0b2f7a3496.jpeg\" data-download-href=\"https://ethereum-magicians.org/uploads/default/7ad2f3bd746cd2391e8c7c498769cd0b2f7a3496\" title=\"ProxyWallet-eng\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/7/7ad2f3bd746cd2391e8c7c498769cd0b2f7a3496_2_536x499.jpeg\" alt=\"ProxyWallet-eng\" data-base62-sha1=\"hwydhp5Cm6IodGrzDEYfQXUuUkK\" width=\"536\" height=\"499\" srcset=\"https://ethereum-magicians.org/uploads/default/optimized/2X/7/7ad2f3bd746cd2391e8c7c498769cd0b2f7a3496_2_536x499.jpeg, https://ethereum-magicians.org/uploads/default/optimized/2X/7/7ad2f3bd746cd2391e8c7c498769cd0b2f7a3496_2_804x748.jpeg 1.5x, https://ethereum-magicians.org/uploads/default/optimized/2X/7/7ad2f3bd746cd2391e8c7c498769cd0b2f7a3496_2_1072x998.jpeg 2x\" data-dominant-color=\"F4F4F0\"></a></div><p></p>\n<p>Above is new scheme of smart contract with ability to prevent the attack to Proxy contract.</p>\n<p>Main Point is…</p>\n<ul>\n<li>Proxy contract’s implementation addresses can only be upgraded through the authentication by post-quantum signature scheme(like Lamport Signature).</li>\n</ul>\n<p>So, malicious attacker can not upgrade Proxy contracts’ implementation addresses with Alice(Owner)'s secret key.</p>\n<p>I also have written minimum implementation with tests of this idea although authentication part is not implemented(because any Post-quantum signature scheme can be embedded there like <a href=\"https://github.com/Pauli-Group/walletV2/blob/0eeb317870e543eb8b6fbb1af9a7268f9ac5a66c/contracts/AccountAbstraction/Lamport/VerifyLamport.sol#L4-L26\" rel=\"noopener nofollow ugc\">Pauli Group’s Lamport Signature Authentication</a>)</p>\n<ul>\n<li>This repository includes minimum implementation of quantum-resistant proxy contract. (I called it ProxyWallet)</li>\n</ul>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/starcharles/quantum-resistant-proxy-contract/blob/main/test/ProxyWallet.spec.ts\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/starcharles/quantum-resistant-proxy-contract/blob/main/test/ProxyWallet.spec.ts\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/starcharles/quantum-resistant-proxy-contract/blob/main/test/ProxyWallet.spec.ts\" target=\"_blank\" rel=\"noopener nofollow ugc\">starcharles/quantum-resistant-proxy-contract/blob/main/test/ProxyWallet.spec.ts</a></h4>\n\n\n      <pre><code class=\"lang-ts\">import {\n  time,\n  loadFixture,\n} from \"@nomicfoundation/hardhat-toolbox-viem/network-helpers\";\nimport { expect } from \"chai\";\nimport hre from \"hardhat\";\nimport \"@nomicfoundation/hardhat-ethers\";\nimport {\n  getAddress,\n  keccak256,\n  Abi,\n  parseGwei,\n  getContract,\n  TransactionExecutionError,\n} from \"viem\";\nimport { AbiCoder } from \"ethers\";\n\ndescribe(\"ProxyWallet contract\", function () {\n  async function deployFixture() {\n    const [owner, addr1, addr2] = await hre.viem.getWalletClients();\n</code></pre>\n\n\n\n  This file has been truncated. <a href=\"https://github.com/starcharles/quantum-resistant-proxy-contract/blob/main/test/ProxyWallet.spec.ts\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>This includes</p>\n<ul>\n<li>Contract code to realize my concept.</li>\n<li>Tests to confirm desirable behavior of the contract.</li>\n</ul>\n<p>Please feel free to give me any comments and further implovement idea.<br>\nAnd If this idea make sense or valuable for Ethereum Community, I want to propose this as new ERC.</p>\n<p>Thanks for reading.</p>\n<p>Naoto Sato (Blocq, Inc)</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/post-quantum-proxy-contract-pattern/20412\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/post-quantum-proxy-contract-pattern/20412","pubDate":"Sat, 29 Jun 2024 01:44:56 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20412"},"source":{"@url":"https://ethereum-magicians.org/t/post-quantum-proxy-contract-pattern/20412.rss","#text":"Post-Quantum Proxy Contract Pattern"}},{"title":"Beacon Validators Contract for online governance","dc:creator":"g11in","category":"Core EIPs","description":"<p>Lately there has been a greater emphasis on implementing the EIPs as system contracts whenever possible (7702,4788,2935 etc). However most of these contracts have hardcoded params (for e.g. ring buffer size, target queue length for price computations etc) and are not upgradable.</p>\n<p>Upgrading those params generally require a hardfork overloading the development process and also to some extend bring down the benefit of implementing them as contracts rather than native code (tradeoff of efficiency has already been made for using this path of implementing the EIPs)</p>\n<p>One way to leverage their implementation being contract is to add a mechanism in them to upgrade the params via an online governance proposal. With such a mechanism for eg max blob gas limit could be raised in a phased and coordinated manner for a feature like peerDAS.</p>\n<p>For this purpose a special Beacon Validators Contract can be deployed which triggers the upgrade functions. Note that BeaconBlockRoot contract allow ones to verify if a validator is actually part of an active validator set, as well as its balance via proof against a recent beacon block root. Obviously the system contracts would need to be code/redeployed/adopted to treat a call coming from BVC as privileged. This mechanism also allows system contracts to “opt in” to such an upgrade process.</p>\n<p>The BVC contract will keep track of proposals which will effectively be the up-gradation call to the system contracts. Anyone could add proposals and the validators can vote on it with their effective balance weight using their withdrawal keys and with proof to the beacon header of holding the withdrawal key of an active validator. Once a threshold is reached the BVC can be triggered to call the system upgrade function with the proposed input and the voted threshold (which can also be verified by the system contracts allowing them to have their own customized threshold  for e.g. some contracts can demand very high thresholds)</p>\n<p>Additional mechanics of verifying the active validator weight while triggering the final upgrade can be added in to prevent churning validators to hack a vote as the proof of the validator statuses  can be provided against a recent beacon block root.</p>\n<p>Overall this will also the validator community to be part of ethereum governance especially for the topics around the params that determine the resource consumption. Also the development community has the choice to opt in or not to such an upgrade process and to have its own thresholds of accepting an upgrade.</p>\n<p>Overall this could de-load the developers as well as to get the voice of validator community included for the topics that concern them.</p>\n            <p><small>12 posts - 5 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/beacon-validators-contract-for-online-governance/20404\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/beacon-validators-contract-for-online-governance/20404","pubDate":"Thu, 27 Jun 2024 16:14:31 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20404"},"source":{"@url":"https://ethereum-magicians.org/t/beacon-validators-contract-for-online-governance/20404.rss","#text":"Beacon Validators Contract for online governance"}},{"title":"EIP-7730: Proposal for a clear signing standard format for wallets","dc:creator":"lcastillo-ledger","category":"EIPs","description":"<p>Hi All,</p>\n<p>As Ledger, we want to improve the way user interacts with their wallets by displaying more clearly to them what message / transaction they are going to sign (what we call clear signing).</p>\n<p>Basing the UI on the ABI does not lead to the best experience, the types are too broad and not easily interpreted as is. This proposal complements the definitions in the ABI with metadata targeted at specifying how to format the display of a transaction / messages for review.</p>\n<p>Our goal is to make it easy for contract developers to define &amp; control the interaction of their end users when calling their contract. Making it an EIP will enable all wallets to benefit from this information.</p>\n<p>The ERC pull request is here: <a href=\"https://github.com/ethereum/ERCs/pull/509\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add ERC: Structured Data Clear Signing Format by lcastillo-ledger · Pull Request #509 · ethereum/ERCs · GitHub</a></p>\n<p>And for more info, we’ve created an intro video: <a href=\"https://www.youtube.com/watch?v=-O7aX6vUvs8\" rel=\"noopener nofollow ugc\">https://www.youtube.com/watch?v=-O7aX6vUvs8</a></p>\n<p>Thanks!</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7730-proposal-for-a-clear-signing-standard-format-for-wallets/20403\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7730-proposal-for-a-clear-signing-standard-format-for-wallets/20403","pubDate":"Thu, 27 Jun 2024 13:41:34 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20403"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7730-proposal-for-a-clear-signing-standard-format-for-wallets/20403.rss","#text":"EIP-7730: Proposal for a clear signing standard format for wallets"}},{"title":"PeerDAS breakout #2, June 25 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1070\" class=\"inline-onebox\">PeerDAS Breakout Room #2 · Issue #1070 · ethereum/pm · GitHub</a></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/hwwang\">@hwwang</a></p>\n<h3><a name=\"notes-chat-log-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#notes-chat-log-2\"></a>Notes &amp; chat log</h3>\n<p><a href=\"https://docs.google.com/document/d/1Ng2IrCe28kTt1BnIsjtMlKHq2MHgaja24LhFXSvqfJQ\" class=\"inline-onebox\">PeerDAS Breakout Room notes - Google Docs</a></p>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<p><a href=\"https://www.youtube.com/watch?v=5U79hZOH4Uw&amp;t=248s\">PeerDAS Breakout Room #2</a></p>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/peerdas-breakout-2-june-25-2024/20399\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/peerdas-breakout-2-june-25-2024/20399","pubDate":"Thu, 27 Jun 2024 03:48:05 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20399"},"source":{"@url":"https://ethereum-magicians.org/t/peerdas-breakout-2-june-25-2024/20399.rss","#text":"PeerDAS breakout #2, June 25 2024"}},{"title":"Future of EOA/AA breakout #5, June 26 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1081\" class=\"inline-onebox\">Future of EOA/AA Breakout Room #5 · Issue #1081 · ethereum/pm · GitHub</a></p>\n<h3><a name=\"notes-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#notes-2\"></a>Notes</h3>\n<p><a class=\"mention\" href=\"https://ethereum-magicians.org/u/poojaranjan\">@poojaranjan</a>: <a href=\"https://hackmd.io/@poojaranjan/EOA-AA-Breakout#-Future-of-EOAAA-Breakout-Room-5\" class=\"inline-onebox\">EOA/AA Breakout Room - HackMD</a></p>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<p><a href=\"https://www.youtube.com/watch?v=_S01TtA3lao\">https://www.youtube.com/watch?v=_S01TtA3lao</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/future-of-eoa-aa-breakout-5-june-26-2024/20398\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/future-of-eoa-aa-breakout-5-june-26-2024/20398","pubDate":"Thu, 27 Jun 2024 03:44:15 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20398"},"source":{"@url":"https://ethereum-magicians.org/t/future-of-eoa-aa-breakout-5-june-26-2024/20398.rss","#text":"Future of EOA/AA breakout #5, June 26 2024"}},{"title":"All Core Devs - Consensus (ACDC) call #136, June 27 2024","dc:creator":"abcoathup","category":"Working Groups","description":"<h3><a name=\"agenda-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#agenda-1\"></a>Agenda</h3>\n<p><a href=\"https://github.com/ethereum/pm/issues/1084\" class=\"inline-onebox\">Consensus-layer Call 136 · Issue #1084 · ethereum/pm · GitHub</a></p>\n<p>Moderator: <a class=\"mention\" href=\"https://ethereum-magicians.org/u/ralexstokes\">@ralexstokes</a></p>\n<h3><a name=\"summary-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#summary-2\"></a>Summary</h3>\n<p>By <a class=\"mention\" href=\"https://ethereum-magicians.org/u/ralexstokes\">@ralexstokes</a> <em>(from Eth R&amp;D <a href=\"https://discord.com/channels/595666850260713488/745077610685661265/1256053147085049898\" class=\"inline-onebox\">Discord</a>)</em></p>\n<ul>\n<li>Started with a presentation of some <a href=\"https://ethresear.ch/t/research-report-allowing-validators-to-share-client-information-privately-a-project-by-nethermind-research/19506\">research into private sharing of node information for client diversity purposes</a></li>\n<li>Then, a discussion of some work from Peter to support stateless validation across multiple execution clients (even before Verkle!). There was a lot of nuance here around the implications and various appetites for support so check the call for the full color. If you’d like to follow up take a look at <a href=\"https://gist.github.com/karalabe/47c906f0ab4fdc5b8b791b74f084e5f9\">this proposal</a></li>\n<li>Pectra was next: implementation for devnet-1 is proceeding well with some CL clients ready to go. EL clients are not far behind which puts us at a devnet-1 launch in the coming weeks.</li>\n<li>Mikhail does have a PR to iterate on Pectra EIP-6110 following discussions for devnet-0, <a href=\"https://github.com/ethereum/consensus-specs/pull/3818\">please take a look here</a></li>\n<li>Next, PeerDAS: the PeerDAS devnet-1 testnet has launched and is proceeding well. There are some minor bugs but clients are fixing to line up the next iteration of PeerDAS</li>\n<li>We also covered a new proposal by Dankrad to migrate the blob base fee calculation into the CL; this complements the proposal to migrate the implementation of the max blob count from where it is today (both CL and EL) to just to the CL. See <a href=\"https://github.com/ethereum/pm/issues/1084#issuecomment-2192009972\">this comment</a> for links to both proposals</li>\n<li>And last, we had an update around progress on SSZ in clients supporting the inclusion of EIP-7688 in Pectra which allows for the construction of forward-compatible consensus data structures (with respect to serialization)</li>\n<li>Some clients have implemented the necessary features and some have not completed it yet; so we decided to defer the inclusion question to a later call to give client teams time to digest the changes and assess the complexity of implementation weighed against the benefit this feature provides.</li>\n</ul>\n<h3><a name=\"recording-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#recording-3\"></a>Recording</h3>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://www.youtube.com/live/T-w5dzte36c?t=95s\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/9/97f4303a3a215f4b8cc5bb48a5b1ca65b4b760d9.png\" class=\"site-icon\" data-dominant-color=\"FF1010\" width=\"16\" height=\"16\">\n\n      <a href=\"https://www.youtube.com/live/T-w5dzte36c?t=95s\" target=\"_blank\" rel=\"noopener\">YouTube</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:480/360;\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/d/d96fc998480769431bc8968edfc27724d820cebb.jpeg\" class=\"thumbnail\" data-dominant-color=\"A2A5BA\" width=\"480\" height=\"360\"></div>\n\n<h3><a href=\"https://www.youtube.com/live/T-w5dzte36c?t=95s\" target=\"_blank\" rel=\"noopener\">Consensus Layer Meeting 136 [2024-6-27]</a></h3>\n\n  <p>https://github.com/ethereum/pm/issues/1084</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h3><a name=\"transcript-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#transcript-4\"></a>Transcript</h3>\n<p>[To be added]</p>\n<h3><a name=\"additional-info-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#additional-info-5\"></a>Additional info</h3>\n<p>Notes by <a class=\"mention\" href=\"https://ethereum-magicians.org/u/christine_dkim\">@Christine_dkim</a>: <a href=\"https://www.galaxy.com/insights/research/ethereum-all-core-developers-consensus-call-136/\" class=\"inline-onebox\">Ethereum All Core Developers Consensus Call #136 Writeup | Galaxy</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/all-core-devs-consensus-acdc-call-136-june-27-2024/20397\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/all-core-devs-consensus-acdc-call-136-june-27-2024/20397","pubDate":"Thu, 27 Jun 2024 03:40:06 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20397"},"source":{"@url":"https://ethereum-magicians.org/t/all-core-devs-consensus-acdc-call-136-june-27-2024/20397.rss","#text":"All Core Devs - Consensus (ACDC) call #136, June 27 2024"}},{"title":"ERC-7734: Decentralized Identity Verification (DID)","dc:creator":"64anushka","category":"ERCs","description":"<p><strong>Introduction</strong>: Hi everyone, I would like to discuss EIP, which proposes a standard for decentralized identity verification on the Ethereum blockchain.</p>\n<p><strong>Motivation</strong>: Centralized identity verification methods are often cumbersome, prone to data breaches, and do not give users control over their identity data. This proposal aims to provide a secure, privacy-preserving method for identity verification that can be used by decentralized applications (dApps).</p>\n<p><strong>Abstract</strong>: This proposal introduces a standard for decentralized identity verification (DID) on the Ethereum blockchain. The standard aims to provide a secure, privacy-preserving method for identity verification that can be used by decentralized applications (dApps).</p>\n<p><strong>Specification</strong>:<br>\n// SPDX-License-Identifier: MIT<br>\npragma solidity ^0.8.0;</p>\n<p>interface IDecentralizedIdentity {<br>\nstruct Identity {<br>\naddress userAddress;<br>\nbytes32 identityHash;<br>\nbytes32[2] verificationHashes;<br>\nbool isVerified;<br>\nuint256 timestamp;<br>\n}</p>\n<pre><code>event IdentityCreated(address indexed userAddress, bytes32 identityHash, uint256 timestamp);\nevent IdentityVerified(address indexed userAddress, bytes32[2] verificationHashes, uint256 timestamp);\nevent IdentityRevoked(address indexed userAddress, uint256 timestamp);\n\nfunction createIdentity(bytes32 identityHash) external;\nfunction verifyIdentity(bytes32[2] calldata verificationHashes) external;\nfunction revokeIdentity() external;\nfunction getIdentity(address userAddress) external view returns (Identity memory);\n</code></pre>\n<p>}</p>\n<p><strong>Rationale</strong>: The design leverages cryptographic hashes to represent identity information, ensuring that sensitive data is not stored directly on the blockchain. The use of verification hashes allows for flexible identity verification mechanisms, and the inclusion of events ensures transparency and traceability.</p>\n<p><strong>Security Considerations</strong>: Ensure that identity and verification hashes are generated using a secure hashing algorithm to prevent collisions and ensure the integrity of the identity data. Users have control over their identity data, which reduces the risk of unauthorized access and ensures privacy.</p>\n<p><strong>Feedback Request</strong>: I would love to hear your thoughts on the proposed standard, especially regarding the hashing methods used for identity verification and any potential improvements to the current design.</p>\n<p><strong>Conclusion</strong>: Thank you for taking the time to review this proposal. I look forward to your feedback and suggestions.</p>\n            <p><small>3 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7734-decentralized-identity-verification-did/20392\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7734-decentralized-identity-verification-did/20392","pubDate":"Wed, 26 Jun 2024 18:41:03 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20392"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7734-decentralized-identity-verification-did/20392.rss","#text":"ERC-7734: Decentralized Identity Verification (DID)"}},{"title":"Open Graph for Onchain Actions","dc:creator":"kkonrad","category":"Primordial Soup","description":"<h1><a name=\"open-graph-for-onchain-actions-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#open-graph-for-onchain-actions-1\"></a>Open Graph for Onchain Actions</h1>\n<p>Let’s work on a standard that enables EVM transactions to be previewed, signed and sent as URLs.  The idea is to be able to suggest transaction through links, QR codes, buttons, widgets and websites. This allows users to perform blockchain transactions without the need to go to another app or webpage. This would expose onchain action to the entire surface of the web. The basic idea is to do what OG did for social previews but for onchain actions.</p>\n<blockquote>\n<p>“The <a href=\"https://ogp.me/\" rel=\"noopener nofollow ugc\">Open Graph protocol</a> enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.”</p>\n</blockquote>\n<p>Any onchain action can be shared as a rich link (URL). An additional benefit is that some context aware apps such as in-wallet browsers can display additional features. For example, on a website, a swap button could trigger a transaction preview without going to a swap app.</p>\n<p>The fallback is a simple frontend for a given action and that action only. Therefore, a user without a context aware app will be directed to that frontend to make their transaction the traditional way.</p>\n<p>Solana has recently launched pretty much this. See the full specification <a href=\"https://solana.com/docs/advanced/actions\" rel=\"noopener nofollow ugc\">here</a></p>\n<p>Prior art also includes <a href=\"https://docs.farcaster.xyz/reference/frames/spec\" rel=\"noopener nofollow ugc\">Farcaster frames</a>, which unfortunately only work with Warpcast. There is a need to agree on a standard so that we can avoid yet more fragmentation.</p>\n<p>Next Steps:</p>\n<ol>\n<li>hear your initial thoughts</li>\n<li>start working with partners: wallets, wallet connection kits, apps.</li>\n</ol>\n<p>FAQ</p>\n<ul>\n<li>What about safety and drainer links? Clients (e.g. wallets) should simulate transactions and give appropriate warnings if they cannot. Additionally, a maintained registry of non-malicious actions should exist.</li>\n<li>Why are we doing this? hugo0 and kkonrad have been working on a standard for a single use case URL-encoded transaction format, Peanut Protocol (sending tokens via links / QR codes) and this is a logical next step.</li>\n<li>What’s next? Let’s have a kick off call?</li>\n</ul>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/open-graph-for-onchain-actions/20391\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/open-graph-for-onchain-actions/20391","pubDate":"Wed, 26 Jun 2024 18:40:43 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20391"},"source":{"@url":"https://ethereum-magicians.org/t/open-graph-for-onchain-actions/20391.rss","#text":"Open Graph for Onchain Actions"}},{"title":"RIP-7728: L1SLOAD precompile","dc:creator":"icemelon","category":"RIPs","description":"<p>This proposal introduces a new precompiled contract <code>L1SLOAD</code> to L2s that can load storage slots from L1 given a contract address and storage keys. The motivation is to provide a convenient and trustless way for smart contracts deployed on an L2 chain to read storage values from L1. With the <code>L1SLOAD</code> precompile, the developers don’t need to generate and submit MPT proofs themselves.</p>\n<aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/RIPs/pull/27\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/RIPs/pull/27\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/RIPs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/RIPs/pull/27\" target=\"_blank\" rel=\"noopener nofollow ugc\">RIP 7728: L1SLOAD precompile</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>icemelon:l1sload</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-06-24\" data-time=\"08:22:47\" data-timezone=\"UTC\">08:22AM - 24 Jun 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/icemelon\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"icemelon\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/d/df16d063d1181adc51cf1c8713dc87448fc6e447.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"B8AFAB\">\n            icemelon\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"2 commits changed 1 files with 121 additions and 0 deletions\">\n          <a href=\"https://github.com/ethereum/RIPs/pull/27/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+121</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">This proposal introduces a new precompiled contract `L1SLOAD` to L2s that can lo<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/RIPs/pull/27\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">ad storage slots from L1 given a contract address and storage keys.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/rip-7728-l1sload-precompile/20388\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/rip-7728-l1sload-precompile/20388","pubDate":"Wed, 26 Jun 2024 08:24:34 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20388"},"source":{"@url":"https://ethereum-magicians.org/t/rip-7728-l1sload-precompile/20388.rss","#text":"RIP-7728: L1SLOAD precompile"}},{"title":"ERC-7726: Common quote oracle","dc:creator":"albertocuestacanada","category":"ERCs","description":"<p>For a while now we have been toiling on what is now a minimal standard for oracle value feeds.</p>\n<p><a href=\"https://github.com/ethereum/ERCs/pull/500\" rel=\"noopener nofollow ugc\">Draft EIP</a></p>\n<p>Some oracle implementations from the community: <a href=\"https://github.com/alcueca/awesome-oracles\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - alcueca/awesome-oracles: Common Oracle Specification and Adaptors</a><br>\nSome oracle implementations from Euler: <a href=\"https://github.com/euler-xyz/euler-price-oracle\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - euler-xyz/euler-price-oracle: Euler Price Oracles, a library of immutable oracle adapters and components</a></p>\n<p>This all probably started when I wrote this article about using value conversions instead of prices in smart contracts:</p><aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://hackernoon.com/getting-prices-right\">\n  <header class=\"source\">\n\n      <a href=\"https://hackernoon.com/getting-prices-right\" target=\"_blank\" rel=\"noopener nofollow ugc\">hackernoon.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/460;\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/7/7928528ab80b6453961af1e4e75b048d5d932cb9_2_690x460.jpeg\" class=\"thumbnail\" data-dominant-color=\"\" width=\"690\" height=\"460\"></div>\n\n<h3><a href=\"https://hackernoon.com/getting-prices-right\" target=\"_blank\" rel=\"noopener nofollow ugc\">Getting Prices Right | HackerNoon</a></h3>\n\n  <p>How to implement better price feeds in smart contracts</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>In very short, this is a minimal standard with a single function, from the spec:</p>\n<h4><a name=\"getquote-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#getquote-1\"></a>getQuote</h4>\n<p>Returns the value of <code>baseAmount</code> of <code>base</code> in <code>quote</code> terms.</p>\n<p>MUST round down towards 0.</p>\n<p>MUST revert with <code>OracleUnsupportedPair</code> if not capable to provide data for the specified <code>base</code> and <code>quote</code> pair.</p>\n<p>MUST revert with <code>OracleUntrustedData</code> if not capable to provide data within a degree of confidence publicly specified.</p>\n<pre data-code-wrap=\"yaml\"><code class=\"lang-yaml\">- name: getQuote\n  type: function\n  stateMutability: view\n\n  inputs:\n    - name: baseAmount\n      type: uint256\n    - name: base\n      type: address\n    - name: quote\n      type: address\n\n  outputs:\n    - name: quoteAmount\n      type: uint256\n</code></pre>\n<p>There is a bit more info on the spec, including the lack of a priceOf function.</p>\n<p>Although due to process the discussion should take place here, where it is public and searchable, we also have a telegram group that you are welcome to join: <a href=\"https://t.me/+kehxUdF8vPdhNzZh\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Telegram: Join Group Chat</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7726-common-quote-oracle/20351\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7726-common-quote-oracle/20351","pubDate":"Thu, 20 Jun 2024 10:45:06 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-20351"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7726-common-quote-oracle/20351.rss","#text":"ERC-7726: Common quote oracle"}}]}}}