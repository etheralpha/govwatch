{"rss":{"@version":"2.0","@xmlns:discourse":"http://www.discourse.org/","@xmlns:atom":"http://www.w3.org/2005/Atom","@xmlns:dc":"http://purl.org/dc/elements/1.1/","channel":{"title":"Fellowship of Ethereum Magicians - Latest topics","link":"https://ethereum-magicians.org/latest","description":"Latest topics","lastBuildDate":"Sun, 21 Apr 2024 21:33:50 +0000","atom:link":{"@href":"https://ethereum-magicians.org/latest.rss","@rel":"self","@type":"application/rss+xml"},"item":[{"title":"Expanding EIP 4399 PREVRANDAO with RANDAO(n)","dc:creator":"alexbabits","category":"EIPs","description":"<p><strong>Do people want a RANDAO(n) Function?</strong></p>\n<p>I am looking to revive the discussion around the potential for a RANDAO(n) function, where n is the <code>block.number</code> or <code>slot</code>. This opcode would return the <code>randao</code> value for a specified block/slot. (It could also be something like PREVRANDAO(n) to keep consistency).</p>\n<p>I read through the EIP, articles, and this discussion here: <a href=\"https://ethereum-magicians.org/t/eip-4399-supplant-difficulty-opcode-with-random/7368\" class=\"inline-onebox\">EIP-4399: Supplant DIFFICULTY opcode with RANDOM</a>. This lead me to think that many people wanted this extended functionality of <code>prevrandao</code> to be able to input a specific block.</p>\n<p><strong>Is this feasible?</strong><br>\nIf so, I think it could serve a purpose for smaller protocols to finally have secure on-chain randomness without any oracle integration. Larger protocols may continue to want off chain oracles, because there does appear to be relatively cheap attacks (block reward opportunity cost) to refuse to publish a block, or get 2^n bits/attempts per proposer that a malicious actor owns.</p>\n<p><strong>Why is it needed</strong><br>\nI’ve written an opinion piece <a href=\"https://medium.com/@alexbabits/why-block-prevrandao-is-a-useless-dangerous-trap-and-how-to-fix-it-5367ed3c6dfc\" rel=\"noopener nofollow ugc\">here</a> discussing the current failure of the <code>prevrandao</code> use case, and a potential fix with <code>RANDAO(n)</code>.</p>\n<p>In short, <code>block.prevrandao</code> has minimal use cases because the value it uses must be from a block that already exists. There is no way to “delay” the request for randomness to a later unknown time in the future when the randomness production should be revealed. The return value it uses must be from a block that already exists, and it’s <code>randao</code> value is determined by the immediate previous block that the transaction was finalized in. Using <code>block.prevrandao</code> can be taken advantage of in a simple manner. A malicious function can call the target protocol’s <code>getRandomness</code> type of function, which uses <code>block.prevrandao</code> as the powerhouse to generate it’s random number for users. This malicious function can revert if the generated random number is unfavorable, and only choose to execute when the number generated is favorable (see medium post).</p>\n<p>In contrast, if we had <code>RANDAO(n)</code>, this appears to be a step forward in achieving more secure on chain randomness. I’ve built a coin flip game to demonstrate the use case for <code>RANDAO(n)</code>.</p>\n<pre data-code-wrap=\"js\"><code class=\"lang-js\">// This doesn't compile because randao(n) doesn't exist.\n// DO NOT USE IN PRODUCTION\n\nmapping(address =&gt; uint256) public usersBlockNumber;\n\nerror FailedEthTransfer();\nerror IncorrectPayment();\nerror AlreadyHasBlockNumber();\nerror NotMatured();\n\nfunction setUsersBlockNumber() public payable {\n    // User must not have a block number.\n    if (usersBlockNumber[msg.sender] != 0) revert AlreadyHasBlockNumber();\n\n    // User must pay in advance (0.01 ETH to play).\n    if (msg.value != 1e16) revert IncorrectPayment();\n\n    // Let the users block number be 4 epochs after this call.\n    usersBlockNumber[msg.sender] = block.number + 128;\n}\n\nfunction generateAndUseRandomness() public payable {\n    // Get user's block number.\n    uint256 usersBlock = usersBlockNumber[msg.sender];\n\n    // Must have a matured and valid block number associated with user.\n    if (usersBlock &lt; block.number) revert NotMatured();\n \n    // Generate random number from the block\n    randomNumber = (block.randao(usersBlock) % 100) + 1;\n\n    // Give user 0.02 ETH if won coinflip \n    // [51, 100] inclusive = 50 numbers = 50%.\n    if (randomNumber &gt; 50) {  \n        (bool success,) = msg.sender.call{value: 2e16}(\"\");\n        if (!success) revert FailedEthTransfer();\n    }\n    \n    // Always set users block back to 0 after using randomness.\n    delete usersBlockNumber[msg.sender];\n}\n</code></pre>\n<p>Notice now the user has no way of manipulating the outcome after they have requested that a block be associated with them. The user cannot create a function that reverts when the randomness is unfavorable, because the randomness is not known at time of request, and can never be, because the request always references a block far into the future. At time of execution, the users block associated with them is always X distance away.</p>\n<p>We have the same security techniques as requesting a random number from Chainlink VRF, disallowing users to re-request randomness, and freezing any function calls for the user while they have a number associated with them but not yet used. Also, the depth of the request should be at least the maximum re-org depth I would guess. I’m unsure if a full 4 epochs of waiting time would be necessary for “lotteries” with less than the block reward value.</p>\n<p>If <code>RANDAO</code> were to use the slot instead of block, and the slot was empty, as mentioned in the original EIP-4399 discussion, it would have to look back further in the past to find a non-empty slot, or have some other technique. For this reason using the block number may be superior, even if the timing is not perfectly consistent, always having a valid number feels better?</p>\n<p>I am interested by what others have to say about the feasibility and impact or lack thereof for this new opcode that would act as an extension of <code>PREVRANDAO</code>.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/expanding-eip-4399-prevrandao-with-randao-n/19741\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/expanding-eip-4399-prevrandao-with-randao-n/19741","pubDate":"Sun, 21 Apr 2024 21:33:50 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19741"},"source":{"@url":"https://ethereum-magicians.org/t/expanding-eip-4399-prevrandao-with-randao-n/19741.rss","#text":"Expanding EIP 4399 PREVRANDAO with RANDAO(n)"}},{"title":"ERC-7695: Delegation, Context for Non-Fungible Token","dc:creator":"ducthotran2010","category":"ERCs","description":"<p>Hi Magicians,</p>\n<p>I would like to propose an extension for ERC-721 tokens to facilitate a broader range of financial applications. While ERC-721 is the most implemented standard for NFTs, its current limitations restrict its utility in various financial use cases, particularly those involving renting, delegating actions, and collateral systems. This proposal is to enhance NFT ownership without transferring to any contracts to perform renting or delegating actions. Furthermore, these extensions aim to support the integration of ERC-721 tokens into collateral systems in different and complex contexts.</p>\n<p>Please read more at <a href=\"https://github.com/ducthotran2010/ERCs/blob/erc/ERCS/erc-7695.md\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ERCs/ERCS/erc-7695.md at erc · ducthotran2010/ERCs · GitHub</a></p>\n<aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/ERCs/pull/391\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/ERCs/pull/391\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/ERCs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/ERCs/pull/391\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add ERC: Ownership Delegation and Context for Non-Fungible Token</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>ducthotran2010:erc</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-19\" data-time=\"07:27:28\" data-timezone=\"UTC\">07:27AM - 19 Apr 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/ducthotran2010\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"ducthotran2010\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/a/a9ecad9e4b034402bdd6ca932eb26fa99044764c.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"6A5F49\">\n            ducthotran2010\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"6 commits changed 4 files with 490 additions and 0 deletions\">\n          <a href=\"https://github.com/ethereum/ERCs/pull/391/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+490</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">This proposal introduces an extension for ERC721 Non-Fungible Tokens (NFTs): spe<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/ERCs/pull/391\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">cifying users for several contexts and differentiating owner and ownership rights for a token to use in several financial use cases for NFT.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7695-delegation-context-for-non-fungible-token/19716\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7695-delegation-context-for-non-fungible-token/19716","pubDate":"Fri, 19 Apr 2024 08:28:17 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19716"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7695-delegation-context-for-non-fungible-token/19716.rss","#text":"ERC-7695: Delegation, Context for Non-Fungible Token"}},{"title":"Events Should Be Free","dc:creator":"yulesa","category":"Primordial Soup","description":"<h1><a name=\"events-should-be-free-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#events-should-be-free-1\"></a>Events Should Be Free</h1>\n<h2><a name=\"introduction-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#introduction-2\"></a>Introduction</h2>\n<p>Permissionless access to data is one crucial aspect of social consensus. The motto of blockchains, “Verify, don’t trust!” tells you exactly that. DeFi apps today are not based on faith; they prevail because anyone can validate them. At any point in time, you can evaluate their trust assumptions, see how much liquidity, collateral, and debt they have, and make them accountable.</p>\n<p><em>“Ethereum is the world’s settlement layer not because it has the largest economic security, but because it’s the largest verifiable blockchain”</em><br>\n<a href=\"https://twitter.com/gluk64/status/1770910189572501954\" rel=\"noopener nofollow ugc\">https://twitter.com/gluk64/status/1770910189572501954</a>.</p>\n<p>Events, or Logs, are the primary data source of Ethereum (and other EVM chains). Most analytics websites, Dune dashboards, and crypto reports are created using events as the most basic data primitive. Events are then transformed, combined, and grouped to create a metric in a chart or a table. Events are the building block of crypto data but are at risk of being undermined. To explain why this is happening, we need a good understanding of events’ inner workings.</p>\n<h2><a name=\"how-do-events-work-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#how-do-events-work-3\"></a>How do events work?</h2>\n<p>Skip this part if you have a good understanding of how events work.</p>\n<p>Events or Logs in EVMs are similar to code logs in any language. It’s one line in the code that, when the execution stumbles at it, will write the desired execution information in a ledger. A log record is used to surface information about a smart contract execution, like a token transfer or a change of ownership, so that it can be easily retrieved.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethereum-magicians.org/uploads/default/original/2X/e/ede0a57073bf202d5c5284861c2a5c6eb256e30c.jpeg\" data-download-href=\"https://ethereum-magicians.org/uploads/default/ede0a57073bf202d5c5284861c2a5c6eb256e30c\" title=\"emit\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/e/ede0a57073bf202d5c5284861c2a5c6eb256e30c_2_690x295.jpeg\" alt=\"emit\" data-base62-sha1=\"xWmsHeM6Zh2HGahqq9cxOrkfBcE\" width=\"690\" height=\"295\" srcset=\"https://ethereum-magicians.org/uploads/default/optimized/2X/e/ede0a57073bf202d5c5284861c2a5c6eb256e30c_2_690x295.jpeg, https://ethereum-magicians.org/uploads/default/optimized/2X/e/ede0a57073bf202d5c5284861c2a5c6eb256e30c_2_1035x442.jpeg 1.5x, https://ethereum-magicians.org/uploads/default/optimized/2X/e/ede0a57073bf202d5c5284861c2a5c6eb256e30c_2_1380x590.jpeg 2x\" data-dominant-color=\"F0F1F0\"></a></div><p></p>\n<p><em>Example of the UniswapV3Factory contract code, which will emit the PoolCreated Event every time a pool is created. You can calculate how many pools Uniswap has by counting how many PoolCreated Events were emitted. Source: <a href=\"https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code\" rel=\"noopener nofollow ugc\">https://etherscan.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#code</a></em></p>\n<p>In Ethereum, event outputs are written in the transaction receipts, together with some other information about the transaction outcome. Every node in the blockchain stores transaction receipts in the blocks. The back-end of analytics websites and data providers can then request the transaction receipts from any node and use this information to create the desired metrics.</p>\n<p>The solidity code is not what is stored in the blockchain. The function emit is compiled to a LOG opcode, and the node implementation dictates the contract execution flow when the LOG opcode is called. A block also includes some extra metadata to improve efficiency while querying receipts.</p>\n<p>In conclusion, retrieving data from events is much simpler than sourcing it from the state trie (Ethereum memory) while also allowing the retrieval of historical data, a much more complex task when using other sources since the state trie is constantly updated; you usually only have access to its latest state.</p>\n<p>This blog post from MyCrypto provides an excellent, in-depth explanation of events:</p><aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/3/360db83263e79cba7951e7ba15aa4495131aa0f1.png\" class=\"site-icon\" data-dominant-color=\"585858\" width=\"32\" height=\"32\">\n\n      <a href=\"https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378\" target=\"_blank\" rel=\"noopener nofollow ugc\" title=\"10:10PM - 04 March 2020\">Medium – 4 Mar 20</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/307;\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/d/dd64e2151c9cb47e182b7f9d23757872f0b1d698_2_690x307.png\" class=\"thumbnail\" data-dominant-color=\"F4EFDD\" width=\"690\" height=\"307\"></div>\n\n<h3><a href=\"https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378\" target=\"_blank\" rel=\"noopener nofollow ugc\">Understanding event logs on the Ethereum blockchain</a></h3>\n\n  <p>Every transaction has an event log, but those event logs can be hard to read.</p>\n\n  <p>\n    <span class=\"label1\">Reading time: 6 min read</span>\n  </p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h2><a name=\"the-issue-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#the-issue-4\"></a>The issue</h2>\n<p>Events come at a cost. Each event incurs a minimum of 375 gas, with an additional 375 for each topic (32 bytes of indexed data) and eight gas for each byte in data (unindexed data). For instance, a Transfer event adds 1756 gas to the operation, while the entire transfer operation costs between 40,000 and 60,000 gas. The event emission cost is paid by the user when making a transaction.</p>\n<p>Because Ethereum is now expensive, this cost factor has led to discussions about making L1 transactions more affordable. Even though events represent a small fraction of a transaction cost, developers are already considering their removal, so their users don’t bear this cost. This creates a massive issue for data providers, leading them to centralized alternatives.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethereum-magicians.org/uploads/default/original/2X/2/2c936f2231d1d3a551263c8ed2069c8d553848a0.jpeg\" data-download-href=\"https://ethereum-magicians.org/uploads/default/2c936f2231d1d3a551263c8ed2069c8d553848a0\" title=\"hayden\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/2/2c936f2231d1d3a551263c8ed2069c8d553848a0_2_587x499.jpeg\" alt=\"hayden\" data-base62-sha1=\"6mkSRj3VLhLx25FknzJWkrd9GIE\" width=\"587\" height=\"499\" srcset=\"https://ethereum-magicians.org/uploads/default/optimized/2X/2/2c936f2231d1d3a551263c8ed2069c8d553848a0_2_587x499.jpeg, https://ethereum-magicians.org/uploads/default/optimized/2X/2/2c936f2231d1d3a551263c8ed2069c8d553848a0_2_880x748.jpeg 1.5x, https://ethereum-magicians.org/uploads/default/optimized/2X/2/2c936f2231d1d3a551263c8ed2069c8d553848a0_2_1174x998.jpeg 2x\" data-dominant-color=\"0A0D0E\"></a></div><p></p>\n<p><em>Heyden Adams, CEO of Uniswap, is polling about event removal in the next version of Uniswap. Even though the X poll is not a trustworthy source of truth, the fact that they consider it is troublesome. Uniswap V4 without events could tip the bucket to centralized solutions. Source: <a href=\"https://twitter.com/haydenzadams/status/1775907308372922464\" rel=\"noopener nofollow ugc\">https://twitter.com/haydenzadams/status/1775907308372922464</a></em></p>\n<p>Events solve two different problems. The first is obvious: easy access to execution data. Events store extra information in the receipts, making this data much more accessible. However, a second, often neglected, issue events solve is data curation. Knowing what to store is a challenging task. The blockchain generates an abundance of data, which can become overwhelming and hinder the ability to extract meaningful insights. Data curation is more suitable for those developing the protocol and deeply understanding its inner workings. When devs remove the events, they push this task to everyone further down in the data manipulation process. This is critical.</p>\n<p>Most alternatives to events are burdensome or rely on centralized data providers. Call traces, another outcome from transactions that are also decentralized, provide very limited access to execution data, and the actual state needs to be reconstructed from input parameters. This path is impractical, as any crypto data analyst who has ever tried it can attest, and it won’t be pursued given available centralized alternatives. Events can also be emulated by proprietary customized nodes that modify the deployed contracts and add fictitious events to the code. This approach requires centralized infrastructure to rewrite code, re-execute the blockchain, and deliver indexed events to consumers.</p>\n<h2><a name=\"potential-solutions-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#potential-solutions-5\"></a>Potential Solutions</h2>\n<p>Events should be free. Even though end-users consume dashboards and charts, they shouldn’t bear the cost directly at each transaction. Events cost gas because every node needs to handle and store them in the receipts. Nodes would get bloated with useless events if they were free or much cheaper. We need to make log manipulation and storage optional. With free events, developers don’t need to remove them from their code, still maintaining the curation by protocol engineers and permanently written in the contract. Events are kept decentralized, although optional to anyone who wants to make use of them later.</p>\n<p>How can we do it? It’s time for an open-source node implementation dedicated to data applications. The initial “data node” MVP can be a fork of current execution nodes with some extra functionalities to handle data. In its most straightforward configuration, it will be responsible for treating the current events that exist today. This solution not only addresses the issue of event costs but also provides a platform for developers to freely manage and store crypto data in a format more suitable to their needs.</p>\n<p>The rationale is that if you’re a home-staker, you probably don’t care about storing events since you won’t do much with them and can run the existing node. Conversely, if you run a node to power some UI, you could care only about the events emitted by the protocol’s contracts in the UI. Lastly, if you’re a data provider, you care about most contracts and would store all; ultimately, this is part of your business anyway.</p>\n<p>We would also need to modify the current execution nodes. One alternative is implementing new opcodes for fictional/free events (Mnemonic FLOG) and keeping the current LOG opcode. FLOG would be ignored entirely by regular nodes. Still, on a “data node”, it would act similarly to the regular LOG opcodes, adding their output to some data structure (maybe in the same receipts) and indexing the relevant fields. Solidity compilers must also introduce functions and syntax that would be compiled to the new opcode. This proposal does not affect already deployed contracts, which would still spend gas on transactions. Only new contracts using the new opcode would benefit. Furthermore, it allows the ability to code payable events when necessary (a swap can have a free event, but a set_new_fee function can pay for it, storing it at every node). Alternatively, we can repurpose the current LOG opcodes to be free and ignored by regular nodes and make new opcodes for payable events that would follow the current log implementation.</p>\n<p>Other considerations must be made. Free events could be a potential vector for spammers’ contracts and others to abuse. Data consumers will require extra functionalities, like the ability only to track events from some contracts, some type of contracts ignore lists, or even some additional indexing. The “data node” team would be responsible for making design considerations providing the new customers of this node, data providers.</p>\n<p>One last alternative is to have special comments in solidity for fictional events. It doesn’t require any node change and keeps the curation by protocol developers, but it has the drawback that comments are not compiled to opcodes and, thus, are not deployed at the blockchain. The “data node” would only be able to act on it if it has access to this contract solidity source code, also needing re-execution of the new compiled version of the contract with the free log. Also, there is no guarantee that events are the same, as there is no way to verify comments onchain.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethereum-magicians.org/uploads/default/original/2X/9/9095916513c041989ea6ff2e5574a7e391713738.jpeg\" data-download-href=\"https://ethereum-magicians.org/uploads/default/9095916513c041989ea6ff2e5574a7e391713738\" title=\"standards\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/9/9095916513c041989ea6ff2e5574a7e391713738_2_690x391.jpeg\" alt=\"standards\" data-base62-sha1=\"kD3cCCLogJQ0UJFg4bE3VRg9eSk\" width=\"690\" height=\"391\" srcset=\"https://ethereum-magicians.org/uploads/default/optimized/2X/9/9095916513c041989ea6ff2e5574a7e391713738_2_690x391.jpeg, https://ethereum-magicians.org/uploads/default/optimized/2X/9/9095916513c041989ea6ff2e5574a7e391713738_2_1035x586.jpeg 1.5x, https://ethereum-magicians.org/uploads/default/optimized/2X/9/9095916513c041989ea6ff2e5574a7e391713738_2_1380x782.jpeg 2x\" data-dominant-color=\"E1E1E1\"></a></div><p></p>\n<h2><a name=\"conclusion-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#conclusion-6\"></a>Conclusion</h2>\n<p>Simply removing events from the code is a terrible decision. It pushes UI development and analytics to proprietary products and platforms, centralizing the data-provider supply chain. Existing alternatives to events, like traces, are limited, burdensome, and onerous. However, protocol developers are also correct in trying to remove costs from their users. The only way to fight this tragedy of the commons situation is for the community to step forward and advocate for open-source, decentralized solutions. The existing data providers could also step forward and sponsor this idea, as their business relies entirely on that.</p>\n            <p><small>8 posts - 4 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/events-should-be-free/19712\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/events-should-be-free/19712","pubDate":"Fri, 19 Apr 2024 01:20:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19712"},"source":{"@url":"https://ethereum-magicians.org/t/events-should-be-free/19712.rss","#text":"Events Should Be Free"}},{"title":"Increasing contract size limit with increasing gas cost beyond 24.5Kb","dc:creator":"0xTraub","category":"Core EIPs","description":"<p>Vitalik’s <a href=\"https://eips.ethereum.org/EIPS/eip-170\" rel=\"noopener nofollow ugc\">EIP-170</a> which set the current contract size limit at 24.5 Kb was written in 2016, over 8 years ago. Since then a lot has changed about the protocol, including the roadmap decision to include the verge and the purge. I think it is time to reconsider our current contract size limitations. As contracts get bigger and Dapps more complex, this limit becomes a bottleneck for many developers. The restriction has resulted in several design suggestions as well, with the Diamond-Standard being the most popular. However, writing and interacting with Diamond-contracts is a pain point for many developers, and it is not without its own issues. I  want to get started the conversation about how we can increase the contract size-limit without compromising on things like state-growth, decentralization, and security.</p>\n<p>My current idea is fairly simple. The current contract size limit should be doubled from ~24.5Kb to ~49Kb. However, 24.5Kb should remain as target, with additional bytes incurring an increasing gas cost per byte, up to the max limit.</p>\n<p>Current code cost is defined in the EVM as <code>code_deposit_cost = 200 * deployed_code_size </code></p>\n<p>Based on the memory expansion cost, this should put the equation as something like <code>200 * contract_size + floor(size^2 / 24500)</code></p>\n<p>I think that this cost should be defined either as a step-function, or more likely as an exponential increase beyond a floor, similar to the memory-expansion cost. A hard-cap should probably be maintained to guard against the DOS-Vector Vitalik lays out in <a href=\"https://eips.ethereum.org/EIPS/eip-170\" rel=\"noopener nofollow ugc\">EIP-170</a>, but increased nonetheless. However, it could be possible to conceive of a proposal where exponentially increasing cost combined with block-gas-limits prevents against any security issues, and the cap can be removed entirely.</p>\n<p>A second potential proposal could be something akin to multi-dimensional EIP-1559, where a target amount of new code is set per-block and the gas cost of deployment dynamic with a target. However, this would be contingent upon other major consensus changes, and is not suggested in the interim.</p>\n<p>There’s definitely an appetite in the solidity community for increasing the limit, the question is how to do it with minimal consensus changes. Implementation would be fairly simple as its only a question of what the gas equation ought to be, and can be tweaked in the future as hardware requirements and further state-expiry proposals shift as well.</p>\n<p>There must be some reason why nobody has taken this question up? Contract size limitations are a major pain point for solidity developers. The only discussion i’ve seen on this forum is from 2019, pre-merge/1559 and discussion seems to have stalled out.</p>\n            <p><small>8 posts - 3 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/increasing-contract-size-limit-with-increasing-gas-cost-beyond-24-5kb/19708\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/increasing-contract-size-limit-with-increasing-gas-cost-beyond-24-5kb/19708","pubDate":"Thu, 18 Apr 2024 21:37:48 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19708"},"source":{"@url":"https://ethereum-magicians.org/t/increasing-contract-size-limit-with-increasing-gas-cost-beyond-24-5kb/19708.rss","#text":"Increasing contract size limit with increasing gas cost beyond 24.5Kb"}},{"title":"ERC-7694: Solana Storage Handler for CCIP-Write","dc:creator":"sshmatrix","category":"ERCs","description":"<p>This standard is an extension to <a href=\"https://ethereum-magicians.org/t/eip-5559-cross-chain-write-deferral-protocol/10576\">EIP-5559</a> introducing storage handler for Solana. EIP-5559 introduces two external handlers for deferring write operations to L2s and databases. This document extends that specification by introducing a third storage handler targeting Solana as the storage provider.</p>\n<p>Solana is a cheap L1 solution that is fairly popular among Ethereum community and is widely supported alongside Ethereum by almost all wallet providers. There are several chain-agnostic protocols on Ethereum which could benefit from direct access to Solana blockspace; ENS is one such example where it can serve users of Solana via its chain-agnostic properties while also using Solana’s own native storage. This development will surely encourage more cross-chain functionalities between Ethereum and Solana at core.</p>\n<p>ERC Link: <a href=\"https://github.com/namesys-eth/ERCs/blob/solanaHandler/ERCS/erc-7694.md\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ERCs/ERCS/erc-7694.md at solanaHandler · namesys-eth/ERCs · GitHub</a></p>\n<p>Happy to hear comments &amp; feedback.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7694-solana-storage-handler-for-ccip-write/19706\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7694-solana-storage-handler-for-ccip-write/19706","pubDate":"Thu, 18 Apr 2024 15:35:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19706"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7694-solana-storage-handler-for-ccip-write/19706.rss","#text":"ERC-7694: Solana Storage Handler for CCIP-Write"}},{"title":"EIP-7691: Blob throughput increase","dc:creator":"parithosh","category":"EIPs","description":"<p>Discussion for <a href=\"https://github.com/ethereum/EIPs/pull/8452\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: Blob throughput increase by parithosh · Pull Request #8452 · ethereum/EIPs · GitHub</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7691-blob-throughput-increase/19694\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7691-blob-throughput-increase/19694","pubDate":"Wed, 17 Apr 2024 21:27:30 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19694"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7691-blob-throughput-increase/19694.rss","#text":"EIP-7691: Blob throughput increase"}},{"title":"EIP-7692: EVM Object Format (EOF) Meta","dc:creator":"pdobacz","category":"EIPs","description":"<p>Discussion thread for <a href=\"https://github.com/ethereum/EIPs/pull/8448\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: EVM Object Format (EOF) Meta by pdobacz · Pull Request #8448 · ethereum/EIPs · GitHub</a>, which is only a list of EOF EIPs</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7692-evm-object-format-eof-meta/19686\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7692-evm-object-format-eof-meta/19686","pubDate":"Wed, 17 Apr 2024 07:01:35 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19686"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7692-evm-object-format-eof-meta/19686.rss","#text":"EIP-7692: EVM Object Format (EOF) Meta"}},{"title":"ERC1271 versioning to maintain signature validity","dc:creator":"kylekaplan","category":"Primordial Soup","description":"<h2><a name=\"intro-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#intro-1\"></a>Intro</h2>\n<p>Off-chain ERC1271 Signatures are not guaranteed to be valid in the future, because the <code>isValidSignature</code> function can be changed.</p>\n<h2><a name=\"problem-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#problem-2\"></a>Problem</h2>\n<p>This creates a problem for any application that would like to use signatures to prove validity of statements and also support smart accounts.</p>\n<p>Simple example of signers changing causing the validity of a signature to change:<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethereum-magicians.org/uploads/default/original/2X/c/cdc07f04996e7a9905e86afae5b4b3d85da3a4fa.jpeg\" data-download-href=\"https://ethereum-magicians.org/uploads/default/cdc07f04996e7a9905e86afae5b4b3d85da3a4fa\" title=\"image\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/c/cdc07f04996e7a9905e86afae5b4b3d85da3a4fa_2_690x297.jpeg\" alt=\"image\" data-base62-sha1=\"tmaiL5bShR8rEVgWpnEab2He7h0\" width=\"690\" height=\"297\" srcset=\"https://ethereum-magicians.org/uploads/default/optimized/2X/c/cdc07f04996e7a9905e86afae5b4b3d85da3a4fa_2_690x297.jpeg, https://ethereum-magicians.org/uploads/default/optimized/2X/c/cdc07f04996e7a9905e86afae5b4b3d85da3a4fa_2_1035x445.jpeg 1.5x, https://ethereum-magicians.org/uploads/default/optimized/2X/c/cdc07f04996e7a9905e86afae5b4b3d85da3a4fa_2_1380x594.jpeg 2x\" data-dominant-color=\"C6C5C5\"></a></div><br>\nFrom <a href=\"https://www.youtube.com/watch?v=p_UG1x53TWc\" rel=\"noopener nofollow ugc\">Peter Robinson’s Ethereum Engineering Group presentation</a><p></p>\n<h2><a name=\"proposal-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#proposal-3\"></a>Proposal</h2>\n<h4><a name=\"standard-way-of-updating-isvalidsignature-function-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#standard-way-of-updating-isvalidsignature-function-4\"></a>Standard way of updating <code>isValidSignature</code> function</h4>\n<p>I propose we create a standard way for updating the <code>isValidSignature</code> function so that we can keep track of previous versions.</p>\n<p>One possible solution is to store in state previous ERC1271 verifiers and timestamps, which can be updated by calling an <code>updateIsValidSignature</code> function. Then a <code>wasValidSignature</code> function can be called and reference previous verifiers, when determining if a signature was valid.</p>\n<p>The way state is stored can be external to this standard, but could look something like this:</p>\n<h3><a name=\"state-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#state-5\"></a>State:</h3>\n<pre><code class=\"lang-auto\">// create a VerifierStruct which includes a timestamp and ERC1271 verifier\n// keep an array of VerifierStructs that updateIsValidSignature will push to\n\nstruct VerifierStruct {\n  timestamp: uint64;\n  verifier: ERC1271; // ERC1271 contract address\n}\n\nVerifierStruct[] public verifiers = [];\n</code></pre>\n<p>OR</p>\n<pre><code class=\"lang-auto\">// Keep a mapping of timestamps and ERC1271 verifiers that updateIsValidSignature will add to\n\nmapping(uint64 =&gt; ERC1271) public verifiers;\n</code></pre>\n<h3><a name=\"functions-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#functions-6\"></a>Functions:</h3>\n<pre><code class=\"lang-auto\">updateIsValidSignature:\n@dev pushes to the array a new contract address with a current timestamp\n@param _contract An ERC1271 contract address\nfunction updateIsValidSignature(address _contract) external;\n</code></pre>\n<pre><code class=\"lang-auto\">wasValidSignature:\n@dev looks up which contract to use based on timestamp, and calls appropriate function\n@return The bytes4 magic value 0x1626ba7e when function passes\n@param _timestamp Timestamp to check for\n@param _hash Hash of the data to be signed\n@param _signature Signature byte array associated with _hash\n@param _data arbitrary extra data used for verification\nfunction wasValidSignature(\n    unit64 _timestamp,\n    bytes32 _hash,\n    bytes memory _signature,\n    bytes _data\n) public view returns(bytes4);\n</code></pre>\n<h3><a name=\"events-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#events-7\"></a>Events:</h3>\n<pre><code class=\"lang-auto\">event ERC1271CheckerUpdated(address indexed newChecker)\n</code></pre>\n<hr>\n<p>I would love feedback and suggestions on this and other possible solutions for this problem. Thanks <a class=\"mention\" href=\"https://ethereum-magicians.org/u/sina\">@sina</a> for your help on this design so far.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc1271-versioning-to-maintain-signature-validity/19681\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc1271-versioning-to-maintain-signature-validity/19681","pubDate":"Tue, 16 Apr 2024 19:03:55 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19681"},"source":{"@url":"https://ethereum-magicians.org/t/erc1271-versioning-to-maintain-signature-validity/19681.rss","#text":"ERC1271 versioning to maintain signature validity"}},{"title":"Union Lock based on TSTORE/TLOAD can avoid flash loan attacks","dc:creator":"1999321","category":"EIPs","description":"<p>The feature of Union Lock can query the number of calls of other contracts and the number of calls of other contract functions in the same Ethereum transaction, thereby realizing the cross-contract locking function.</p>\n<p>related link:<br>\neip link: <a href=\"https://github.com/ethereum/EIPs/pull/8442\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: Union Lock by 1999321 · Pull Request #8442 · ethereum/EIPs · GitHub</a><br>\ntest cases: <a href=\"https://github.com/1999321/Union-Lock\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - 1999321/Union-Lock</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/union-lock-based-on-tstore-tload-can-avoid-flash-loan-attacks/19676\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/union-lock-based-on-tstore-tload-can-avoid-flash-loan-attacks/19676","pubDate":"Tue, 16 Apr 2024 07:57:07 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19676"},"source":{"@url":"https://ethereum-magicians.org/t/union-lock-based-on-tstore-tload-can-avoid-flash-loan-attacks/19676.rss","#text":"Union Lock based on TSTORE/TLOAD can avoid flash loan attacks"}},{"title":"EIP-7688: Forward compatible consensus data structures","dc:creator":"etan-status","category":"Core EIPs","description":"<p>Discussion thread for <a href=\"https://github.com/ethereum/EIPs/pull/8439\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: Forward compatible consensus data structures by etan-status · Pull Request #8439 · ethereum/EIPs · GitHub</a></p>\n<h1><a name=\"related-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#related-1\"></a>Related</h1>\n<ul>\n<li>EIP-7495: <a href=\"https://eips.ethereum.org/EIPS/eip-7495\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">EIP-7495: SSZ StableContainer</a></li>\n<li>EIP-6493: <a href=\"https://eips.ethereum.org/EIPS/eip-6493\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">EIP-6493: SSZ Transaction Signature Scheme</a></li>\n</ul>\n            <p><small>2 posts - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7688-forward-compatible-consensus-data-structures/19673\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7688-forward-compatible-consensus-data-structures/19673","pubDate":"Mon, 15 Apr 2024 17:53:14 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19673"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7688-forward-compatible-consensus-data-structures/19673.rss","#text":"EIP-7688: Forward compatible consensus data structures"}},{"title":"ERC-7689: Smart Blobs","dc:creator":"charmful0x","category":"ERCs","description":"<h1><a name=\"read-more-about-the-proposal-here-httpsgithubcomethereumercspull380-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#read-more-about-the-proposal-here-httpsgithubcomethereumercspull380-1\"></a>Read more about the proposal here: <a href=\"https://github.com/ethereum/ERCs/pull/380\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add ERC: Smart Blobs by charmful0x · Pull Request #380 · ethereum/ERCs · GitHub</a></h1>\n<h2><a name=\"abstract-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-2\"></a>Abstract</h2>\n<p>This EIP introduces “smart blobs” and standardizes an implementation of the <a href=\"https://github.com/ArweaveTeam/SmartWeave\" rel=\"noopener nofollow ugc\">SmartWeave</a> protocol on top of EIP-4844 blobs, ensuring a certain degree of compatibility with the EVM.</p>\n<h2><a name=\"motivation-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-3\"></a>Motivation</h2>\n<p>Executing complex data computations directly on the EVM execution layer is costly and often not economically feasible. In 2020, SmartWeave introduced an Arweave-based protocol that operates as a general lazy evaluator for data computation. By implementing smart blobs, this proposal aims to decouple state transitions (which occur on-chain, using blobs) from execution processes (which occur off-chain, using a SmartWeave instance), enhancing efficiency and reducing costs.</p>\n<p>Additionally, this EIP addresses the isolation of the SmartWeave protocol within the Arweave network and the lack of DA guarantees in Arweave. Smart blobs provide a standardized framework for deploying a SmartWeave execution machine for any EVM network that supports EIP-4844.</p>\n<h2><a name=\"specification-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-4\"></a>Specification</h2>\n<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174.</p>\n<h3><a name=\"protocol-design-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#protocol-design-5\"></a>Protocol design</h3>\n<p>The design of the proposal’s protocol is both a simple and straightforward <em><strong>computation protocol</strong></em>. State transitions (transactions) are posted as EIP-4844 transactions by the user on the EVM network and then submitted by the user or dApp to the sequencer. The sequencer captures the EVM on-chain transaction, decodes the transaction data, performs the corresponding off-chain execution, and then indexes the state changes in the cloud (cache) after transmitting the blob data to Arweave.</p>\n<p>To simplify the expansion of the protocol design, “blobvm” refers to an execution machine deployed according to the standards of this EIP. The terms “smart blob” and “blobvm smart contract” are used interchangeably.</p>\n<h3><a name=\"blobvm-transactions-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#blobvm-transactions-6\"></a>blobVM transactions</h3>\n<p>On the protocol level, blobVM distinguishes between 2 types of transactions:</p>\n<ul>\n<li><code>type 1</code> : contract deployments</li>\n<li><code>type 2</code> : contract calls</li>\n</ul>\n<p>Transactions data structure MUST be as follows:</p>\n<h4><a name=\"contract-deployment-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#contract-deployment-7\"></a>Contract deployment</h4>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">{\n  \"type\": 1,\n  \"sc\": [],\n  \"state\":[]\n}\n</code></pre>\n<h4><a name=\"contract-call-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#contract-call-8\"></a>Contract call</h4>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">{\n  \"type\": 2,\n  \"inputs\": [],\n}\n</code></pre>\n<p><strong>Data encoding</strong></p>\n<p>The properties <code>sc</code>, <code>state</code>, and <code>inputs</code> are initialized as listed below. They are then encoded according to the function <code>encodeBvmData()</code></p>\n<ul>\n<li><code>sc</code> : UTF-8 representation of the source code</li>\n<li><code>state</code> : initial state as stringified JSON</li>\n<li><code>inputs</code> : stringified JSON of the contract’s function call object</li>\n</ul>\n<pre data-code-wrap=\"ts\"><code class=\"lang-ts\">function encodeBvmData(data: string): number[] {\n  const encodedData = data.split(\"\").map((char) =&gt; char.charCodeAt(0));\n  return encodeBvmData;\n}\n</code></pre>\n<h4><a name=\"additional-information-about-transactions-9\" class=\"anchor\" href=\"https://ethereum-magicians.org#additional-information-about-transactions-9\"></a>Additional information about Transactions:</h4>\n<ul>\n<li>Regardless of the type, the transaction *<strong>total size</strong> MUST be less than or equal to 128 KiB.</li>\n<li>The EIP-4844 transaction (on-chain) MUST contain strictly one operation only.</li>\n</ul>\n<h3><a name=\"examples-10\" class=\"anchor\" href=\"https://ethereum-magicians.org#examples-10\"></a>Examples</h3>\n<p>Smart Blobs can be written in any interpreted language, or in a compiled language provided it uses WASM. We will demonstrate two Smart Blob examples: a counter and a dummy token.</p>\n<h4><a name=\"counter-smart-blob-11\" class=\"anchor\" href=\"https://ethereum-magicians.org#counter-smart-blob-11\"></a>Counter Smart Blob</h4>\n<h5><a name=\"counter-pseudocode-12\" class=\"anchor\" href=\"https://ethereum-magicians.org#counter-pseudocode-12\"></a>Counter Pseudocode</h5>\n<pre data-code-wrap=\"plaintext\"><code class=\"lang-plaintext\">Function handle (state, action)\n    Set input to action.input\n    If input.function equals \"increment\" Then\n        Increase state.counter by 1\n        Add blobvm.msg.sender to state.users list\n        Return state\n    End If\nEnd Function\n</code></pre>\n<h5><a name=\"counter-source-code-in-js-13\" class=\"anchor\" href=\"https://ethereum-magicians.org#counter-source-code-in-js-13\"></a>Counter source code in JS</h5>\n<pre data-code-wrap=\"js\"><code class=\"lang-js\">export async function handle(state, action) {\n  const input = action.input;\n\n  if (input.function === \"increment\") {\n    state.counter += 1;\n    state.users.push(blobvm.msg.sender);\n    return { state };\n  }\n}\n</code></pre>\n<h5><a name=\"counter-source-code-in-python-14\" class=\"anchor\" href=\"https://ethereum-magicians.org#counter-source-code-in-python-14\"></a>Counter source code in Python</h5>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">def handle(state, action):\n    input = action['input']\n\n    if input['function'] == 'increment':\n        state['counter'] += 1\n        state['users'].append(action['sender'])\n        return state\n\n</code></pre>\n<h4><a name=\"counter-initial-state-15\" class=\"anchor\" href=\"https://ethereum-magicians.org#counter-initial-state-15\"></a>Counter initial state</h4>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">{\n  \"counter\": 0,\n  \"users\": []\n}\n</code></pre>\n<h4><a name=\"dummy-token-smart-blob-16\" class=\"anchor\" href=\"https://ethereum-magicians.org#dummy-token-smart-blob-16\"></a>Dummy Token Smart Blob</h4>\n<p>For the other example, Dummy Token Smart Blob, we will just add the source code in JS</p>\n<h5><a name=\"dummy-token-source-code-in-js-17\" class=\"anchor\" href=\"https://ethereum-magicians.org#dummy-token-source-code-in-js-17\"></a>Dummy Token source code in JS</h5>\n<pre data-code-wrap=\"js\"><code class=\"lang-js\">export async function handle(state, action) {\n  const input = action.input;\n\n  if (input.function === \"mint\") {\n    const { amount } = input;\n    ContractAssert(blobvm.msg.sender === state.owner, \"err_invalid_caller\");\n    const newOwnerBalance =\n      BigInt(amount) + BigInt(state.balances[state.owner]);\n    state.balances[state.owner] = String(newOwnerBalance);\n    return { state };\n  }\n\n  if (input.function === \"transfer\") {\n    const { target, amount } = input;\n\n    ContractAssert(blobvm.msg.sender in state.balances, \"err_caller_not_found\");\n\n    const bintAmount = BigInt(amount);\n    const callerBalance = BigInt(state.balances[blobvm.msg.sender]);\n\n    ContractAssert(/^0x[a-fA-F0-9]{40}$/.test(target), \"err_invalid_address\");\n    ContractAssert(callerBalance &gt;= bintAmount, \"err_invalid_amount\");\n\n    if (!(target in state.balances)) {\n      state.balances[target] = BigInt(0n);\n    }\n\n    const newTargetBalance = bintAmount + BigInt(state.balances[target]);\n    state.balances[target] = String(newTargetBalance);\n\n    const newCallerBalance =\n      BigInt(state.balances[blobvm.msg.sender]) - bintAmount;\n    state.balances[blobvm.msg.sender] = String(newCallerBalance);\n\n    return { state };\n  }\n}\n</code></pre>\n<h5><a name=\"dummy-token-initial-state-18\" class=\"anchor\" href=\"https://ethereum-magicians.org#dummy-token-initial-state-18\"></a>Dummy Token initial state</h5>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">{\n  \"ticker\": \"SMARTBLOB\",\n  \"decimals\": 18,\n  \"balances\": {},\n  \"owner\": \"0x197f818c1313DC58b32D88078ecdfB40EA822614\"\n}\n</code></pre>\n<h2><a name=\"about-the-execution-machines-sequencer-19\" class=\"anchor\" href=\"https://ethereum-magicians.org#about-the-execution-machines-sequencer-19\"></a>About the Execution Machine’s Sequencer</h2>\n<p>Although developers have the freedom to extend or limit the sequencer’s functionalities, there are 3 required components: the blobVM context, the gas formula, and the gateway interface.</p>\n<h3><a name=\"blobvm-context-20\" class=\"anchor\" href=\"https://ethereum-magicians.org#blobvm-context-20\"></a>blobVM Context</h3>\n<p>The blobVM context is injected by the sequencer during the lazy evaluation of a transaction. Below are the mandatory methods in the Context:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">method</th>\n<th style=\"text-align:center\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>blobvm.msg.sender</code></td>\n<td style=\"text-align:center\">return the transaction sender (EOA)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>blobvm.tx.id</code></td>\n<td style=\"text-align:center\">return the call’s transaction id</td>\n</tr>\n</tbody>\n</table>\n</div><h3><a name=\"gas-formula-21\" class=\"anchor\" href=\"https://ethereum-magicians.org#gas-formula-21\"></a>Gas formula</h3>\n<p>A blobVM transaction consists of two factors affecting the gas calculation: gas paid for the EVM layer 1 (L1) and gas paid to the blobVM sequencer (Sequencer):</p>\n<ul>\n<li>\n<p><strong>Gas Paid for L1</strong>: This is the gas paid by a transaction that implements <a href=\"https://eips.ethereum.org/EIPS/eip-1559\" rel=\"noopener nofollow ugc\">EIP-1559</a> and <a href=\"https://eips.ethereum.org/EIPS/eip-4844\" rel=\"noopener nofollow ugc\">EIP-4844</a> standards.</p>\n</li>\n<li>\n<p><strong>Gas Paid to the Sequencer</strong>: This occurs within the same transaction. It involves transferring a sufficient amount of gas fee to the sequencer’s address under the <code>to</code> (destination) field.</p>\n</li>\n</ul>\n<p>The gas cost of a blobVM transaction (types <code>1</code> and <code>2</code>) is calculated as follows:</p>\n<pre data-code-wrap=\"plaintext\"><code class=\"lang-plaintext\">tx_gas = l1_gas_fees + (262604 * winston_byte_price * 1e-12 * ar_usd_price / eth_usd_price) * bvm_multiplier\n</code></pre>\n<h4><a name=\"equation-terms-breakdown-22\" class=\"anchor\" href=\"https://ethereum-magicians.org#equation-terms-breakdown-22\"></a>Equation Terms Breakdown:</h4>\n<ul>\n<li><code>l1_gas_fees</code>: The gas paid to post the transaction to the EVM network.</li>\n<li><code>262604</code>: The total byte size of an EIP-4844 transaction when archiving on Arweave. This includes data, KZG commitments, and proof.</li>\n<li><code>winston_byte_price</code>: The cost price per byte on Arweave. This is dynamic and can be checked at <code>https://arweave.net/price/262604</code>.</li>\n<li><code>1e-12 * ar_usd_price</code>: The conversion of <code>winston_byte_price</code> from winstons to AR and then to USD.</li>\n<li><code>sequencer_multiplier</code> (&gt;= 1): The total Arweave cost, converted to ETH, is then multiplied by the sequencer premium multiplier.</li>\n</ul>\n<h3><a name=\"gateway-interface-23\" class=\"anchor\" href=\"https://ethereum-magicians.org#gateway-interface-23\"></a>Gateway interface</h3>\n<p>The designed sequencer MUST consistently expose the following methods:</p>\n<h4><a name=\"reading-contract-state-24\" class=\"anchor\" href=\"https://ethereum-magicians.org#reading-contract-state-24\"></a>Reading contract state</h4>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">curl -X GET base_endpoint/state/target_contract_addr\n</code></pre>\n<h4><a name=\"deploying-a-contract-25\" class=\"anchor\" href=\"https://ethereum-magicians.org#deploying-a-contract-25\"></a>Deploying a contract</h4>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">curl -X POST -H \"Content-Type: application/json\" -d '{\"txid\": \"contract_eip4844_txid\"}' base_endpoint/deploy \n</code></pre>\n<h4><a name=\"sending-a-transaction-26\" class=\"anchor\" href=\"https://ethereum-magicians.org#sending-a-transaction-26\"></a>Sending a transaction</h4>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">curl -X POST -H \"Content-Type: application/json\" -d '{\"txid\": \"eip4844_txid\"}' base_endpoint/transactions \n</code></pre>\n<p><em><strong>N.B: Smart Blobs sequencers are centralized and do not offer censorship resistance guarantees. The end user must rely on the good faith of the sequencer.</strong></em></p>\n<h2><a name=\"rationale-27\" class=\"anchor\" href=\"https://ethereum-magicians.org#rationale-27\"></a>Rationale</h2>\n<p>This proposal hopes to accomplish the following:</p>\n<ul>\n<li>Standardizing the usage of EIP-4844 blobs within the scope of creating execution machines on top of the blobspace</li>\n<li>Utilize SmartWeave’s lazy evaluation paradigm within the EVM space.</li>\n<li>Extend the capabilities of lazy evaluation by using window-timegated DA</li>\n<li>Utilize blobspace instead of calldata to leverage off-chain execution more cheaply</li>\n<li>Write Smart Blobs in any interpreted language, or in a compiled language provided it uses WASM (JavaScript, Python, Rust, Lua, etc.)</li>\n</ul>\n<h2><a name=\"backwards-compatibility-28\" class=\"anchor\" href=\"https://ethereum-magicians.org#backwards-compatibility-28\"></a>Backwards Compatibility</h2>\n<p>There is no existing standard for smart blobs as described in this EIP, indicating that the proposal introduces new standard without conflicting with or altering any current implementations.</p>\n<h2><a name=\"reference-implementation-29\" class=\"anchor\" href=\"https://ethereum-magicians.org#reference-implementation-29\"></a>Reference Implementation</h2>\n<p>A reference implementation of this proposal is currently being developed by the weaveVM organization. The ongoing development can be accessed on GitHub at the following URL: <a href=\"https://github.com/weavevm/blobvm-core\" rel=\"noopener nofollow ugc\">weaveVM blobvm-core</a>.</p>\n<h2><a name=\"security-considerations-30\" class=\"anchor\" href=\"https://ethereum-magicians.org#security-considerations-30\"></a>Security Considerations</h2>\n<p>While the proposed protocol allows any computation, referred computation should be deterministic (with the exception of a few rare cases like chain forks, which are not directly related to the execution of the transaction). This is because to fetch the final state of the contract, an entity requiring this state must execute all past state transitions (transactions) of the required contract.</p>\n<p>The ability to do any non-deterministic behavior in the runtime would mean the possibility of different states on each re-evaluation (and so each time the contract’s state is fetched in a trustless way).</p>\n<p>The execution also has to be gas-metered to avoid resource abuse and DoS attacks.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7689-smart-blobs/19672\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7689-smart-blobs/19672","pubDate":"Mon, 15 Apr 2024 17:49:55 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19672"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7689-smart-blobs/19672.rss","#text":"ERC-7689: Smart Blobs"}},{"title":"EIP-7685 General purpose execution layer requests","dc:creator":"matt","category":"Core EIPs","description":"<p>Discussion for <a href=\"https://github.com/ethereum/EIPs/pull/8432\" class=\"inline-onebox\">Add EIP: General purpose execution layer requests by lightclient · Pull Request #8432 · ethereum/EIPs · GitHub</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7685-general-purpose-execution-layer-requests/19668\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7685-general-purpose-execution-layer-requests/19668","pubDate":"Mon, 15 Apr 2024 14:21:08 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19668"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7685-general-purpose-execution-layer-requests/19668.rss","#text":"EIP-7685 General purpose execution layer requests"}},{"title":"ERC-5559: Cross-chain Write Deferral Protocol","dc:creator":"sshmatrix","category":"EIPs","description":"<p>The following proposal is a superseding version of <a href=\"https://ethereum-magicians.org/t/eip-5559-cross-chain-write-deferral-protocol/10576\">EIP-5559: Cross-Chain Write Deferral Protocol</a>, aka <em>CCIP-Write</em>, replacing Ethereum L1 storage with L2 chains and cryptographically secure databases with an aim to cut gas costs and further privacy while retaining the secure aspects of on-chain storage. Methods in this document specifically target security and cost-effectiveness of write deferrals in context of databases. The cross-chain data written with these methods can be retrieved by generic EIP-3668-compliant contracts completing the cross-chain data life cycle.</p>\n<p>ERC Link: <a href=\"https://github.com/namesys-eth/ERCs/blob/master/ERCS/erc-5559.md\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ERCs/ERCS/erc-5559.md at master · namesys-eth/ERCs · GitHub</a></p>\n<p>Happy to hear comments &amp; feedback.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-5559-cross-chain-write-deferral-protocol/19664\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-5559-cross-chain-write-deferral-protocol/19664","pubDate":"Mon, 15 Apr 2024 11:59:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19664"},"source":{"@url":"https://ethereum-magicians.org/t/erc-5559-cross-chain-write-deferral-protocol/19664.rss","#text":"ERC-5559: Cross-chain Write Deferral Protocol"}},{"title":"EIP 3074 is unsafe, unnecessary, puts user funds at risk while fragmenting UX, liquidity and the wallet stack","dc:creator":"MrSilly","category":"EIPs","description":"<p>There have been mountains of text written on this forum and elsewhere about EIP 3074, but getting to the signal through the noise can be hard. Here’s a short summary of why EIP 3074 is a bad idea:</p>\n<ul>\n<li><strong>User funds at risk</strong>: One signature and you lose everything. Relies on wallets preventing this, and users understanding the new security model. Fragile assumptions. Hardware wallets won’t protect users unless their UX is rehauled</li>\n<li><strong>Dangerous lack of security controls</strong>: to enable use cases such as gas abstraction EIP 3074 requires giving full access to all of your assets. EIP 3074 is trust maximized. It is an all or nothing “sudo root” access model. This is unlike  4337’s trust minimized design where paymasters are incapable of stealing your funds</li>\n<li><strong>Confusing security model that’s harder for users to understand</strong>: EIP 3074 makes the EOA security model much harder to understand, even for experts, but especially for normal humans. Violates the principle of least surprise (see more below)</li>\n<li><strong>Doesn’t improve UX overall</strong>: because losing all of your funds to a scam is not good UX. The benefits EIP 3074 claims to provide can be achieved more safely in other ways</li>\n<li><strong>Other security problems</strong>: adds new authorization methods to an EOA while being incapable of revoking the old hardwired EOA key. Many potential problems with breaking dapp assumptions around EOAs. Needs more thorough auditing</li>\n<li><strong>Permissioned innovation</strong>:  dapp devs won’t be able to develop their own invokers since all wallets will whitelist them once users start getting scammed.</li>\n<li><strong>Creates two incompatible wallet stacks</strong>: This will fragment UX and liquidity even more</li>\n<li><strong>Unnecessary</strong>: given that account abstraction (ERC 4337) is already on mainnet and we are on the way to having gas efficient native account abstraction in the protocol and standardized on all the rollups</li>\n<li><strong>Enshrines friction and bloat</strong>: Instead of helping us on the path to account abstraction, EIP 3074 enshrines EOAs and adds an ugly layer of cruft to the protocol that we will never be able to get rid of. As soon as it gets in, the campaign for more kludgy EIPs built on top of it will start. Patches to patches to patches, all the way down.</li>\n<li><strong>Incompatible with inclusion lists</strong>: which we need to mitigate how easy it is now to censor transactions now with centralized block building</li>\n<li><strong>Strategically bad second order effects</strong>: promotes centralized solutions as the path of least resistance (eg centralized meta transaction relays, too big to fail monopoly around Metamask’s invoker contract)</li>\n<li>Credit for these arguments goes to various critics of EIP 3074 including:\n<ul>\n<li>Vitalik: <a href=\"https://ethereum-magicians.org/t/we-should-be-moving-beyond-eoas-not-enshrining-them-even-further-eip-3074-related/6538\">“we should be moving beyond EOAs not enshrining them”</a></li>\n<li>Yoav Weiss, EF security fellow and architect of 4337: <a href=\"https://notes.ethereum.org/@yoav/erc-4337-vs-eip-3074-false-dichotomy#ERC-4337-vs-EIP-3074-False-dichotomy\" rel=\"noopener nofollow ugc\">“ERC 4337 vs EIP 3074”</a></li>\n<li>Ansgar @ EF researcher: one of the original EIP 3074 authors</li>\n<li>Charles Guillemet, CTO at Ledger</li>\n<li>Martin Köppelmann Gnosis co-founder</li>\n<li>Itamar Lesuisse: Founder and CEO of the Argent wallet</li>\n<li>Patricio @ Founder at POAP</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"why-is-it-a-problem-that-eip-3074-violates-the-principle-of-least-surprise-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#why-is-it-a-problem-that-eip-3074-violates-the-principle-of-least-surprise-1\"></a>Why is it a problem that EIP 3074 violates the principle of least surprise?</h2>\n<p>The general problem with losing the principle of least surprise is that the user expects a transaction to happen once, now.  With 3074 it becomes “the transaction may happen any number of times now or in the future unless the invoker enforces replay protection”.</p>\n<p>In addition there’s the issue of opaqueness (unlike a batching transaction type). From looking at the transaction, it’s impossible to know exactly what it’s going to do.   Maybe the invoker transfers the tokens as you requested but also sets an allowance for someone to withdraw more in the future.  Or maybe it sponsors your gas for some transaction but also delegates your governance tokens in some project to a malicious delegate who will silently collect a lot of voting power by sponsoring people’s transaction in some other protocol.</p>\n<p>Users won’t notice since they retain their tokens.  They just delegated their voting power to an attacker but are not affected directly.  Or maybe an invoker is an upgradable proxy that is safe now, but in the future it’ll change its implementation to do something else and reuse your old AUTH.  Easy to come up with scary scenarios.</p>\n<h2><a name=\"community-feedback-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#community-feedback-2\"></a>Community feedback</h2>\n<p><a href=\"https://x.com/P3b7_/status/1778720516959785376\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/6/6b9471d6790a5f71f148598303ce41cad64d0861.jpeg\" alt=\"\" data-base62-sha1=\"flH860BIfQWhniIHodSnPURMrIZ\" width=\"429\" height=\"444\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/ryanberckmans/status/1778814106633372044\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/2/262821f023d2418affeac48255eaf1b0ec67a1c5.png\" alt=\"\" data-base62-sha1=\"5ry7U9RV5gnIaXipRD0U44jrMln\" width=\"426\" height=\"315\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/LefterisJP/status/1778460333478211744\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/9/99e1a927dd8c1dd252ee22abd457bce094dbb5a1.png\" alt=\"\" data-base62-sha1=\"lXiwNeuziOt0sPJkvAzhl6Gszuh\" width=\"202\" height=\"500\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/0xCygaar/status/1778522812451586554\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/7/7b50211799c446c743491b592044269ca0c56157.png\" alt=\"\" data-base62-sha1=\"hASp6Vc4mHpvr7J0b36cGrGM8ZN\" width=\"436\" height=\"286\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/koeppelmann/status/1778653049302491499\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/c/ccf59446b8e67a5433539ab5b1ebe087705f113f.png\" alt=\"\" data-base62-sha1=\"tf9ypnD21p8g84GBJfaUscAbKFN\" width=\"418\" height=\"391\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/koeppelmann/status/1778807483202457876\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/6/601cd5d85bf362ed6f5ac16166f14be257cfc3d9.png\" alt=\"\" data-base62-sha1=\"dIfCe7SLRKlRTxv8ic6MUCG5WOt\" width=\"476\" height=\"500\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/0xCygaar/status/1778838614798958776\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/1/161897a7004a5ba6be87cfa4e527e2b7b3e44aa4.jpeg\" alt=\"\" data-base62-sha1=\"39tbZ4oSacm3xP47LyAiMkb3TI8\" width=\"408\" height=\"500\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/P3b7_/status/1778779812498231699\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/e/e2e3c0a9102342fb502126ff0147b8e1fa1d0fd7.jpeg\" alt=\"\" data-base62-sha1=\"wn9RGNCLpdM4OZNYJSRiBJNma6X\" width=\"453\" height=\"387\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/itamarl/status/1778698669992149393\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/d/dbc14cfd5148f67ea9cb1849336ba7dea580877b.png\" alt=\"\" data-base62-sha1=\"vm2I4UlYbYN9jjCd6aBpDE4OZn5\" width=\"338\" height=\"312\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/naruto11eth/status/1778825028827840767\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/6/6ab15443c87d9229630c7c80d0206e1f622afb81.png\" alt=\"\" data-base62-sha1=\"fdQxls8o018VKF0glPwQgUXM9BT\" width=\"576\" height=\"195\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/pcaversaccio/status/1778656545087103265\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/7/758f9c6364ab37ecd0481d9ef0da051c01e2cd66.png\" alt=\"\" data-base62-sha1=\"gLZy2cfNMfz7yAuT9nRzluc4nPg\" width=\"599\" height=\"145\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/Mudit__Gupta/status/1778666806653456869\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/4/48a2321d57cde65642c31efffd3482900cca9074.png\" alt=\"\" data-base62-sha1=\"amxSBm7U53HZn5yx7oFDM1wetxi\" width=\"593\" height=\"182\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/jadler0/status/1779167896423264437\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/e/e08f5708391e34ca4ede96c857c6d230afdd2347.jpeg\" alt=\"\" data-base62-sha1=\"w2y3AmRWba3aIvvhPzS8kIVHvtd\" width=\"348\" height=\"500\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/koeppelmann/status/1778466311745536252\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/c/c8fa5c66861015fd9c9522dd684117d4b89f36a4.png\" alt=\"\" data-base62-sha1=\"sFVTaSUfTtKE1rMcK4AXioGuf76\" width=\"391\" height=\"357\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/koeppelmann/status/1778467779642896384\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/d/d18bead0fc89c35d772c5705ac713022f168cc9b.png\" alt=\"\" data-base62-sha1=\"tTJySPOYFiAqIa8WAztUOTyJlRp\" width=\"286\" height=\"500\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/koeppelmann/status/1778552021181702303\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/a/a94852c02a4dff4a4bd0aff6d79d8eebdcee3d01.png\" alt=\"\" data-base62-sha1=\"o9xDWQZo9jYfXuKhr5fLaFUTIYx\" width=\"503\" height=\"293\" role=\"presentation\"></a></p>\n<p><a href=\"https://x.com/SeanMacAonghais/status/1778709836944875881\" rel=\"noopener nofollow ugc\"><img src=\"https://ethereum-magicians.org/uploads/default/original/2X/6/608868fd2a95814ab6e5e2fca1eab7f6665d154f.png\" alt=\"\" data-base62-sha1=\"dLY5RbN6D8ZYomq7ITX5PXbE5sz\" width=\"395\" height=\"154\" role=\"presentation\"></a></p>\n            <p><small>21 posts - 9 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-3074-is-unsafe-unnecessary-puts-user-funds-at-risk-while-fragmenting-ux-liquidity-and-the-wallet-stack/19662\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-3074-is-unsafe-unnecessary-puts-user-funds-at-risk-while-fragmenting-ux-liquidity-and-the-wallet-stack/19662","pubDate":"Mon, 15 Apr 2024 08:59:14 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19662"},"source":{"@url":"https://ethereum-magicians.org/t/eip-3074-is-unsafe-unnecessary-puts-user-funds-at-risk-while-fragmenting-ux-liquidity-and-the-wallet-stack/19662.rss","#text":"EIP 3074 is unsafe, unnecessary, puts user funds at risk while fragmenting UX, liquidity and the wallet stack"}},{"title":"Large Number of Validators for DVT Testing","dc:creator":"AndyGPN","category":"Primordial Soup","description":"<p>Hi everyone,</p>\n<p>We’ve been looking into the new distributed verification solutions, SSV and Obol, specifically. We have build a decent size cluster of nodes to experiment on, but are having trouble getting enough validators or even holETH. Our goal is to eventually move this setup to the mainnet, but we need to thoroughly test everything first.<br>\nWe’d like to have at least a few hundred Holesky validators running on our machines.</p>\n<p>Is there a way to easily obtain at least a couple thousand holETH to create the necessary validators, or better yet, are there any validators already running that we could take over? Given the current queue times, that’d be even better.<br>\nWe’re happy to “return” them after a few months. I’m also happy to verify that I’m human and that this is not for a nefarious purpose. <img src=\"https://ethereum-magicians.org/images/emoji/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>Thanks,<br>\nAndy</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/large-number-of-validators-for-dvt-testing/19656\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/large-number-of-validators-for-dvt-testing/19656","pubDate":"Sun, 14 Apr 2024 18:24:52 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19656"},"source":{"@url":"https://ethereum-magicians.org/t/large-number-of-validators-for-dvt-testing/19656.rss","#text":"Large Number of Validators for DVT Testing"}},{"title":"ePBS Discusion topic","dc:creator":"potuz","category":"Core EIPs","description":"<p>Creating a topic for discussions for a future EIP, full design notes are included  in this document:</p>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://hackmd.io/@potuz/rJ9GCnT1C\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/8/8f0a562a90992dd656ced3f9b9b37c942cfbde54.png\" class=\"site-icon\" data-dominant-color=\"696969\" width=\"134\" height=\"134\">\n\n      <a href=\"https://hackmd.io/@potuz/rJ9GCnT1C\" target=\"_blank\" rel=\"noopener nofollow ugc\">HackMD</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/394;\"><img src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/6/62d6a99d68e97088bdf157a582a55d8b5cccb38b_2_690x394.jpeg\" class=\"thumbnail\" data-dominant-color=\"5C6962\" width=\"690\" height=\"394\"></div>\n\n<h3><a href=\"https://hackmd.io/@potuz/rJ9GCnT1C\" target=\"_blank\" rel=\"noopener nofollow ugc\">ePBS specification notes - HackMD</a></h3>\n\n  <p>Fully detail specification notes for a minimal implementation of ePBS</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>The Python full specification is included in</p>\n<aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/potuz/consensus-specs/pull/2\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/potuz/consensus-specs/pull/2\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/potuz/consensus-specs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/potuz/consensus-specs/pull/2\" target=\"_blank\" rel=\"noopener nofollow ugc\">[WIP] Minimal ePBS without Max EB and 7002</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>potuz:dev</code> ← <code>potuz:epbs_stripped_out</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-02\" data-time=\"18:50:18\" data-timezone=\"UTC\">06:50PM - 02 Apr 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/potuz\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"potuz\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/5/57c38e1a2cefa95de639b5fe857cdd332c311c69.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"294739\">\n            potuz\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"78 commits changed 7 files with 2076 additions and 0 deletions\">\n          <a href=\"https://github.com/potuz/consensus-specs/pull/2/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+2076</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">Full specification for ePBS\n\nThe full design notes are included in https://hac<span class=\"show-more-container\"><a href=\"https://github.com/potuz/consensus-specs/pull/2\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">kmd.io/@potuz/rJ9GCnT1C\n\nCurrently fully specified documents\n- beacon-chain.md\n- p2p-interface.md\n- validator.md\n- builder.md\n\nMost of the engine API and the forkchoice handlers in forkchoice.md are ready\n\nStill missing is:\n\n- Cleanup of engine API\n- Execution specification\n- forkchoice accounting for (block, slot) voting, IL availability and payload boosts. \n- Builder API changes.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>3 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/epbs-discusion-topic/19634\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/epbs-discusion-topic/19634","pubDate":"Fri, 12 Apr 2024 18:29:34 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19634"},"source":{"@url":"https://ethereum-magicians.org/t/epbs-discusion-topic/19634.rss","#text":"ePBS Discusion topic"}},{"title":"EIP-7684: Return deposits for distinct credentials","dc:creator":"dapplion","category":"Core EIPs","description":"<p>Discussion thread for EIP-7684</p>\n<aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/EIPs/pull/8408\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/EIPs/pull/8408\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/EIPs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/EIPs/pull/8408\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add EIP: Return deposits for distinct credentials</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>dapplion:deposit-frontrun</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-12\" data-time=\"04:30:33\" data-timezone=\"UTC\">04:30AM - 12 Apr 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/dapplion\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"dapplion\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/3/33c85e9176a49904487ac268eba9b47b4768127a.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"505176\">\n            dapplion\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"3 commits changed 1 files with 67 additions and 0 deletions\">\n          <a href=\"https://github.com/ethereum/EIPs/pull/8408/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+67</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">Automatically withdraw deposits for existing validator records but with distinct<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/EIPs/pull/8408\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\"> execution withdrawal credentials</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7684-return-deposits-for-distinct-credentials/19632\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7684-return-deposits-for-distinct-credentials/19632","pubDate":"Fri, 12 Apr 2024 14:27:28 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19632"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7684-return-deposits-for-distinct-credentials/19632.rss","#text":"EIP-7684: Return deposits for distinct credentials"}},{"title":"ERC-7683: Cross Chain Intents Standard","dc:creator":"marktoda","category":"ERCs","description":"<p>The Cross Chain Intents Standard is meant to unify off-chain messages and on-chain settlement smart contracts to enable sharing of infrastructure, filler networks, and orders across cross-chain bridging and trading systems.</p>\n<p>PR:</p><aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/ERCs/pull/375\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/ERCs/pull/375\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/ERCs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/ERCs/pull/375\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add ERC: Cross Chain Intents</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>marktoda:add-cross-chain-standard-erc</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-11\" data-time=\"14:24:59\" data-timezone=\"UTC\">02:24PM - 11 Apr 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/marktoda\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"marktoda\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/7/709160b0d2624c1793873f9a4bea6bf221f13d5d.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"7F5560\">\n            marktoda\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"14 commits changed 1 files with 178 additions and 0 deletions\">\n          <a href=\"https://github.com/ethereum/ERCs/pull/375/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+178</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">This commit adds an ERC for a Cross Chain Intents Standard which is meant to uni<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/ERCs/pull/375\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">fy off-chain messages and on-chain settlement smart contracts to enable sharing of infrastructure, filler networks, and orders across cross-chain bridging and trading systems.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n            <p><small>5 posts - 4 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7683-cross-chain-intents-standard/19619\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7683-cross-chain-intents-standard/19619","pubDate":"Thu, 11 Apr 2024 14:25:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19619"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7683-cross-chain-intents-standard/19619.rss","#text":"ERC-7683: Cross Chain Intents Standard"}},{"title":"IDEA for ERC: arbitrary callable contract interface","dc:creator":"zergity","category":"ERCs","description":"<blockquote>\n<p>On Wednesday, 28th of February, Seneca’s Chamber contracts, previously audited by Halborn Security, were affected by a bug approval and users’ funds were compromised. In the attack, Seneca’s Chamber.sol contract was implicated. The attacker exploited Chamber’s <code>performOperations()</code> function, allowing calls to functions in other contracts, and directed a call to <code>.transferFrom()</code> , using the Chamber contracts to send tokens to their address.</p>\n</blockquote>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://mirror.xyz/0x289D0033d536eb3Ff53367f0A8CceA00d4Ac63a0/_VPi_1T8CWsnQctOA4Z8WS8jKc2B6lIV0hPcQ2Kb-c4\">\n  <header class=\"source\">\n      <img src=\"https://ethereum-magicians.org/uploads/default/original/2X/3/3d91042722f574b2be9ea1ae09fbc8ea144b5eee.png\" class=\"site-icon\" data-dominant-color=\"489FFF\" width=\"16\" height=\"16\">\n\n      <a href=\"https://mirror.xyz/0x289D0033d536eb3Ff53367f0A8CceA00d4Ac63a0/_VPi_1T8CWsnQctOA4Z8WS8jKc2B6lIV0hPcQ2Kb-c4\" target=\"_blank\" rel=\"noopener nofollow ugc\">mirror.xyz</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <img width=\"500\" height=\"500\" src=\"https://ethereum-magicians.org/uploads/default/optimized/2X/e/e17d69d597f3174d3e8469cdd64d28a18b19f5d5_2_500x500.png\" class=\"thumbnail onebox-avatar\" data-dominant-color=\"3F3C2B\">\n\n<h3><a href=\"https://mirror.xyz/0x289D0033d536eb3Ff53367f0A8CceA00d4Ac63a0/_VPi_1T8CWsnQctOA4Z8WS8jKc2B6lIV0hPcQ2Kb-c4\" target=\"_blank\" rel=\"noopener nofollow ugc\">Seneca Exploit - Post Mortem</a></h3>\n\n  <p>On Wednesday, 28th of February, Seneca's Chamber contracts, previously audited by Halborn Security, were affected by a bug approval and users' funds were compromised. In the attack, Seneca’s Chamber.sol contract was implicated. The attacker exploited...</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<blockquote>\n<p>The lack of input validation on the contract is still present, but through the blacklist blockage of <code>_transferFrom</code> functions of deposits assets it is now possible to repay debt and withdraw collateral.</p>\n</blockquote>\n<p>Arbitrary calls are often discouraged by Security Audit firms, but in my opinion, they should be properly encouraged with better design, as they represent the trustless nature of smart contract design. If a contract only trusts (or distrusts) certain other contracts, those trusted contracts could become attack vectors, while still limiting the functionality of the applications.</p>\n<p>Blacklisting the <code>transferFrom()</code> function is also not a comprehensive solution, as it overlooks all other <em>transfer-from</em> functions from other token standards (e.g., 721, 1155, etc.), not to mention other non-standard custom functions created by token developers that protocols like Seneca would never have predicted.</p>\n<p>Another approach by ERC-6120 (which is also designed with trust-less arbitrary contract calls) to deal with the attack above is by using a special ERC-165 interface ID <code>0x61206120</code> that token contracts MUST NEVER implement. This way, ERC-6120 (while holding all user token approval) can support arbitrary contract calls without exposing itself to the <code>transferFrom</code> attack. This is based on the fact that legacy and future token contracts would never implement the <code>0x61206120</code> interface ID, and any other non-token contract can implement it as needed.</p>\n<p>The interface ID checking works as intended, but it isn’t perfect. Unlike other ERC-165 interfaces, arbitrary calls emphasize the absence of an interface instead of its presence. Therefore, there’s a risk that a token contract could accidentally signal support for such an interface ID (like 0x61206120) without being aware of the risk.</p>\n<p>I propose using a function with an explicit name and text message to directly warn token developers and auditors. Then, contracts with support for arbitrary calls can verify the absence of the function in ERC-165 style.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">abstract contract NotToken  {\n    function isNotToken() external pure returns (bytes32) {\n        return \"THIS CONTRACT IS NOT A TOKEN\";\n    }\n}\n</code></pre>\n<p>As described by the contract name, function, and literal text, token contracts should never implement it. Any non-token contracts that allow arbitrary calls can implement this function to signal their support.</p>\n<p>What do you think of the proposal? Please discuss and give comments.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/idea-for-erc-arbitrary-callable-contract-interface/19615\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/idea-for-erc-arbitrary-callable-contract-interface/19615","pubDate":"Thu, 11 Apr 2024 11:38:11 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19615"},"source":{"@url":"https://ethereum-magicians.org/t/idea-for-erc-arbitrary-callable-contract-interface/19615.rss","#text":"IDEA for ERC: arbitrary callable contract interface"}},{"title":"ERC-7682: Auxiliary Funds Capability","dc:creator":"lsr","category":"ERCs","description":"<h2><a name=\"abstract-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-1\"></a>Abstract</h2>\n<p>An EIP-5792 compliant capability that allows wallets to indicate to apps that they have access to funds beyond those that can be accounted for by looking up balances onchain given the wallet’s address.</p>\n<h2><a name=\"motivation-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-2\"></a>Motivation</h2>\n<p>Many applications check users’ balances before letting them complete some action. For example, if a user wants to swap some amount of tokens on a dex, the dex will commonly block the user from doing so if it sees that the user does not have that amount of tokens at their address. However, more advanced wallets have features that let users access funds from other sources. Wallets need a way to tell apps that they have access to additional funds so that users using these more advanced wallets are not blocked by balance checks.</p>\n<h2><a name=\"specification-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-3\"></a>Specification</h2>\n<p>One new EIP-5792 wallet capability is defined.</p>\n<h3><a name=\"wallet-implementation-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#wallet-implementation-4\"></a>Wallet Implementation</h3>\n<p>To conform to this specification, wallets that wish to indicate that they have access to auxiliary funds MUST respond to <code>wallet_getCapabilities</code> calls with an <code>auxiliaryFunds</code> object with a <code>supported</code> field set to <code>true</code> for each chain they have access to auxiliary funds on. This specification does not put any constraints on the source of the auxiliary funds.</p>\n<h4><a name=\"wallet_getcapabilities-response-specification-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#wallet_getcapabilities-response-specification-5\"></a><code>wallet_getCapabilities</code> Response Specification</h4>\n<pre data-code-wrap=\"typescript\"><code class=\"lang-typescript\">type AuxiliaryFundsCapability = {\n  supported: boolean;\n}\n</code></pre>\n<h5><a name=\"wallet_getcapabilities-example-response-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#wallet_getcapabilities-example-response-6\"></a><code>wallet_getCapabilities</code> Example Response</h5>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">{\n  \"0x2105\": {\n    \"auxiliaryFunds\": {\n      \"supported\": true\n    },\n  },\n  \"0x14A34\": {\n    \"auxiliaryFunds\": {\n      \"supported\": true\n    }\n  }\n}\n</code></pre>\n<h3><a name=\"app-implementation-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#app-implementation-7\"></a>App Implementation</h3>\n<p>When an app sees that a connected wallet has access to auxiliary funds via the <code>auxiliaryFunds</code> capability in a <code>wallet_getCapabilities</code> response, the app SHOULD NOT block users from taking actions on the basis of asset balance checks.</p>\n<h2><a name=\"rationale-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#rationale-8\"></a>Rationale</h2>\n<h3><a name=\"alternatives-9\" class=\"anchor\" href=\"https://ethereum-magicians.org#alternatives-9\"></a>Alternatives</h3>\n<h4><a name=\"advanced-balance-fetching-10\" class=\"anchor\" href=\"https://ethereum-magicians.org#advanced-balance-fetching-10\"></a>Advanced Balance Fetching</h4>\n<p>An alternative we considered is defining a way for apps to fetch available auxiliary balances. This could be done, for example, by providing a URL as part of the <code>auxiliaryFunds</code> capability that apps could use to fetch auxiliary balance information. However, we ultimately decided that a boolean was enough to indicate to apps that they should not block user actions on the basis of balance checks, and it is minimally burdensome for apps to implement.</p>\n<p>The shape of this capability allows for a more advanced extension if apps feel more functionality is needed.</p>\n<h4><a name=\"auxiliary-funds-per-asset-11\" class=\"anchor\" href=\"https://ethereum-magicians.org#auxiliary-funds-per-asset-11\"></a>Auxiliary Funds per Asset</h4>\n<p>We could also specify auxiliary funds support per asset. We decided against this because this list could get quite large if a wallet has auxiliary funds supports for many assets, and a single boolean should be enough for apps to not block users from taking actions.</p>\n<h2><a name=\"security-considerations-12\" class=\"anchor\" href=\"https://ethereum-magicians.org#security-considerations-12\"></a>Security Considerations</h2>\n<p>Apps MUST NOT make any assumptions about the source of auxiliary funds. Apps’ smart contracts SHOULD still, as they would today, make appropriate balance checks onchain when processing a transaction.</p>\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7682-auxiliary-funds-capability/19599\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7682-auxiliary-funds-capability/19599","pubDate":"Tue, 09 Apr 2024 21:27:11 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19599"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7682-auxiliary-funds-capability/19599.rss","#text":"ERC-7682: Auxiliary Funds Capability"}},{"title":"ERC-7681: Dual Nature Multi Token Protocol","dc:creator":"sennett-lau","category":"ERCs","description":"<h1><a name=\"dual-nature-multi-token-protocol-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#dual-nature-multi-token-protocol-1\"></a>Dual Nature Multi Token Protocol</h1>\n<p>requires: ERC-20, ERC1155</p>\n<h2><a name=\"abstract-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-2\"></a>Abstract</h2>\n<p>This proposal <a href=\"https://ethereum-magicians.org\">ERC-7681</a> delineates the integration of the fungible <a href=\"https://ethereum-magicians.org\">ERC-20</a> token contract with the semi-fungible <a href=\"https://ethereum-magicians.org\">ERC-1155</a> multi-token standard, enabling cohesive operations between both standards within a single contract framework. It defines a mechanism for combining two token contracts and synchronizing operations between them.</p>\n<h2><a name=\"motivation-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-3\"></a>Motivation</h2>\n<p>Inspired by <a href=\"https://ethereum-magicians.org\">ERC-7631</a> Dual Nature Token Pair, which introduced a concept of interlinkable tokens between ERC-20 and <a href=\"https://ethereum-magicians.org\">ERC-721</a>, a challenge arises due to the duplicated <code>Transfer(address, address, uint256)</code> event, making full compatibility challenging. However, combining ERC-20 and ERC-1155 offers similar benefits of non-fungible token (NFT) fractionalization natively. Here, acquiring ERC-20 tokens could automatically issue ERC-1155 tokens proportionally to the ERC-20 holdings, achieving full compliance with both standards.</p>\n<p>Furthermore, analogous to ERC-7631, this proposal allows users to opt out of ERC-1155 mints and transfers during the ERC-20 to ERC-1155 synchronization process.</p>\n<h2><a name=\"specification-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-4\"></a>Specification</h2>\n<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119 and RFC 8174.</p>\n<h3><a name=\"overview-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#overview-5\"></a>Overview</h3>\n<p>Every <code>ERC-7681</code> MUST implement both <code>ERC-20</code> and <code>ERC-1155</code> interface.</p>\n<h3><a name=\"erc-7681-interface-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#erc-7681-interface-6\"></a>ERC-7681 Interface</h3>\n<p>The ERC-20 contract MUST implement the following interface.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">interface IERC7681 /* is IERC20, IERC1155 */ {\n    /// The contract MUST contain the following events\n    /// ERC20 related events\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /// The contract MUST contain the following events\n    /// ERC1155 related events\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    event URI(string _value, uint256 indexed _id);\n\n    /// The contract MAY contain the following functions\n    /// ERC20 related functions\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n\n    /// The contract MUST contain the following functions\n    /// ERC20 related functions\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _owner) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n\n    /// The contract MUST contain the following functions\n    /// ERC1155 related functions\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n}\n</code></pre>\n<h3><a name=\"erc-7681-skippable-interface-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#erc-7681-skippable-interface-7\"></a>ERC-7681 Skippable Interface</h3>\n<p>The ERC-7681 contract MAY implement the following interface.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">interface IERC7681Skippable {\n    /// @dev Emitted when the skip ERC1155 token status of `owner` is changed by any mechanism.\n    ///\n    /// This initial skip ERC1155 token status for `owner` can be dynamically chosen to\n    /// be true or false, but any changes to it MUST emit this event.\n    event SkipTokenSet(address indexed owner, bool status);\n\n    /// @dev Returns true if ERC-1155 mints and transfers to `owner` SHOULD be\n    /// skipped during ERC-20 to ERC-1155 synchronization. Otherwise false.\n    /// \n    /// This method MAY revert\n    ///\n    /// If this method reverts:\n    /// - Interacting code SHOULD interpret `setSkipToken` functionality as\n    ///   unavailable (and hide any functionality to call `setSkipToken`).\n    /// - The skip ERC1155 token status for `owner` SHOULD be interpreted as undefined.\n    ///\n    /// Once a true or false value has been returned for a given `owner`,\n    /// this method MUST NOT revert for the given `owner`.\n    function getSkipToken(address owner) external view returns (bool);\n\n    /// @dev Sets the caller's skip ERC1155 token status.\n    ///\n    /// This method MAY revert\n    /// (e.g. insufficient permissions, method not supported).\n    ///\n    /// Emits a {SkipTokenSet} event.\n    function setSkipToken(bool status) external;\n}\n</code></pre>\n<h2><a name=\"rationale-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#rationale-8\"></a>Rationale</h2>\n<h3><a name=\"implementation-flexibility-9\" class=\"anchor\" href=\"https://ethereum-magicians.org#implementation-flexibility-9\"></a>Implementation Flexibility</h3>\n<p>This proposal intentionally does not prescribe specific token synchronization logic to allow for diverse implementation strategies and novel use cases, such as one-to-one synchronization or fractionalization of ERC-1155 tokens based on ERC-20 holdings. Developers are afforded the flexibility to determine their synchronization approach, provided it remains fully compliant with the specifications of both token standards.</p>\n<h3><a name=\"erc-1155-token-skipping-10\" class=\"anchor\" href=\"https://ethereum-magicians.org#erc-1155-token-skipping-10\"></a>ERC-1155 Token Skipping</h3>\n<p>For instances where the <code>owner</code> is a smart contract, setting the skip status to <code>true</code> by default can prevent unnecessary ERC-1155 minting for interactions with contracts like DEXs and lending protocols, thereby potentially reducing gas costs.</p>\n<h3><a name=\"backwards-compatibility-11\" class=\"anchor\" href=\"https://ethereum-magicians.org#backwards-compatibility-11\"></a>Backwards Compatibility</h3>\n<p>This proposal is fully backward-compatible with the existing ERC-20 and ERC-1155 standards, ensuring that contracts reliant on these standards will continue to function seamlessly.</p>\n<h2><a name=\"security-considerations-12\" class=\"anchor\" href=\"https://ethereum-magicians.org#security-considerations-12\"></a>Security Considerations</h2>\n<h3><a name=\"out-of-gas-denial-of-service-13\" class=\"anchor\" href=\"https://ethereum-magicians.org#out-of-gas-denial-of-service-13\"></a>Out-of-gas Denial of Service</h3>\n<p>When user transfers ERC-20 tokens, it can trigger the automatic minting, transfer, or burning of various ERC-1155 tokens. This process can lead to gas expenses that grow linearly with the number of actions O(n) rather than the fixed cost O(1) usually seen with ERC-20 token transactions. Additionally, the mechanism for choosing ERC-1155 token IDs might increase gas expenses further. Therefore, any synchronization strategy needs to account for the potential rise in ERC-1155 associated gas costs to avoid running out of gas, which could result in denial of service situations.</p>\n            <p><small>2 posts - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7681-dual-nature-multi-token-protocol/19590\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7681-dual-nature-multi-token-protocol/19590","pubDate":"Mon, 08 Apr 2024 15:54:54 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19590"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7681-dual-nature-multi-token-protocol/19590.rss","#text":"ERC-7681: Dual Nature Multi Token Protocol"}},{"title":"ERC-7680: Embedding Perpetual Value and Liquidity in Tokens","dc:creator":"catiga","category":"ERCs","description":"<h3><a name=\"abstract-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-1\"></a>Abstract</h3>\n<p>The ERC-7680 standard introduces a innovative token protocol that ensures every token intrinsically maintains a minimum value and liquidity. This is achieved by integrating a Base Liquidity Pool (BLP) within the token’s contract, safeguarding against the token’s devaluation and providing a fail-safe against the withdrawal of third-party liquidity pools, commonly seen in decentralized exchanges (DEX).</p>\n<h3><a name=\"introduction-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#introduction-2\"></a>Introduction</h3>\n<p>In the dynamic world of Ethereum and its diverse token standards, the innovative ERC-7680 proposal emerges as a groundbreaking approach to token economics. Aiming to address the inherent volatility and risks associated with reliance on external liquidity pools (e.g., DEXs), ERC-7680 introduces a novel token protocol that embeds intrinsic value and liquidity within the token itself, effectively preventing the token’s value from plummeting to zero due to liquidity withdrawal or fraudulent schemes.</p>\n<h3><a name=\"motivation-addressing-tokenomics-vulnerabilities-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-addressing-tokenomics-vulnerabilities-3\"></a>Motivation: Addressing Tokenomics Vulnerabilities</h3>\n<p>ERC-7680 targets the fundamental issues of token devaluation and reliance on external liquidity pools. By embedding a base value and liquidity within the token itself, ERC-7680 sets a new standard for stable and reliable token economics on Ethereum.</p>\n<h3><a name=\"the-core-of-erc-7680-solidvalue-and-inbuilt-liquidity-mechanism-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#the-core-of-erc-7680-solidvalue-and-inbuilt-liquidity-mechanism-4\"></a>The Core of ERC-7680: SolidValue and Inbuilt Liquidity Mechanism</h3>\n<p>At the heart of ERC-7680 is the concept of <strong>SolidValue</strong>, a design principle ensuring that each token maintains a baseline value backed by a fixed amount of Ethereum (ETH) within a Base Liquidity Pool (BLP) integrated into the token contract. This innovative mechanism ensures each token’s value is not solely dependent on external market forces but is instead underpinned by tangible, intrinsic value.</p>\n<h4><a name=\"key-mechanisms-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#key-mechanisms-5\"></a>Key Mechanisms:</h4>\n<ol>\n<li><strong>SolidValue Calculation:</strong></li>\n</ol>\n<ul>\n<li>\n<p>The minimum value of each token (_eachTokenValue) is defined as the total ETH in the BLP (_totalSolidValue) divided by the total token supply (_totalSupply).</p>\n</li>\n<li>\n<p>MathematicalRepresentation:_eachTokenValue=_totalSolidValue/_totalSupply</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Value</strong> <strong>Enhancement:</strong></li>\n</ol>\n<ul>\n<li>Token holders can increase the token’s intrinsic value by adding ETH to the BLP, thus raising the _totalSolidValue and, by extension, the _eachTokenValue.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Value</strong> <strong>Retrieval through Token Burn:</strong></li>\n</ol>\n<ul>\n<li>Holders can burn their tokens to withdraw a proportionate value from the BLP, effectively reducing _totalSupply and potentially increasing the _eachTokenValue for the remaining tokens.</li>\n</ul>\n<p>Solidifying Token Value through Direct Interactions:</p>\n<p>The ERC2510 standard allows for direct actions that impact the token’s value:</p>\n<pre><code class=\"lang-auto\">// Enhance the token's value by adding ETH to the BLP\nfunction enhanceTokenValue() external payable {\n    require(msg.value &gt; 0, \"Contribution must be more than 0 ETH\");\n    emit EnhanceValue(msg.sender, msg.value);\n}\n</code></pre>\n<pre><code class=\"lang-auto\">// Retrieve value from the BLP by burning tokens\nfunction retrieveTokenValue(uint256 _amount) external {\n    uint256 retrieveValue = calculateSolidValue() * _amount;\n    _burn(msg.sender, _amount);\n    payable(msg.sender).transfer(retrieveValue);\n    emit RetrieveValue(msg.sender, retrieveValue);\n}\n</code></pre>\n<p>These operations exemplify the proactive role holders can play in managing the token’s economic model, ensuring stability, and fostering a robust token ecosystem.</p>\n<h3><a name=\"advantages-of-erc-7680-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#advantages-of-erc-7680-6\"></a>Advantages of ERC-7680:</h3>\n<ul>\n<li>\n<p><strong>Mitigation of Devaluation Risks:</strong> By embedding a minimum value within the token itself, ERC-7680 drastically reduces the risk of token value collapse.</p>\n</li>\n<li>\n<p><strong>Decentralization of</strong> <strong>Value</strong> <strong>Management:</strong> Empowers token holders to directly influence the token’s value, democratizing financial outcomes.</p>\n</li>\n<li>\n<p><strong>Enhanced Market Stability:</strong> Offers a buffer against market volatility and speculative trading, contributing to a more stable token economy.</p>\n</li>\n</ul>\n<h3><a name=\"a-call-for-community-engagement-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#a-call-for-community-engagement-7\"></a>A Call for Community Engagement</h3>\n<p>The development of ERC-7680 is a collaborative effort, seeking insights, feedback, and contributions from the Ethereum community. By participating in the discussion and refinement of ERC2510, we can collectively enhance the stability, utility, and trustworthiness of tokens within the Ethereum ecosystem.</p>\n<h3><a name=\"erc-7680-implementation-repo-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#erc-7680-implementation-repo-8\"></a>ERC-7680 Implementation Repo:</h3>\n<p><a href=\"https://github.com/catiga/ERC2510\" rel=\"noopener nofollow ugc\">ERC-7680 Implementation</a></p>\n            <p><small>3 posts - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7680-embedding-perpetual-value-and-liquidity-in-tokens/19577\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7680-embedding-perpetual-value-and-liquidity-in-tokens/19577","pubDate":"Sun, 07 Apr 2024 03:49:13 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19577"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7680-embedding-perpetual-value-and-liquidity-in-tokens/19577.rss","#text":"ERC-7680: Embedding Perpetual Value and Liquidity in Tokens"}},{"title":"ERC-2333, ERC-2334, ERC-2335: BLS12-381 Key Generation, Deterministic Account Hierarchy, Keystore","dc:creator":"mratsim","category":"ERCs","description":"<p>Discussing 3 EIPs together because they are all interdependent, all same status, impacting the same teams.</p>\n<p><strong>ERC-2333: BLS12-381 Key Generation</strong>: <a href=\"https://eips.ethereum.org/EIPS/eip-2333\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ERC-2333: BLS12-381 Key Generation</a><br>\nDiscussion thread for <a href=\"https://github.com/ethereum/EIPs/pull/2333\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Key Generation by CarlBeek · Pull Request #2333 · ethereum/EIPs · GitHub</a><br>\nPrevious Github discussion thread: <a href=\"https://github.com/ethereum/EIPs/issues/2337\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Key Generation · Issue #2337 · ethereum/EIPs · GitHub</a><br>\nReopen to review PR: <a href=\"https://github.com/ethereum/ERCs/pull/362\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Update ERC-2333: Reopen to Review by mratsim · Pull Request #362 · ethereum/ERCs · GitHub</a></p>\n<p><strong>ERC-2334: BLS12-381 Deterministic Account Hierarchy</strong>: <a href=\"https://eips.ethereum.org/EIPS/eip-2334\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ERC-2334: BLS12-381 Deterministic Account Hierarchy</a><br>\nDiscussion thread for <a href=\"https://github.com/ethereum/EIPs/pull/2334\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Deterministic Account Hierarchy by CarlBeek · Pull Request #2334 · ethereum/EIPs · GitHub</a><br>\nPrevious Github discussion thread: <a href=\"https://github.com/ethereum/EIPs/issues/2338\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Deterministic Account Hierarchy · Issue #2338 · ethereum/EIPs · GitHub</a><br>\nReopen to review PR: <a href=\"https://github.com/ethereum/ERCs/pull/363\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Update ERC-2334: Reopen to review by mratsim · Pull Request #363 · ethereum/ERCs · GitHub</a></p>\n<p><strong>ERC-2335: BLS12-381 Keystore</strong>: <a href=\"https://eips.ethereum.org/EIPS/eip-2335\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ERC-2335: BLS12-381 Keystore</a><br>\nDiscussion thread for <a href=\"https://github.com/ethereum/EIPs/pull/2335\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Keystore by CarlBeek · Pull Request #2335 · ethereum/EIPs · GitHub</a><br>\nPrevious Github discussion thread: <a href=\"https://github.com/ethereum/EIPs/issues/2339\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Keystore · Issue #2339 · ethereum/EIPs · GitHub</a><br>\nReopen to review PR: <a href=\"https://github.com/ethereum/ERCs/pull/364\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Update ERC-2335: Reopen to Review by mratsim · Pull Request #364 · ethereum/ERCs · GitHub</a></p>\n<hr>\n<hr>\n<p>While those EIPs are marked stagnant, they are actually the defacto standard for the consensus layer keys as it is used in the official deposit-cli tool: <a href=\"https://github.com/ethereum/staking-deposit-cli/blob/v2.7.0/staking_deposit/key_handling/key_derivation/tree.py\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">staking-deposit-cli/staking_deposit/key_handling/key_derivation/tree.py at v2.7.0 · ethereum/staking-deposit-cli · GitHub</a></p>\n<p>Consensus client teams use the implementation in BLST: <a href=\"https://github.com/supranational/blst/commit/4e1935eb722289789f5b8f8447415f77b63ff37c\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">keygen.c: add EIP-2333 key derivation procedures. · supranational/blst@4e1935e · GitHub</a></p>\n<p>Both implementations were audited. (By NCC iirc)</p>\n<p><strong>All consensus clients implement them</strong> otherwise they can’t read consensus keys by the official staking tool.</p>\n<ul>\n<li>Lighthouse: <a href=\"https://github.com/sigp/lighthouse/blob/3058b96f2560f1da04ada4f9d8ba8e5651794ff6/book/src/key-management.md#L50-L52\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">lighthouse/book/src/key-management.md at 3058b96f2560f1da04ada4f9d8ba8e5651794ff6 · sigp/lighthouse · GitHub</a></li>\n<li>Lodestar: <a href=\"https://github.com/ChainSafe/lodestar/blob/f2ec0d42365b45495240ce65c27f4c6cdbd2d657/packages/cli/src/cmds/validator/import.ts#L21-L25\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">lodestar/packages/cli/src/cmds/validator/import.ts at f2ec0d42365b45495240ce65c27f4c6cdbd2d657 · ChainSafe/lodestar · GitHub</a></li>\n<li>Nimbus: <a href=\"https://github.com/status-im/nimbus-eth2/blob/dc19b082a9850bf9333e2371ea22230b61c2d501/docs/the_nimbus_book/src/data-dir.md?plain=1#L45\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">nimbus-eth2/docs/the_nimbus_book/src/data-dir.md at dc19b082a9850bf9333e2371ea22230b61c2d501 · status-im/nimbus-eth2 · GitHub</a></li>\n<li>Prysm: <a href=\"https://github.com/prysmaticlabs/prysm/blob/04f231a40083a5c1cf501abc7c46f39e2bf132f1/validator/accounts/doc.go#L1-L5\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">prysm/validator/accounts/doc.go at 04f231a40083a5c1cf501abc7c46f39e2bf132f1 · prysmaticlabs/prysm · GitHub</a></li>\n<li>Teku: <a href=\"https://github.com/Consensys/teku/blob/a11e4c5e0c78be82c68880f74996cc53ce7b6407/infrastructure/bls-keystore/src/main/java/tech/pegasys/teku/bls/keystore/KeyStore.java#L35-L39\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">teku/infrastructure/bls-keystore/src/main/java/tech/pegasys/teku/bls/keystore/KeyStore.java at a11e4c5e0c78be82c68880f74996cc53ce7b6407 · Consensys/teku · GitHub</a></li>\n</ul>\n<p>In the wild there are other implementations or references to EIP/ERC-2333:</p>\n<ul>\n<li><a href=\"https://github.com/ChainSafe/bls-keygen\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - ChainSafe/bls-keygen: Key management for BLS curves written in TypeScript and browser compatible</a></li>\n<li><a href=\"https://github.com/mratsim/constantine/blob/976c8bb/constantine/ethereum_eip2333_bls12381_key_derivation.nim\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">constantine/constantine/ethereum_eip2333_bls12381_key_derivation.nim at 976c8bb215a3f0b21ce3d05f894eb506072a6285 · mratsim/constantine · GitHub</a></li>\n<li><a href=\"https://github.com/paulmillr/bls12-381-keygen\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - paulmillr/bls12-381-keygen: BLS12-381 Key Generation compatible with EIP-2333.</a></li>\n<li><a href=\"https://medium.com/foundry-digital/eth-withdrawals-faq-1e12d0d737f3\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ETH Withdrawals FAQ | Foundry</a></li>\n<li><a href=\"https://github.com/trezor/trezor-firmware/issues/1556#issuecomment-810865665\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Does Trezor Plan To Implement EIP2333 With A Firmware Update? · Issue #1556 · trezor/trezor-firmware · GitHub</a></li>\n</ul>\n<p>I will reopen all EIPs as <em>Review</em> as per comment <a href=\"https://github.com/ethereum/EIPs/issues/2337#issuecomment-1277480974\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Draft EIP: BLS12-381 Key Generation · Issue #2337 · ethereum/EIPs · GitHub</a><br>\nI suggest they are fast-tracked to <strong>Final (Core)</strong></p>\n<p>cc <a class=\"mention\" href=\"https://ethereum-magicians.org/u/carlbeek\">@CarlBeek</a>, the original author.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-2333-erc-2334-erc-2335-bls12-381-key-generation-deterministic-account-hierarchy-keystore/19566\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-2333-erc-2334-erc-2335-bls12-381-key-generation-deterministic-account-hierarchy-keystore/19566","pubDate":"Sat, 06 Apr 2024 14:13:45 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19566"},"source":{"@url":"https://ethereum-magicians.org/t/erc-2333-erc-2334-erc-2335-bls12-381-key-generation-deterministic-account-hierarchy-keystore/19566.rss","#text":"ERC-2333, ERC-2334, ERC-2335: BLS12-381 Key Generation, Deterministic Account Hierarchy, Keystore"}},{"title":"ERC-7679: userOperationBuilder - a common onchain interface for dapps to interact with 4337 wallets","dc:creator":"bumblefudge","category":"ERCs","description":"<p>Opening on behalf of at least two Dereks (Chiang <span class=\"mention\">@derekchiang</span> and Rein <span class=\"mention\">@arein</span>) who are co-authors on this draft ERC:</p><aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/ERCs/pull/361/files\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/ERCs/pull/361/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/ERCs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/ERCs/pull/361/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add ERC: UserOperation Builder</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>arein:feat/erc-7777</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-05\" data-time=\"02:05:40\" data-timezone=\"UTC\">02:05AM - 05 Apr 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/arein\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"arein\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/d/dda926fc4e9a1ad85aaf57a108b6ca5a9ea630a2.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"867665\">\n            arein\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"18 commits changed 1 files with 223 additions and 0 deletions\">\n          <a href=\"https://github.com/ethereum/ERCs/pull/361/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+223</span>\n            <span class=\"removed\">-0</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">When opening a pull request to submit a new EIP, please use the suggested templa<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/ERCs/pull/361\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">te: https://github.com/ethereum/EIPs/blob/master/eip-template.md\n\nWe have a GitHub bot that automatically merges some PRs. It will merge yours immediately if certain criteria are met:\n\n - The PR edits only existing draft PRs.\n - The build passes.\n - Your GitHub username or email address is listed in the 'author' header of all affected PRs, inside &lt;triangular brackets&gt;.\n - If matching on email address, the email address is the one publicly listed on your GitHub profile.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h2><a name=\"initial-draft-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#initial-draft-1\"></a>Initial Draft</h2>\n<h2><a name=\"abstract-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-2\"></a>Abstract</h2>\n<p>Different <a href=\"https://ethereum-magicians.org\">ERC-4337</a> smart account implementations encode their signature, nonce, and calldata differently.  This makes it difficult for DApps, wallets, and smart account toolings to integrate with smart accounts without integrating with account-specific SDKs, which introduces vendor lock-in and hurts smart account adoption.</p>\n<p>We propose a standard way for smart account implementations to put their account-specific encoding logic on-chain.</p>\n<h2><a name=\"motivation-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-3\"></a>Motivation</h2>\n<p>At the moment, to build a <a href=\"https://ethereum-magicians.org\">ERC-4337</a> UserOperation (UserOp for short) for a smart account requires detailed knowledge of how the smart account implementation works, since each implementation is free to encode its nonce, calldata, and signature differently.</p>\n<p>As a simple example, one account might use an execution function called <code>executeFoo</code>, whereas another account might use an execution function called <code>executeBar</code>.  This will result in the <code>calldata</code> being different between the two accounts, even if they are executing the same call.</p>\n<p>Therefore, someone who wants to send a UserOp for a given smart account needs to:</p>\n<ul>\n<li>Figure out which smart account implementation the account is using.</li>\n<li>Correctly encode signature/nonce/calldata given the smart account implementation, or use an account-specific SDK that knows how to do that.</li>\n</ul>\n<p>In practice, this means that most DApps, wallets, and AA toolings today are tied to a specific smart account implementation, resulting in fragmentation and vendor lock-in.</p>\n<h2><a name=\"specification-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-4\"></a>Specification</h2>\n<p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.</p>\n<h3><a name=\"userop-builder-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#userop-builder-5\"></a>UserOp builder</h3>\n<p>To conform to this standard, a smart account implementation must provide a “UserOp builder” contract that implements the IUserOperationBuilder interface, as defined below:</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">struct Execution {\n    address target;\n    uint256 value;\n    bytes callData;\n}\ninterface IUserOperationBuilder {\n\t\t/**\n     * @dev Returns the ERC-4337 EntryPoint that the account implementation\n     * supports.\n     */\n    function entryPoint() external view returns (address);\n    \n    /**\n     * @dev Returns the nonce to use for the UserOp, given the context.\n     * @param smartAccount is the address of the UserOp sender.\n     * @param context is the data required for the UserOp builder to\n     * properly compute the requested field for the UserOp.\n     */\n    function getNonce(\n        address smartAccount,\n        bytes calldata context\n    ) external view returns (uint256);\n\t\n    /**\n     * @dev Returns the calldata for the UserOp, given the context and\n     * the executions.\n     * @param smartAccount is the address of the UserOp sender.\n     * @param executions are (destination, value, callData) tuples that\n     * the UserOp wants to execute.  It's an array so the UserOp can\n     * batch executions.\n     * @param context is the data required for the UserOp builder to\n     * properly compute the requested field for the UserOp. \n     */\n    function getCallData(\n        address smartAccount,\n        Execution[] calldata executions,\n        bytes calldata context\n    ) external view returns (bytes memory);\n    \n    /**\n     * @dev Returns the dummy signature for the UserOp, given the context\n     * and the executions.\n     * @param smartAccount is the address of the UserOp sender.\n     * @param executions are (destination, value, callData) tuples that\n     * the UserOp wants to execute.  It's an array so the UserOp can\n     * batch executions.\n     * @param context is the data required for the UserOp builder to\n     * properly compute the requested field for the UserOp.\n     */\n    function getDummySignature(\n        address smartAccount,\n        Execution[] calldata executions,\n        bytes calldata context\n    ) external view returns (bytes memory signature);\n    \n    /**\n     * @dev Returns a correctly encoded signature, given a UserOp that\n     * has been correctly filled out except for the signature field.\n     * @param smartAccount is the address of the UserOp sender.\n     * @param userOperation is the UserOp.  Every field of the UserOp should\n     * be valid except for the signature field.  The \"PackedUserOperation\"\n     * struct is as defined in ERC-4337.\n     * @param context is the data required for the UserOp builder to\n     * properly compute the requested field for the UserOp.\n     */\n    function getSignature(\n        address smartAccount,\n        PackedUserOperation calldata userOperation,\n        bytes calldata context\n    ) external view returns (bytes memory signature);\n}\n</code></pre>\n<h3><a name=\"using-the-userop-builder-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#using-the-userop-builder-6\"></a>Using the UserOp builder</h3>\n<p>To build a UserOp using the UserOp builder, the building party should proceed as follows:</p>\n<ol>\n<li>Obtain the address of <code>UserOpBuilder</code> and a <code>context</code> from the account owner.  The <code>context</code> is an opaque bytes array from the perspective of the building party.  The smart account implementation may need the <code>context</code> in order to properly figure out the UserOp fields.  See the “Rationale” section for more info.</li>\n<li>Execute a multicall (batched <code>eth_call</code>s) of <code>getNonce</code>, <code>getCallData</code>, <code>getDummySignature</code> with the <code>context</code> and executions.  The building party will now have obtained the nonce, calldata, and dummy signature (see “Rationale” for what a dummy signature is).</li>\n<li>Fill out a UserOp with the data obtained previously.  This UserOp must be valid except for the <code>signature</code> field.  Then call (via <code>eth_call</code>) <code>getSignature</code> with the UserOp and <code>context</code> to obtain a completely valid UserOp.\n<ol>\n<li>Note that a UserOp has a lot more fields than <code>nonce</code>, <code>callData</code>, and <code>signature</code>, but how the building party obtains the other fields is outside of the scope of this document, since only these three fields are heavily dependent on the smart account implementation.</li>\n</ol>\n</li>\n</ol>\n<p>At this point, the building party has a completely valid UserOp that they can then submit to a bundler or do whatever it likes with it.</p>\n<h3><a name=\"using-the-userop-builder-when-the-account-hasnt-been-deployed-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#using-the-userop-builder-when-the-account-hasnt-been-deployed-7\"></a>Using the UserOp builder when the account hasn’t been deployed</h3>\n<p>If the account has yet to be deployed, which means that the building party is looking to send the very first UserOp for this account, then the building party may modify the flow above as follows:</p>\n<ul>\n<li>In addition to the <code>UserOpBuilder</code> address and the <code>context</code>, the building party also obtains the <code>factory</code> and <code>factoryData</code> as defined in ERC-4337.</li>\n<li>When calling one of the view functions on the UserOp builder, the building party may use <code>eth_call</code> to deploy the <code>CounterfactualCall</code> contract with <code>factory</code> and <code>factoryData</code> (see below).  The <code>CounterfactualCall</code> contract would deploy the account before calling the view functions on the UserOp builder.</li>\n<li>When filling out the UserOp, the building party includes <code>factory</code> and <code>factoryData</code>.</li>\n</ul>\n<h3><a name=\"counterfactual-call-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#counterfactual-call-8\"></a>Counterfactual call</h3>\n<p>The counterfactual call contract is inspired by <a href=\"https://ethereum-magicians.org\">ERC-6492</a>, which devised a mechanism to execute <code>isValidSignature</code> (see <a href=\"https://ethereum-magicians.org\">ERC-1271</a>) against a pre-deployed (counterfactual) contract.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">contract CounterfactualCall {\n    \n    error CounterfactualDeployFailed(bytes error);\n    constructor(\n        address smartAccount,\n        address create2Factory, \n        bytes memory factoryData,\n        address userOpBuilder, \n        bytes memory userOpBuilderCalldata\n    ) { \n        if (address(smartAccount).code.length == 0) {\n            (bool success, bytes memory ret) = create2Factory.call(factoryData);\n            if (!success || address(smartAccount).code.length == 0) revert CounterfactualDeployFailed(ret);\n        }\n        assembly {\n            let success := call(gas(), userOpBuilder, 0, add(userOpBuilderCalldata, 0x20), mload(userOpBuilderCalldata), 0, 0)\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, returndatasize())\n            if iszero(success) {\n                revert(ptr, returndatasize())\n            }\n            return(ptr, returndatasize())\n        }\n    }\n    \n}\n</code></pre>\n<p>Here’s an example of calling this contract using the ethers and viem libraries:</p>\n<pre data-code-wrap=\"javascript\"><code class=\"lang-javascript\">// ethers\nconst nonce = await provider.call({\n  data: ethers.utils.concat([\n    counterfactualCallBytecode,\n    (\n      new ethers.utils.AbiCoder()).encode(['address','address', 'bytes', 'address','bytes'], \n      [smartAccount, userOpBuilder, getNonceCallData, factory, factoryData]\n    )\n  ])\n})\n\n// viem\nconst nonce = await client.call({\n  data: encodeDeployData({\n    abi: parseAbi(['constructor(address, address, bytes, address, bytes)']),\n    args: [smartAccount, userOpBuilder, getNonceCalldata, factory, factoryData],\n    bytecode: counterfactualCallBytecode,\n  })\n})\n</code></pre>\n<h2><a name=\"rationale-9\" class=\"anchor\" href=\"https://ethereum-magicians.org#rationale-9\"></a>Rationale</h2>\n<h3><a name=\"context-10\" class=\"anchor\" href=\"https://ethereum-magicians.org#context-10\"></a>Context</h3>\n<p>The <code>context</code> is an array of bytes that encodes whatever data the UserOp builder needs in order to correctly determine the nonce, calldata, and signature.  Presumably, the <code>context</code> is constructed by the account owner, with the help of a wallet software.</p>\n<p>Here we outline one possible use of <code>context</code>: delegation.  Say the account owner wants to delegate a transaction to be executed by the building party.  The account owner could encode a signature of the public key of the building party inside the <code>context</code>.  Let’s call this signature from the account owner the <code>authorization</code>.</p>\n<p>Then, when the building party fills out the UserOp, it would fill the <code>signature</code> field with a signature generated by its own private key.  When it calls <code>getSignature</code> on the UserOp builder, the UserOp builder would extract the <code>authorization</code> from the <code>context</code> and concatenates it with the building party’s signature.  The smart account would presumably be implemented such that it would recover the building party’s public key from the signature, and check that the public key was in fact signed off by the <code>authorization</code>.  If the check succeeds, the smart account would execute the UserOp, thus allowing the building party to execute a UserOp on the user’s behalf.</p>\n<h3><a name=\"dummy-signature-11\" class=\"anchor\" href=\"https://ethereum-magicians.org#dummy-signature-11\"></a>Dummy signature</h3>\n<p>The “dummy signature” refers to the signature used in a UserOp sent to a bundler for estimating gas (via <code>eth_estimateUserOperationGas</code>).  A dummy signature is needed because, at the time the bundler estimates gas, a valid signature does not exist yet, since the valid signature itself depends on the gas values of the UserOp, creating a circular dependency.  To break the circular dependency, a dummy signature is used.</p>\n<p>However, the dummy signature is not just a fixed value that any smart account can use.  The dummy signature must be constructed such that it would cause the UserOp to use about as much gas as a real signature would.  Therefore, the dummy signature varies based on the specific validation logic that the smart account uses to validate the UserOp, making it dependent on the smart account implementation.</p>\n<h2><a name=\"backwards-compatibility-12\" class=\"anchor\" href=\"https://ethereum-magicians.org#backwards-compatibility-12\"></a>Backwards Compatibility</h2>\n<p>This ERC is intended to be backwards compatible with all ERC-4337 smart accounts as of EntryPoint 0.7.</p>\n<p>For smart accounts deployed against EntryPoint 0.6, the <code>IUserOperationBuilder</code> interface needs to be modified such that the <code>PackedUserOperation</code> struct is replaced with the corresponding struct in EntryPoint 0.6.</p>\n<h2><a name=\"security-considerations-13\" class=\"anchor\" href=\"https://ethereum-magicians.org#security-considerations-13\"></a>Security Considerations</h2>\n<p>TODO</p>\n<h2><a name=\"copyright-14\" class=\"anchor\" href=\"https://ethereum-magicians.org#copyright-14\"></a>Copyright</h2>\n<p>Copyright and related rights waived via <a href=\"https://ethereum-magicians.org\">CC0</a>.</p>\n            <p><small>4 posts - 3 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7679-useroperationbuilder-a-common-onchain-interface-for-dapps-to-interact-with-4337-wallets/19547\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7679-useroperationbuilder-a-common-onchain-interface-for-dapps-to-interact-with-4337-wallets/19547","pubDate":"Fri, 05 Apr 2024 02:32:00 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19547"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7679-useroperationbuilder-a-common-onchain-interface-for-dapps-to-interact-with-4337-wallets/19547.rss","#text":"ERC-7679: userOperationBuilder - a common onchain interface for dapps to interact with 4337 wallets"}},{"title":"EIP-7675: Retroactively Included EIPs","dc:creator":"timbeiko","category":"EIPs","description":"<p>Discussion thread for <a href=\"https://github.com/ethereum/EIPs/pull/8389\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Add EIP: Retroactively Included EIPs by timbeiko · Pull Request #8389 · ethereum/EIPs · GitHub</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7675-retroactively-included-eips/19541\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7675-retroactively-included-eips/19541","pubDate":"Thu, 04 Apr 2024 20:14:06 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19541"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7675-retroactively-included-eips/19541.rss","#text":"EIP-7675: Retroactively Included EIPs"}},{"title":"EIP-7676: EOF - Prepare for Address Space Extension","dc:creator":"shemnon","category":"EIPs","description":"<p>A very small change to EOF to allow future extension of the address space.</p>\n<aside class=\"onebox githubpullrequest\" data-onebox-src=\"https://github.com/ethereum/EIPs/pull/8385\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/ethereum/EIPs/pull/8385\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/ethereum/EIPs</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n\n\n\n    <div class=\"github-icon-container\" title=\"Pull Request\">\n      <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 12 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z\"></path></svg>\n    </div>\n\n  <div class=\"github-info-container\">\n\n\n\n      <h4>\n        <a href=\"https://github.com/ethereum/EIPs/pull/8385\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add EIP: EOF - Prepare for Address Space Extension</a>\n      </h4>\n\n    <div class=\"branches\">\n      <code>ethereum:master</code> ← <code>shemnon:EOF/prepare-for-ase</code>\n    </div>\n\n      <div class=\"github-info\">\n        <div class=\"date\">\n          opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-04\" data-time=\"00:41:55\" data-timezone=\"UTC\">12:41AM - 04 Apr 24 UTC</span>\n        </div>\n\n        <div class=\"user\">\n          <a href=\"https://github.com/shemnon\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <img alt=\"shemnon\" src=\"https://ethereum-magicians.org/uploads/default/original/2X/1/10d4d31592860fc2daad80db04d0b789cc97f047.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"826F6E\">\n            shemnon\n          </a>\n        </div>\n\n        <div class=\"lines\" title=\"1 commits changed 2 files with 97 additions and 8 deletions\">\n          <a href=\"https://github.com/ethereum/EIPs/pull/8385/files\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n            <span class=\"added\">+97</span>\n            <span class=\"removed\">-8</span>\n          </a>\n        </div>\n      </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">Update EOF opcodes so addresses are not trimmed during execution,\nreverting with<span class=\"show-more-container\"><a href=\"https://github.com/ethereum/EIPs/pull/8385\" target=\"_blank\" rel=\"noopener nofollow ugc\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\"> an exception if the address is invalid.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>TL;DR all operations that use an address will not trim the high 12 bytes / 96 bits, and (for now) exceptionally halt if they are not zero.  Only <code>BALANCE</code> is not otherwise spoken for within EOF. Future uses of these high bits would necessarily change this behavior. but they are not defined in this EIP.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/eip-7676-eof-prepare-for-address-space-extension/19537\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/eip-7676-eof-prepare-for-address-space-extension/19537","pubDate":"Thu, 04 Apr 2024 15:42:11 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19537"},"source":{"@url":"https://ethereum-magicians.org/t/eip-7676-eof-prepare-for-address-space-extension/19537.rss","#text":"EIP-7676: EOF - Prepare for Address Space Extension"}},{"title":"ERC-7677: Paymaster Web Service Capability","dc:creator":"lsr","category":"ERCs","description":"<p>Thread to discuss <a href=\"https://github.com/ethereum/ERCs/pull/360/files\" rel=\"noopener nofollow ugc\">ERC-7677</a>.</p>\n            <p><small>8 posts - 4 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7677-paymaster-web-service-capability/19530\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7677-paymaster-web-service-capability/19530","pubDate":"Thu, 04 Apr 2024 02:18:56 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19530"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7677-paymaster-web-service-capability/19530.rss","#text":"ERC-7677: Paymaster Web Service Capability"}},{"title":"ERC-7674: Temporary Approval Extension for ERC-20","dc:creator":"xshape","category":"ERCs","description":"<p>Among all cases of <code>ERC-20</code> token transactions, a popular one is when smart contracts approve token spending to other contracts. Often tokens are approved for only one transaction.</p>\n<p>Following the <code>ERC-20</code> standard, if a smart contract wants to approve the spending of tokens to another smart contract for only one transaction, this causes the allowance saved in storage to be updated and retrieved.</p>\n<p>Token allowances utilising <code>EIP-1153</code> transient storage are a cheaper alternative to the regular storage allowances.</p>\n<p>We suggest adding a new <code>ERC-7674</code>: <a href=\"https://github.com/ethereum/ERCs/pull/358\" rel=\"noopener nofollow ugc\">GitHub PR</a>.</p>\n<p><a href=\"https://github.com/byshape/transient-token/blob/main/contracts/TransientToken.sol\" rel=\"noopener nofollow ugc\">Proposed implementation</a></p>\n            <p><small>5 posts - 3 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-7674-temporary-approval-extension-for-erc-20/19521\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-7674-temporary-approval-extension-for-erc-20/19521","pubDate":"Wed, 03 Apr 2024 09:37:19 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19521"},"source":{"@url":"https://ethereum-magicians.org/t/erc-7674-temporary-approval-extension-for-erc-20/19521.rss","#text":"ERC-7674: Temporary Approval Extension for ERC-20"}},{"title":"Proposal for a New ERC: Token Transfer Validation","dc:creator":"nathanglb","category":"ERCs","description":"<p>ERC20/ERC721/ERC1155 are all token standards that have existed for many years.  The battle over creator royalties has been ongoing for some time now, and Limit Break has built an extension to these standards that allow creators to put custom controls in place for transfers.  The extension, known as Creator Token Standards (or ERC721C) is quickly becoming the standard of record for creators that wish to enforce royalties on their collections, or perhaps to build other cool gamified features for tokens.</p>\n<p>To date, Magic Eden and OpenSea marketplaces have recently adopted use of ERC721C standards for creator earnings/royalty enforcement.  There are many creators who want to adopt ERC721C, so now seems to be an appropriate time to start formalizing an ERC that standardizes this extension to the core token standards for creators who wish to use it.</p>\n            <p><small>4 posts - 3 participants</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/proposal-for-a-new-erc-token-transfer-validation/19506\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/proposal-for-a-new-erc-token-transfer-validation/19506","pubDate":"Tue, 02 Apr 2024 19:59:38 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19506"},"source":{"@url":"https://ethereum-magicians.org/t/proposal-for-a-new-erc-token-transfer-validation/19506.rss","#text":"Proposal for a New ERC: Token Transfer Validation"}},{"title":"ERC-2510: Enhanced Liquidity and Value Backing Token Standard","dc:creator":"catiga","category":"Tokens","description":"<h1><a name=\"erc-2510-enhanced-liquidity-and-value-backing-token-standard-1\" class=\"anchor\" href=\"https://ethereum-magicians.org#erc-2510-enhanced-liquidity-and-value-backing-token-standard-1\"></a>ERC-2510: Enhanced Liquidity and Value Backing Token Standard</h1>\n<h2><a name=\"abstract-2\" class=\"anchor\" href=\"https://ethereum-magicians.org#abstract-2\"></a>Abstract</h2>\n<p>ERC-2510 is an innovative extension to the ERC-20 standard, establishing an intrinsic value and liquidity model within token contracts. By integrating a base liquidity pool, ERC-2510 aims to mitigate the risk associated with reliance on external liquidity providers. This ensures token stability and retains value even in the absence of third-party market makers.</p>\n<h2><a name=\"motivation-3\" class=\"anchor\" href=\"https://ethereum-magicians.org#motivation-3\"></a>Motivation</h2>\n<p>In light of recent market events highlighting the vulnerabilities of token valuations dependent on external liquidity pools, there is a clear need for a more resilient token standard that can withstand sudden liquidity withdrawal. ERC-2510 seeks to address this by building a self-sustaining value support mechanism within the token contract itself.</p>\n<h2><a name=\"specification-4\" class=\"anchor\" href=\"https://ethereum-magicians.org#specification-4\"></a>Specification</h2>\n<h3><a name=\"core-components-5\" class=\"anchor\" href=\"https://ethereum-magicians.org#core-components-5\"></a>Core Components</h3>\n<ul>\n<li><strong>Base Liquidity Pool (BLP)</strong>: A permanent reserve within the token contract that provides a minimum value for each token.</li>\n<li><strong>Value Adjustment Function (VAF)</strong>: A mechanism for the token holders to enhance the token’s intrinsic value by contributing additional liquidity to the BLP.</li>\n<li><strong>Token Value Retrieval (TVR)</strong>: Allows token holders to burn their tokens in exchange for a proportional share of the BLP, establishing a redeemable base value.</li>\n</ul>\n<h3><a name=\"interface-6\" class=\"anchor\" href=\"https://ethereum-magicians.org#interface-6\"></a>Interface</h3>\n<p>The ERC2510 interface extends the ERC20 and ERC20Metadata interfaces with additional liquidity management functionalities.</p>\n<p>solidityCopy code</p>\n<pre><code class=\"lang-auto\">pragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IERC2510 is IERC20, IERC20Metadata {\n    // Events and Functions declaration\n}\n</code></pre>\n<h3><a name=\"solidity-implementation-7\" class=\"anchor\" href=\"https://ethereum-magicians.org#solidity-implementation-7\"></a>Solidity Implementation</h3>\n<h4><a name=\"erc2510-core-contract-8\" class=\"anchor\" href=\"https://ethereum-magicians.org#erc2510-core-contract-8\"></a>ERC2510 Core Contract</h4>\n<p>solidityCopy code</p>\n<pre><code class=\"lang-auto\">contract ERC2510 is IERC2510 {\n    // Implementation of the ERC2510 functionalities.\n}\n</code></pre>\n<h4><a name=\"liquidity-management-9\" class=\"anchor\" href=\"https://ethereum-magicians.org#liquidity-management-9\"></a>Liquidity Management</h4>\n<p>solidityCopy code</p>\n<pre><code class=\"lang-auto\">contract ERC2510Liquidity {\n    // Liquidity-related functionalities.\n}\n</code></pre>\n<h3><a name=\"implementation-considerations-10\" class=\"anchor\" href=\"https://ethereum-magicians.org#implementation-considerations-10\"></a>Implementation Considerations</h3>\n<ul>\n<li>The base liquidity pool must be designed with security as a priority, implementing safeguards against unauthorized access and ensuring immutability of the pool’s value.</li>\n<li>Smart contract functions will be optimized for gas efficiency and avoid unnecessary complexity.</li>\n<li>Contract will include event logs for all actions for transparency and auditability.</li>\n</ul>\n<h2><a name=\"security-considerations-11\" class=\"anchor\" href=\"https://ethereum-magicians.org#security-considerations-11\"></a>Security Considerations</h2>\n<p>The security analysis section details potential risks, such as reentrancy attacks, and outlines the strategies implemented to mitigate these risks. Additionally, the contract will undergo security audits by reputable third-party auditors before deployment.</p>\n<h2><a name=\"reference-implementation-and-test-cases-12\" class=\"anchor\" href=\"https://ethereum-magicians.org#reference-implementation-and-test-cases-12\"></a>Reference Implementation and Test Cases</h2>\n<p>A reference implementation of ERC2510 will be available in a public GitHub repository, alongside comprehensive test cases covering a wide array of scenarios, including edge cases and potential attack vectors.</p>\n<h2><a name=\"deployment-and-transition-13\" class=\"anchor\" href=\"https://ethereum-magicians.org#deployment-and-transition-13\"></a>Deployment and Transition</h2>\n<p>The document will provide a detailed plan for deploying ERC2510 tokens and outline strategies for transitioning from existing ERC20 tokens if desired.</p>\n<h2><a name=\"real-world-use-cases-14\" class=\"anchor\" href=\"https://ethereum-magicians.org#real-world-use-cases-14\"></a>Real-world Use Cases</h2>\n<p>Case studies will illustrate how ERC2510 can be beneficial in various scenarios, from creating stablecoins to launching new tokens with embedded liquidity features.</p>\n<h2><a name=\"conclusion-15\" class=\"anchor\" href=\"https://ethereum-magicians.org#conclusion-15\"></a>Conclusion</h2>\n<p>ERC-2510 has the potential to revolutionize the token standard by empowering tokens with inherent value and liquidity. This standard is poised to contribute significantly to the DeFi ecosystem, providing a foundation for more stable and reliable token economics.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethereum-magicians.org/t/erc-2510-enhanced-liquidity-and-value-backing-token-standard/19478\">Read full topic</a></p>","link":"https://ethereum-magicians.org/t/erc-2510-enhanced-liquidity-and-value-backing-token-standard/19478","pubDate":"Mon, 01 Apr 2024 15:34:16 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethereum-magicians.org-topic-19478"},"source":{"@url":"https://ethereum-magicians.org/t/erc-2510-enhanced-liquidity-and-value-backing-token-standard/19478.rss","#text":"ERC-2510: Enhanced Liquidity and Value Backing Token Standard"}}]}}}