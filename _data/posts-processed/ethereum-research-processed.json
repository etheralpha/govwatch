{"rss":{"@version":"2.0","@xmlns:discourse":"http://www.discourse.org/","@xmlns:atom":"http://www.w3.org/2005/Atom","@xmlns:dc":"http://purl.org/dc/elements/1.1/","channel":{"title":"Ethereum Research - Latest topics","link":"https://ethresear.ch/latest","description":"Latest topics","lastBuildDate":"Sat, 21 Sep 2024 20:40:04 +0000","atom:link":{"@href":"https://ethresear.ch/latest.rss","@rel":"self","@type":"application/rss+xml"},"item":[{"title":"Using FRI for DA with Optimistic Correctable Commitments in Rollups","dc:creator":"snjax","category":"ZK Rollup","description":"<h2><a name=\"p-50034-abstract-1\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-abstract-1\"></a>Abstract</h2>\n<p>Scaling blockchains and transitioning from Web2 to Web3 require efficient solutions for storing and accessing large volumes of data. We present a new technique for using FRI commitments combined with optimistic correctable commitments to implement Data Availability (DA). This allows for a significant reduction in the volume of data stored on-chain, by hundreds and thousands of times compared to the volume of data served by the distributed network. For each cluster of megabytes, it is sufficient to store only a short 32-byte hash on-chain. In the context of rollups, we introduce a new commitment construction that ensures reliable storage and data availability when used in rollups instead of the standard commitment <span class=\"math\">C</span>. Combined with recursive rollups, our solution paves the way for unlimited blockchain scaling and the transfer of Web2 to Web3, ensuring reliability, security, and data availability.</p>\n<h2><a name=\"p-50034-introduction-2\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-introduction-2\"></a>Introduction</h2>\n<h3><a name=\"p-50034-the-problem-of-scaling-and-data-storage-in-blockchain-3\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-the-problem-of-scaling-and-data-storage-in-blockchain-3\"></a>The Problem of Scaling and Data Storage in Blockchain</h3>\n<p>Blockchains produce enormous amounts of data, and efficient management of this data is critical for their scaling and widespread application in Web3. Traditional solutions, such as Filecoin, do not provide reliable data storage at the consensus level. Other solutions, like Arweave, while offering storage reliability, are not suitable for dynamic Web3 applications due to the impossibility of modifying or deleting data.</p>\n<p>Modern solutions, such as EthStorage and 0g, aim to solve these problems but face limitations:</p>\n<ul>\n<li><strong>EthStorage</strong> uses data replication, requiring the storage of multiple copies of the same volume of data to ensure reliability.</li>\n<li><strong>0g</strong> applies Reed-Solomon codes for data sharding but uses KZG10 commitments, which are not optimal for building recursion — a key mechanism for scaling through recursive rollups.</li>\n</ul>\n<h3><a name=\"p-50034-the-potential-of-our-solution-4\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-the-potential-of-our-solution-4\"></a>The Potential of Our Solution</h3>\n<ul>\n<li>\n<p><strong>Scaling through recursive rollups</strong>: Support for recursive rollups allows for a significant increase in network throughput. This is achieved by processing large volumes of data off-chain and storing only minimal commitments on-chain. This approach provides unlimited scaling without compromising security and decentralization.</p>\n</li>\n<li>\n<p><strong>Ease of Use through Account Abstraction</strong>: Despite the technical complexity of recursive rollups, they remain transparent for end users and developers. With the implementation of account abstraction, users don’t need to concern themselves with which specific rollup stores their funds — they see a total balance and can perform operations without additional complications. Similarly, developers of decentralized applications can create services without worrying about which rollup processes their data. This is akin to how Bitcoin wallets use UTXO abstraction: users see their total balance without delving into technical details. Thus, our solution provides scalability without compromising convenience and accessibility for users and developers.</p>\n</li>\n<li>\n<p><strong>Economical data storage</strong>: Our solution allows storing hundreds or thousands of times less information on-chain compared to the volume of data processed off-chain. For each megabyte of data distributed in the network, only a short 32-byte hash is stored on the blockchain. This significantly reduces storage and transaction costs, making the technology more accessible for mass adoption.</p>\n</li>\n<li>\n<p><strong>Flexibility through off-chain block transfer</strong>: Using recursive rollup technology, blocks can subsequently be moved off-chain without losing data integrity and availability. This provides flexibility in network architecture and optimizes resource usage.</p>\n</li>\n<li>\n<p><strong>Transformation of Web2 to Web3</strong>: Our technology provides infrastructure for transferring existing Web2 applications and services to the decentralized Web3 environment. This opens up new opportunities for companies, allowing them to leverage the advantages of blockchain — security, transparency, and decentralization — without the need to completely rethink their business models.</p>\n</li>\n<li>\n<p><strong>Competitive advantage</strong>: Unlike existing solutions, our proposal combines efficiency, scalability, and compatibility with advanced technologies such as recursive rollups. This creates a significant competitive advantage and sets new standards in the industry.</p>\n</li>\n</ul>\n<h3><a name=\"p-50034-our-goal-5\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-our-goal-5\"></a>Our Goal</h3>\n<p>We propose a solution that allows the use of FRI (Fast Reed-Solomon Interactive Oracle Proofs of Proximity) for DA with optimistic correctable commitments. This provides:</p>\n<ul>\n<li><strong>Efficient data storage</strong>: Storing only a small commitment (e.g., 32 bytes) on-chain for data clusters of several megabytes.</li>\n<li><strong>Compatibility with recursive rollups</strong>: Reducing the volume of data required for on-chain storage, contributing to unlimited blockchain scaling.</li>\n<li><strong>Data reliability and availability</strong>: Ensuring data correctness and availability even in the presence of errors or malicious actions.</li>\n</ul>\n<h2><a name=\"p-50034-preliminary-information-6\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-preliminary-information-6\"></a>Preliminary Information</h2>\n<h3><a name=\"p-50034-fri-and-its-application-7\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-fri-and-its-application-7\"></a>FRI and Its Application</h3>\n<p><strong>FRI</strong> is a method used in zkSNARK protocols to verify the proximity of data to Reed-Solomon code. It allows creating compact commitments to large volumes of data and provides efficient verification of their correctness.</p>\n<h3><a name=\"p-50034-problems-when-using-fri-for-da-8\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-problems-when-using-fri-for-da-8\"></a>Problems When Using FRI for DA</h3>\n<p>Direct implementation of FRI for DA faces problems:</p>\n<ul>\n<li><strong>Incorrect commitments</strong>: A malicious participant can present a commitment with errors in correction codes. If these errors are few enough, such a commitment will be accepted by the network.</li>\n<li><strong>Lack of connection between commitment and data</strong>: Even if the data is recovered, establishing a connection with the original commitment is difficult due to possible errors in the original commitment.</li>\n</ul>\n<h2><a name=\"p-50034-our-solution-optimistic-correctable-commitments-9\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-our-solution-optimistic-correctable-commitments-9\"></a>Our Solution: Optimistic Correctable Commitments</h2>\n<p>We propose an extension over FRI that solves these problems by introducing a new commitment construction <span class=\"math\">\\mathcal{C} = (C, \\chi, \\{a_i\\})</span>, where</p>\n<p><span class=\"math\">\\mathbf{D}</span> - data we want to store in the network,</p>\n<p><span class=\"math\">C=\\mathrm{Commit}(\\mathbf{D})</span> - commitment to the data,</p>\n<p><span class=\"math\">\\mathrm{Shard}_j</span> - shards into which the data is divided using Reed-Solomon codes,</p>\n<p><span class=\"math\">H_j = \\mathrm{Hash}(\\mathrm{Shard}_j)</span> - hash of the shard,</p>\n<p><span class=\"math\">\\chi = \\mathrm{Challenge}(C, \\{H_j\\})</span> - pseudorandom challenge,</p>\n<p><span class=\"math\">\\{a_i\\}</span> - result of opening the commitment <span class=\"math\">C</span> at <span class=\"math\">\\chi</span>.</p>\n<p>This construction provides:</p>\n<ul>\n<li><strong>Connection between data and commitment</strong>: Ensures that the data corresponds to the commitment and can be verified.</li>\n<li><strong>Possibility of error correction</strong>: The system is capable of detecting and correcting errors without trusting validators or clients.</li>\n<li><strong>Use in rollups</strong>: Provides mechanisms for integration with rollups, allowing them to use <span class=\"math\">\\mathcal{C}</span> instead of the standard commitment <span class=\"math\">C</span>.</li>\n</ul>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/6/9/69b5279febeda88a190490a8338a91e9431cf046.svg\" alt=\"fig0\" data-base62-sha1=\"f58fUSn5YWxHqoeeth2zDte5gfc\" width=\"206\" height=\"500\"></p>\n<h2><a name=\"p-50034-implementation-details-10\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-implementation-details-10\"></a>Implementation Details</h2>\n<h3><a name=\"p-50034-data-structure-and-sharding-11\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-data-structure-and-sharding-11\"></a>Data Structure and Sharding</h3>\n<h4><a name=\"p-50034-data-representation-12\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-data-representation-12\"></a>Data Representation</h4>\n<p>Let the data <span class=\"math\">D</span> be represented as a matrix of size <span class=\"math\">T \\times K</span>, where <span class=\"math\">|D| = T \\cdot K</span>. We consider the matrix as a function of columns.</p>\n<h4><a name=\"p-50034-domain-extension-13\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-domain-extension-13\"></a>Domain Extension</h4>\n<p>We apply domain extension to the matrix, increasing the number of columns from <span class=\"math\">K</span> to <span class=\"math\">N</span> using Reed-Solomon codes and the Discrete Fourier Transform (DFT). This allows for redundancy for error correction.</p>\n<h4><a name=\"p-50034-data-sharding-14\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-data-sharding-14\"></a>Data Sharding</h4>\n<p>The resulting matrix has a size of <span class=\"math\">T \\times N</span>. Each column <span class=\"math\">\\text{Shard}_j</span> (for <span class=\"math\">j = 1, \\dots, N</span>) is considered as a separate data shard. These shards are distributed among network nodes for storage.</p>\n<h4><a name=\"p-50034-shard-hashing-15\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-shard-hashing-15\"></a>Shard Hashing</h4>\n<p>Each shard is hashed using a cryptographic hash function:</p>\n<p><span class=\"math\">\nH_j = \\mathrm{Hash}(\\text{Shard}_j).\n</span></p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/a/b/aba4dab24d942f940b86fe1914cac86be03f1d1b.svg\" alt=\"fig1\" data-base62-sha1=\"ouqQstZhhfBSKlUSx51fVEeWksP\" width=\"690\" height=\"362\"></p>\n<h3><a name=\"p-50034-commitment-generation-and-opening-16\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-commitment-generation-and-opening-16\"></a>Commitment Generation and Opening</h3>\n<h4><a name=\"p-50034-commitment-to-data-17\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-commitment-to-data-17\"></a>Commitment to Data</h4>\n<p>We apply FRI to the matrix, considering it as a function of rows. This allows obtaining a commitment <span class=\"math\">C = \\mathrm{Commit}(D)</span>, compactly representing all the data.</p>\n<h4><a name=\"p-50034-random-point-generation-18\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-random-point-generation-18\"></a>Random Point Generation</h4>\n<p>We use the <strong>Fiat-Shamir heuristic</strong> to calculate a pseudorandom point <span class=\"math\">\\chi</span>, dependent on the commitment and shard hashes:</p>\n<p><span class=\"math\">\n\\chi = \\mathrm{Challenge}(C, H_1, H_2, \\dots, H_N).\n</span></p>\n<h4><a name=\"p-50034-commitment-opening-19\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-commitment-opening-19\"></a>Commitment Opening</h4>\n<p>We perform a polynomial opening of the commitment <span class=\"math\">C</span> at point <span class=\"math\">\\chi</span>, obtaining proof <span class=\"math\">\\{a_i\\}</span>:</p>\n<p><span class=\"math\">\n\\{a_i\\} = \\mathrm{Open}(C, \\chi).\n</span></p>\n<h3><a name=\"p-50034-new-commitment-construction-for-rollups-20\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-new-commitment-construction-for-rollups-20\"></a>New Commitment Construction for Rollups</h3>\n<h4><a name=\"p-50034-use-in-rollups-21\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-use-in-rollups-21\"></a>Use in Rollups</h4>\n<p>When applied in rollups, <span class=\"math\">\\mathcal{C}</span> is used instead of the standard commitment <span class=\"math\">C</span>.</p>\n<h3><a name=\"p-50034-shard-correctness-verification-22\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-shard-correctness-verification-22\"></a>Shard Correctness Verification</h3>\n<p>For each shard <span class=\"math\">\\text{Shard}_j</span>, a node can verify it without the need to store all the data:</p>\n<ol>\n<li>\n<p><strong>Calculate the shard value at point <span class=\"math\">\\chi</span></strong>:</p>\n<p><span class=\"math\">\ns_j = \\mathrm{Eval}(\\text{Shard}_j, \\chi).\n</span></p>\n</li>\n<li>\n<p><strong>Calculate the opening value at the point corresponding to the shard</strong>:</p>\n<p><span class=\"math\">\ns'_j = \\mathrm{Eval}(\\{a_i\\}, P_j),\n</span></p>\n<p>where <span class=\"math\">P_j</span> is the point associated with sharding.</p>\n</li>\n<li>\n<p><strong>Compare values</strong>:</p>\n<p><span class=\"math\">\ns_j \\stackrel{?}{=} s'_j.\n</span></p>\n</li>\n</ol>\n<p>If the equality holds, shard <span class=\"math\">\\text{Shard}_j</span> is considered correct.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/0/9/09b2e020e39c1b237b66c4e6c51d7b41153b6825.svg\" alt=\"fig2\" data-base62-sha1=\"1nNxfgrSQddOZezAyxmCp64HaLP\" width=\"690\" height=\"414\"></p>\n<h4><a name=\"p-50034-correctness-lemma-23\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-correctness-lemma-23\"></a>Correctness Lemma</h4>\n<p><strong>Lemma</strong>: If for shard <span class=\"math\">\\text{Shard}_j</span> the equality <span class=\"math\">s_j = a_j</span> holds, then with high probability <span class=\"math\">\\text{Shard}_j</span> is a correct shard of data <span class=\"math\">D</span>.</p>\n<p><strong>Proof</strong>:</p>\n<p>Using the <strong>Schwartz-Zippel lemma</strong>, we know that two different polynomials of degree <span class=\"math\">d</span> can coincide in no more than <span class=\"math\">d</span> points out of <span class=\"math\">|F|</span>, where <span class=\"math\">F</span> is the field. Since <span class=\"math\">\\chi</span> is chosen randomly, the probability that an incorrect shard will pass the check is <span class=\"math\">\\frac{d}{|F|}</span>, which is negligibly small for large fields.</p>\n<h2><a name=\"p-50034-system-architecture-24\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-system-architecture-24\"></a>System Architecture</h2>\n<h3><a name=\"p-50034-data-writing-process-25\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-data-writing-process-25\"></a>Data Writing Process</h3>\n<ol>\n<li>\n<p><strong>Transaction Initiation</strong>:</p>\n<ul>\n<li>The client forms a transaction with data <span class=\"math\">\\mathbf{D}</span> and metadata <span class=\"math\">\\mathcal{M}</span>:\n<ul>\n<li>Commitment <span class=\"math\">C</span>.</li>\n<li>Shard hashes <span class=\"math\">\\{H_j\\}</span>.</li>\n<li>Opening <span class=\"math\">\\pi = \\{a_i\\}</span> at point <span class=\"math\">\\chi</span>.</li>\n<li>Construction <span class=\"math\">\\mathcal{C} = (C, \\chi, \\{a_i\\})</span>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Transaction Validation</strong>:</p>\n<ul>\n<li>Validators check the client’s signature.</li>\n<li>Verify the correctness of metadata and opening <span class=\"math\">\\pi</span>.</li>\n<li>Verify the correctness of <span class=\"math\">\\mathcal{C}</span>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Transaction Signing</strong>:</p>\n<ul>\n<li>If all checks are successful, validators sign the transaction and transmit metadata and shards to network nodes.</li>\n</ul>\n</li>\n<li>\n<p><strong>Shard Distribution</strong>:</p>\n<ul>\n<li>Data <span class=\"math\">\\mathbf{D}</span> is sharded, and shards <span class=\"math\">\\{\\text{Shard}_j\\}</span> are distributed among network nodes.</li>\n</ul>\n</li>\n<li>\n<p><strong>Node Verification</strong>:</p>\n<ul>\n<li>Nodes receive their shards and check:\n<ul>\n<li>Correspondence of shard hash <span class=\"math\">H_j</span> and received shard <span class=\"math\">\\text{Shard}_j</span>.</li>\n<li>Correctness of opening <span class=\"math\">\\pi</span> and construction <span class=\"math\">\\mathcal{C}</span>.</li>\n<li>If all checks are successful, nodes sign the transaction, after which the transaction can be included in a block.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Metadata Storage</strong>:</p>\n<ul>\n<li>Nodes parse the verified metadata into fragments, sign them using threshold signature, and distribute these fragments for storage among themselves.</li>\n</ul>\n</li>\n</ol>\n<h3><a name=\"p-50034-optimistic-error-correction-26\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-optimistic-error-correction-26\"></a>Optimistic Error Correction</h3>\n<p>If errors or inconsistencies are detected:</p>\n<ul>\n<li><strong>Decentralized Recovery</strong>: Nodes jointly recover correct data using the redundancy of Reed-Solomon codes.</li>\n<li><strong>Fraud Proofs</strong>: Nodes can form fraud proofs if they detect incorrect actions.</li>\n<li><strong>Use of SPoRA Mining</strong>: In the process of SPoRA mining, nodes find in their data structure the data for which they can receive a reward. We have improved SPoRA mining to incentivize the node to recover all original data and commitments for the sectors involved in mining. Thus, to check the correctness of shard hashes and commitment, the miner only needs to compare several hashes, which minimally uses their resources but stimulates the miner to actively check and recover data.</li>\n</ul>\n<h2><a name=\"p-50034-classification-and-elimination-of-errors-27\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-classification-and-elimination-of-errors-27\"></a>Classification and Elimination of Errors</h2>\n<h3><a name=\"p-50034-types-of-defects-28\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-types-of-defects-28\"></a>Types of Defects</h3>\n<h4><a name=\"p-50034-uncorrectable-defects-29\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-uncorrectable-defects-29\"></a>Uncorrectable Defects</h4>\n<ul>\n<li><strong>Incorrect metadata structure</strong>: Inability to interpret <span class=\"math\">C</span>, <span class=\"math\">\\pi</span>, <span class=\"math\">\\{H_j\\}</span>, <span class=\"math\">\\mathcal{C}</span>.</li>\n<li><strong>Mismatch between hash and shard</strong>: <span class=\"math\">H_j \\neq \\mathrm{Hash}(\\text{Shard}_j)</span>.</li>\n</ul>\n<p><strong>Reaction</strong>: The transaction is rejected by validators and nodes.</p>\n<h4><a name=\"p-50034-metadata-inconsistency-30\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-metadata-inconsistency-30\"></a>Metadata Inconsistency</h4>\n<ul>\n<li><strong>Incorrect opening</strong>: Checking <span class=\"math\">\\pi</span> returns false.</li>\n<li><strong>Mismatch in shard verification</strong>: <span class=\"math\">s_j \\neq a_j</span>.</li>\n<li><strong>Incorrect calculation of <span class=\"math\">\\chi</span></strong>: <span class=\"math\">\\chi</span> does not correspond to the calculated value from <span class=\"math\">C</span> and <span class=\"math\">\\{H_j\\}</span>.</li>\n</ul>\n<p><strong>Reaction</strong>:</p>\n<ul>\n<li>Nodes form <strong>fraud proofs</strong>, proving incorrectness.</li>\n<li>Validators who proposed such a transaction are subject to penalties.</li>\n</ul>\n<h4><a name=\"p-50034-correctable-defects-31\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-correctable-defects-31\"></a>Correctable Defects</h4>\n<ul>\n<li>\n<p><strong>Errors in correction codes</strong>: Small errors in shards that can be corrected.</p>\n<p>Circuit for this fraud proof for 1 MiB cluster requires <span class=\"math\">\\sim 3 \\cdot 2^{15}</span> <span class=\"math\">(16 \\to 8)</span> poseidon2 hashes.</p>\n</li>\n<li>\n<p><strong>Partial incorrectness of shards</strong>: Some shards are damaged but can be recovered from others.</p>\n<p>Circuit for this fraud proof for 1 MiB cluster requires <span class=\"math\">\\sim 2^{15}</span> <span class=\"math\">(16 \\to 8)</span> poseidon2 hashes.</p>\n</li>\n</ul>\n<p><strong>Reaction</strong>:</p>\n<ul>\n<li>Nodes use data redundancy to recover correct shards in the mining process.</li>\n<li>Miners will form <strong>fraud proofs</strong> consisting of a zkSNARK that recalculates this data correctly. Since the data of one block is just hundreds of thousands of field elements, there is no difficulty for the miner to generate such a zkSNARK. The proof and verification of the zkSNARK will be paid from the penalty of validators who proposed such a transaction.</li>\n</ul>\n<h3><a name=\"p-50034-security-guarantees-32\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-security-guarantees-32\"></a>Security Guarantees</h3>\n<p>It’s important to note that the optimistic elements of the protocol do not reduce the security of the system, as the assumption of the presence of a sufficient number of honest nodes is as reliable as these elements themselves. If an honest node misses defects or refuses to store data, it still won’t be able to mine and receive rewards.</p>\n<ul>\n<li>\n<p>Data preservation with an honest minority: If there is a sufficient number of honest nodes in the network, the data will be correctly stored and correspond to the corrected code close to the original code used to generate the commitment. Even if the commitment or shards were generated with errors, the network will be able to correct them and restore the data without errors.</p>\n</li>\n<li>\n<p>Protection against incorrect changes: In the process of error correction, a dishonest majority will not be able to substitute shard hashes with incorrect ones or replace the commitment with one that does not correspond to the corrected code. This guarantees the immutability of data and their correspondence to the stated commitment. If there is already an accepted commitment in the network, it is impossible to introduce errors into it during the error correction process, even if the client, all validators, and all nodes are malicious.</p>\n</li>\n</ul>\n<h2><a name=\"p-50034-examples-and-scenarios-33\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-examples-and-scenarios-33\"></a>Examples and Scenarios</h2>\n<h3><a name=\"p-50034-example-1-data-recovery-with-errors-34\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-example-1-data-recovery-with-errors-34\"></a>Example 1: Data Recovery with Errors</h3>\n<p><strong>Situation</strong>: Several shards are damaged due to failures.</p>\n<p><strong>System Actions</strong>:</p>\n<ol>\n<li><strong>Error Detection</strong>: Nodes detect incorrect shards during verification.</li>\n<li><strong>Data Recovery</strong>: Using Reed-Solomon code redundancy, nodes recover correct shards.</li>\n<li><strong>Metadata Update</strong>: Update corresponding shard hashes <span class=\"math\">H_j</span>.</li>\n<li><strong>Continued Operation</strong>: The system functions without interruptions, data remains available.</li>\n</ol>\n<h3><a name=\"p-50034-example-2-use-in-rollups-35\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-example-2-use-in-rollups-35\"></a>Example 2: Use in Rollups</h3>\n<p><strong>Situation</strong>: A developer implements our system in a recursive rollup.</p>\n<p><strong>Actions</strong>:</p>\n<ol>\n<li><strong>Integration of <span class=\"math\">\\mathcal{C}</span></strong>: The rollup uses the construction <span class=\"math\">\\mathcal{C} = (C, \\chi, \\{a_i\\})</span> instead of the standard commitment <span class=\"math\">C</span>.</li>\n<li><strong>Additional Opening</strong>: The rollup performs commitment opening at point <span class=\"math\">\\chi</span> and includes this in the state proof.</li>\n<li><strong>State Verification</strong>: Using <span class=\"math\">\\mathcal{C}</span>, the rollup proves the correctness of its state in zkSNARK or zkSTARK.</li>\n<li><strong>Scaling</strong>: Data corresponding to <span class=\"math\">\\mathcal{C}</span> is not stored on-chain, which allows for a significant reduction in the volume of data stored on-chain.</li>\n</ol>\n<h2><a name=\"p-50034-explanation-of-key-concepts-36\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-explanation-of-key-concepts-36\"></a>Explanation of Key Concepts</h2>\n<h3><a name=\"p-50034-fiat-shamir-heuristic-37\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-fiat-shamir-heuristic-37\"></a>Fiat-Shamir Heuristic</h3>\n<p>A method of transforming interactive protocols into non-interactive ones using hash functions. In our case, it is used to generate a pseudorandom point <span class=\"math\">\\chi</span> dependent on the commitment and shard hashes.</p>\n<h3><a name=\"p-50034-schwartz-zippel-lemma-38\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-schwartz-zippel-lemma-38\"></a>Schwartz-Zippel Lemma</h3>\n<p>A theorem stating that two different polynomials of degree <span class=\"math\">d</span> can coincide in no more than <span class=\"math\">d</span> points from field <span class=\"math\">F</span>. It ensures that the probability of successful forgery of verification is negligibly small.</p>\n<h3><a name=\"p-50034-reed-solomon-codes-39\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-reed-solomon-codes-39\"></a>Reed-Solomon Codes</h3>\n<p>Error correction codes that allow data recovery in the presence of errors or losses. Used to create redundancy and ensure reliability of data storage.</p>\n<h3><a name=\"p-50034-mathcalc-construction-in-rollups-40\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-mathcalc-construction-in-rollups-40\"></a><span class=\"math\">\\mathcal{C}</span> Construction in Rollups</h3>\n<ul>\n<li><strong>Why it’s needed</strong>: Provides a link between data and commitment, allowing rollups to prove the correctness of their state.</li>\n<li><strong>How it’s used</strong>: The rollup includes <span class=\"math\">\\mathcal{C}</span> in its proofs, which guarantees data availability and its correspondence to the commitment.</li>\n<li><strong>Advantages</strong>:\n<ul>\n<li>Reduction of on-chain data volume.</li>\n<li>Increasing proof efficiency.</li>\n<li>Ensuring data reliability and availability.</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-50034-conclusion-41\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-conclusion-41\"></a>Conclusion</h2>\n<p>We have presented a technique for using FRI for DA with optimistic correctable commitments, introducing a new construction <span class=\"math\">\\mathcal{C} = (C, \\chi, \\{a_i\\})</span>, which is especially useful in the context of rollups. Our system allows for a significant reduction in the volume of data stored on-chain and ensures data reliability and availability. It provides developers with new tools for creating scalable decentralized applications, integrating with recursive rollups, and incentivizing nodes to behave honestly through SPoRA-mining mechanisms and fraud proofs.</p>\n<h2><a name=\"p-50034-appendices-42\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-appendices-42\"></a>Appendices</h2>\n<h3><a name=\"p-50034-detailed-explanation-of-commitment-and-opening-43\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-detailed-explanation-of-commitment-and-opening-43\"></a>Detailed Explanation of Commitment and Opening</h3>\n<h4><a name=\"p-50034-commitment-generation-44\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-commitment-generation-44\"></a>Commitment Generation</h4>\n<ol>\n<li><strong>Data</strong>: Matrix <span class=\"math\">D</span> of size <span class=\"math\">T \\times K</span>.</li>\n<li><strong>Function</strong>: consider rows of <span class=\"math\">D</span> as values of T-1 degree polynomial function <span class=\"math\">f(x)</span> over field <span class=\"math\">F</span>.</li>\n<li><strong>FRI Application</strong>: Apply FRI to <span class=\"math\">f(x)</span> to obtain commitment <span class=\"math\">C</span>.</li>\n</ol>\n<h4><a name=\"p-50034-generation-of-random-point-chi-45\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-generation-of-random-point-chi-45\"></a>Generation of Random Point <span class=\"math\">\\chi</span></h4>\n<ul>\n<li>Use a hash function to generate <span class=\"math\">\\chi</span>:<br>\n<span class=\"math\">\n\\chi = \\mathrm{Hash}(C, H_1, H_2, \\dots, H_N).\n</span></li>\n</ul>\n<h4><a name=\"p-50034-opening-at-point-chi-46\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-opening-at-point-chi-46\"></a>Opening at Point <span class=\"math\">\\chi</span></h4>\n<ul>\n<li>Calculate values <span class=\"math\">\\{a_i\\}</span> necessary to prove that <span class=\"math\">f(\\chi)</span> corresponds to the data.</li>\n</ul>\n<h3><a name=\"p-50034-use-in-rollup-47\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-use-in-rollup-47\"></a>Use in Rollup</h3>\n<ul>\n<li><strong>Additional Opening</strong>: The rollup includes in the proof the opening of the commitment at point <span class=\"math\">\\chi</span>, i.e., <span class=\"math\">\\{a_i\\}</span>.</li>\n<li><strong><span class=\"math\">\\mathcal{C}</span> Construction</strong>: The rollup publishes <span class=\"math\">\\mathcal{C} = (C, \\chi, \\{a_i\\})</span>.</li>\n<li><strong>Advantages</strong>:\n<ul>\n<li>Provides data verifiability without the need for access to all data.</li>\n<li>Guarantees that data is available and stored in the network.</li>\n<li>Allows the rollup to reduce the volume of data needed for on-chain storage.</li>\n</ul>\n</li>\n</ul>\n<h3><a name=\"p-50034-proof-of-the-correctness-lemma-48\" class=\"anchor\" href=\"https://ethresear.ch#p-50034-proof-of-the-correctness-lemma-48\"></a>Proof of the Correctness Lemma</h3>\n<p><strong>Assumption</strong>: Let <span class=\"math\">\\text{Shard}_j</span> be incorrect but pass the check <span class=\"math\">s_j = a_j</span>.</p>\n<p><strong>Probability</strong>:</p>\n<ul>\n<li>The probability that an incorrect shard will coincide at point <span class=\"math\">\\chi</span> with a correct one is <span class=\"math\">\\frac{d}{|F|}</span>, where <span class=\"math\">d</span> is the degree of the polynomial.</li>\n<li>For a large field <span class=\"math\">F</span>, the probability is negligibly small.</li>\n</ul>\n<p><strong>Conclusion</strong>: With high probability, if a shard has passed the check, it is correct.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/using-fri-for-da-with-optimistic-correctable-commitments-in-rollups/20467\">Read full topic</a></p>","link":"https://ethresear.ch/t/using-fri-for-da-with-optimistic-correctable-commitments-in-rollups/20467","pubDate":"Sat, 21 Sep 2024 20:40:04 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20467"},"source":{"@url":"https://ethresear.ch/t/using-fri-for-da-with-optimistic-correctable-commitments-in-rollups/20467.rss","#text":"Using FRI for DA with Optimistic Correctable Commitments in Rollups"},"filter":false},{"title":"Vorbit SSF with circular and spiral finality: validator selection and distribution","dc:creator":"aelowsson","category":"Proof-of-Stake","description":"<p><em>Thanks to <a href=\"https://x.com/fradamt\">Francesco D’Amato</a> and <a href=\"https://x.com/barnabemonnot\">Barnabé Monnot</a> for feedback, and to participants of the <a href=\"https://efdn.notion.site/Robust-Incentives-Group-RIG-Homepage-802339956f2745a5964d8461c5ccef02\">RIG</a> + friends (<a href=\"https://x.com/nero_eth\">1</a>, <a href=\"https://x.com/adietrichs\">2</a>) meetup where parts of <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928\">Orbit</a> came together—including Barnabé’s <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#fast-rotation-5\">finality stairwell</a>.</em></p>\n<p>By <a href=\"https://x.com/weboftrees\">Anders Elowsson</a></p>\n<h2><a name=\"p-50029-h-1-introduction-1\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-1-introduction-1\"></a>1. Introduction</h2>\n<p>Ethereum will transition to <a href=\"https://notes.ethereum.org/@vbuterin/single_slot_finality\">single-slot finality</a> (SSF) to provide fast and strong economic guarantees that transactions included in a block will not revert. This requires upgrades to the consensus algorithm (<a href=\"https://ethresear.ch/t/a-simple-single-slot-finality-protocol/14920\">1</a>, <a href=\"https://arxiv.org/abs/2310.11331\">2</a>, <a href=\"https://notes.ethereum.org/@fradamt/chained-3sf\">3</a>, <a href=\"https://github.com/fradamt/ssf/tree/main/high_level\">4</a>) and the signature aggregation scheme (<a href=\"https://ethresear.ch/t/horn-collecting-signatures-for-faster-finality/14219\">1</a>, <a href=\"https://ethresear.ch/t/flooding-protocol-for-collecting-attestations-in-a-single-slot/17553\">2</a>, <a href=\"https://ethresear.ch/t/signature-merging-for-large-scale-consensus/17386\">3</a>), as <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#where-we-are-1\">previously outlined</a>. A third requirement is to upgrade Ethereum’s validator economics and management, with current progress on <a href=\"https://ethresear.ch/t/sticking-to-8192-signatures-per-slot-post-ssf-how-and-why/17989#approach-3-rotating-participation-ie-committees-but-accountable-5\">rotating participation</a> presented in the <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928\">Orbit SSF</a> proposal. A few considerations in this area are how to incentivize validator consolidation (<a href=\"https://notes.ethereum.org/@vbuterin/single_slot_finality#Economic-capping-of-total-validator-count\">1</a>, <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#incentivizing-consolidation-10\">2</a>), how to temper the quantity of stake (<a href=\"https://ethresear.ch/t/faq-ethereum-issuance-reduction/19675\">1</a>, <a href=\"https://ethresear.ch/t/properties-of-issuance-level-consensus-incentives-and-variability-across-potential-reward-curves/18448\">2</a>, <a href=\"https://ethresear.ch/t/endgame-staking-economics-a-case-for-targeting/18751\">3</a>, <a href=\"https://ethresear.ch/t/reward-curve-with-tempered-issuance-eip-research-post/19171\">4</a>), and how to select validators for the active set.</p>\n<p>With SSF, the consensus mechanism will still consist of an available chain (e.g., <a href=\"https://arxiv.org/abs/2302.11326\">RLMD GHOST</a>) and a finality gadget (e.g., resembling <a href=\"https://arxiv.org/abs/1710.09437\">Casper FFG</a> or <a href=\"https://tendermint.com/static/docs/tendermint.pdf\">Tendermint</a>). It remains unlikely that all validators will be able to participate in every slot, eventhough validator consolidation from <a href=\"https://eips.ethereum.org/EIPS/eip-7251\">EIP-7251</a> can offer a tangible improvement. This means that validators must be partitioned into committees, with each committee voting on the head of the available chain and/or finalizing successive checkpoints. Committees voting on the available chain must <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#slow-rotation-6\">rotate slowly</a>, but such strict requirements do not apply to the finality gadget (after validators have finalized their checkpoint).</p>\n<p>This post will take a closer look at cumulative finality when finality committees rotate quickly or moderately, proposing strategies for validator selection and distribution. A forthcoming post is intended to review the dynamics of slower validator rotations, with a focus on the available chain. To properly model the impact of consolidation, equations for generating a “pure Zipfian” distribution for a specific quantity of stake are first presented in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-2-zipfian-staking-sets-used-for-modeling-2\">Section 2</a>, with modeled staking sets generated at varying levels of purity. A method for generating committees in a new type of “epoch” is then presented in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-3-committees-cumulative-finality-and-aggregate-finality-gap-5\">Section 3</a> and cumulative finality analyzed under different levels of validator consolidation and stake quantities—applying various committee selection criteria. A good evaluation measure is the “aggregate finality gap”, tallying missing finality for a block during its progression to full finality. It turns out that the activity rate of a validator should not strictly be determined by its size. Ideally, it varies with the quantity of stake and the composition of the validator set, hence “Vorbit\", as in variable Orbit.</p>\n<p>Cumulative finality is impeded at epoch boundaries when committees are shuffled. Circular finality is therefore suggested in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-4-circular-and-spiral-finality-10\">Section 4</a>, wherein successive epochs are repeated across a longer era, such that finality accrues in a circular fashion. A mechanism for shuffling the validator set in a spiral fashion is also introduced, to improve finality at shuffling boundaries. The impact of various selection and distribution methods is analyzed in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-5-optimized-selection-and-distribution-of-auxiliary-validators-13\">Section 5</a>, and the effect on finality across deposited stake is presented in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-6-analysis-across-d-16\">Section 6</a>. <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-7-predicting-the-optimal-number-of-auxiliary-committees-17\">Section 7</a> reviews methods for predicting the optimal number of validating committees, and <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-8-properties-related-to-consensus-formation-22\">Section 8</a> reviews features related to consensus formation and staking risks.</p>\n<h2><a name=\"p-50029-h-2-zipfian-staking-sets-used-for-modeling-2\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-2-zipfian-staking-sets-used-for-modeling-2\"></a>2. Zipfian staking sets used for modeling</h2>\n<h3><a name=\"p-50029-h-21-pure-zipfian-distribution-3\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-21-pure-zipfian-distribution-3\"></a>2.1 Pure Zipfian distribution</h3>\n<p>To model committee-based SSF, it is necessary to define the expected level of consolidation in the validator set, including a realistic range. The idea is to generate validator sets across this range and then explore how to optimally partition each set into committees. Optimization criteria relate to for example cumulative finality. An achievable consolidation level will also serve as a healthy bound when exploring consolidation incentives in a forthcoming study.</p>\n<p>Vitalik reviewed the distribution of stakers in the <a href=\"https://x.com/VitalikButerin/status/1335729572633923584\">early days</a> of Ethereum and <a href=\"https://notes.ethereum.org/@vbuterin/single_slot_finality#The-good-news-gains-from-enabling-voluntary-validator-balance-consolidation\">established</a> that it was roughly <a href=\"https://en.wikipedia.org/wiki/Zipf%27s_law\">Zipfian</a>. The relationship between the staking deposit size <span class=\"math\">D</span> and the quantity of stakers <span class=\"math\">N</span> was then stipulated to <span class=\"math\">D=32N\\log_2{N}</span> under a “pure” Zipfian distribution. A straightforward procedure for generating a “pure” Zipfian staking set is to distribute stakers’ balances as</p>\n<div class=\"math\">\n\\frac{32N}{1}, \\frac{32N}{2}, ..., \\frac{32N}{N}.\n</div>\n<p>When <span class=\"math\">N</span> is large (as in this case), the associated harmonic series</p>\n<div class=\"math\">\n1 + \\frac{1}{2} + ... + \\frac{1}{N}\n</div>\n<p>approaches <span class=\"math\">\\ln(N)+\\gamma</span>, where <span class=\"math\">\\gamma</span> is the Euler–Mascheroni constant, approximately 0.577. The total quantity of stake is then</p>\n<div class=\"math\">\nD = 32N(\\ln(N)+\\gamma),\n</div>\n<p>which is close to Vitalik’s approximation. <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#a1-quantity-of-stakers-under-a-pure-zipfian-distribution-28\">Appendix A.1</a> shows that <span class=\"math\">N</span> therefore can be determined as</p>\n<div class=\"math\">\nN = e^{ W \\left( \\frac{D}{32} e^\\gamma \\right) - \\gamma},\n</div>\n<p>where <span class=\"math\">W</span> denotes the <a href=\"https://en.wikipedia.org/wiki/Lambert_W_function\">Lambert <span class=\"math\">W</span> function</a>. These equations provide the blueprint for generating a pure Zipfian staking set given any specific <span class=\"math\">D</span>. The equation is first applied to <span class=\"math\">D</span> to determine <span class=\"math\">N</span>, and the harmonic series involving <span class=\"math\">N</span> is used to create the distribution. The corresponding two lines of Python code are provided in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#a1-quantity-of-stakers-under-a-pure-zipfian-distribution-28\">Appendix A.1</a>.</p>\n<h3><a name=\"p-50029-h-22-modeled-validator-sets-4\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-22-modeled-validator-sets-4\"></a>2.2 Modeled validator sets</h3>\n<p>Figure 1 shows the resulting distribution of staker balances in cyan. In purple is a second distribution (“1/2 Zipfian”) created by removing half the stakers (every other staker in the sorted set, starting with the second largest), and reallocating the removed ETH across 32-ETH validators. This aims to capture a scenario where many larger stakers maintain 32-ETH validators. Even if they eventually consolidate, it could still represent an intermediate distribution of “nominal” staker set sizes over the next few years as consolidation slowly progresses. This post uses several such distributions, including also a 9/10 Zipfian distribution (removing every tenth staker), a 4/5 Zipfian distribution, and a 2/3 Zipfian distribution.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/3/e/3e3f0e2f66e56acff2e5f3ccc2eec5ff19dbb590.png\" data-download-href=\"https://ethresear.ch/uploads/default/3e3f0e2f66e56acff2e5f3ccc2eec5ff19dbb590\" title=\"Figure 1\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/3/e/3e3f0e2f66e56acff2e5f3ccc2eec5ff19dbb590_2_690x494.png\" alt=\"Figure 1\" data-base62-sha1=\"8SEHk2EgNd0oYyOOdEKUdOMyUEg\" width=\"690\" height=\"494\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/3/e/3e3f0e2f66e56acff2e5f3ccc2eec5ff19dbb590_2_690x494.png, https://ethresear.ch/uploads/default/optimized/3X/3/e/3e3f0e2f66e56acff2e5f3ccc2eec5ff19dbb590_2_1035x741.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/3/e/3e3f0e2f66e56acff2e5f3ccc2eec5ff19dbb590_2_1380x988.png 2x\" data-dominant-color=\"F9F9FB\"></a></div><p></p>\n<p><strong>Figure 1.</strong> Log-log plot of distributions of staker set sizes used for modeling in this post, at <span class=\"math\">D=</span> 30M ETH. The set sizes in cyan follow a “pure” Zipfian distribution, and the set sizes in purple remove every other staker and reallocates the stake to 32-ETH validators.</p>\n<p>The pure Zipfian distribution has <span class=\"math\">N\\approx79\\,000</span> at <span class=\"math\">D=</span> 30M ETH staked. Ethereum’s node count is hard to estimate; crawlers can only provide lower bounds. But it would appear that the node count is a bit below the staker set size for this hypothetical distribution. The 1/2 Zipfian distribution in purple has <span class=\"math\">N\\approx481\\,000</span>. This is a point that hopefully will be passed through on the way to a consolidated validator set; yet it is uncertain how quickly progress will be made.</p>\n<p>The staking sets are converted to validator sets <span class=\"math\">\\mathcal{V}</span> by having stakers with more than 2048 ETH (excluding those already reallocated to 32-ETH validators) divide their stake into validators of the maximum allowed size (<span class=\"math\">s_{\\text{max}}=2048</span>), thus capturing the ideal outcome. The last two validators in this procedure are set to an equal size below 2048. For example, a staker with 5048 ETH will have validators of size {2048, 1500, 1500}.</p>\n<p>Most of the stakers hold less than 2048 ETH under the Zipfian distributions, so this only adds around 9000 validators for the pure Zipfian distribution and around 5000 validators for the 1/2 Zipfian distribution. For the Zipfian staking set, <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#a2-quantity-of-validators-under-a-pure-zipfian-distribution-29\">Appendix A.2</a> shows that the corresponding Zipfian validator set size <span class=\"math\">V=|\\mathcal{V}|</span> can be estimated quite precisely as</p>\n<div class=\"math\">\nV = \\frac{N}{64} \\left(63+\\ln(N/64) + 2\\gamma \\right).\n</div>\n<p>The distribution of validator counts and sums across consolidation levels is shown in Figure 2.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/a/ba77c943f869cad7ef52b96cb713ab86123443d7.png\" data-download-href=\"https://ethresear.ch/uploads/default/ba77c943f869cad7ef52b96cb713ab86123443d7\" title=\"Figure 2\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/a/ba77c943f869cad7ef52b96cb713ab86123443d7_2_609x500.png\" alt=\"Figure 2\" data-base62-sha1=\"qBzrUICzCxBgCeYYWpuEmJPwoTl\" width=\"609\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/a/ba77c943f869cad7ef52b96cb713ab86123443d7_2_609x500.png, https://ethresear.ch/uploads/default/optimized/3X/b/a/ba77c943f869cad7ef52b96cb713ab86123443d7_2_913x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/a/ba77c943f869cad7ef52b96cb713ab86123443d7_2_1218x1000.png 2x\" data-dominant-color=\"CFD2EB\"></a></div><p></p>\n<p><strong>Figure 2.</strong> Distribution of validator count and sum at 30M ETH staked in the five modeled validator sets. Axes are log-scaled.</p>\n<h2><a name=\"p-50029-h-3-committees-cumulative-finality-and-aggregate-finality-gap-5\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-3-committees-cumulative-finality-and-aggregate-finality-gap-5\"></a>3. Committees, cumulative finality, and aggregate finality gap</h2>\n<h3><a name=\"p-50029-h-31-generation-of-committees-6\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-31-generation-of-committees-6\"></a>3.1 Generation of committees</h3>\n<p>Define <span class=\"math\">\\hat{V_a}</span> as a desirable upper limit for the active validator set size <span class=\"math\">V_a</span>. The protocol can allow (and wants) <span class=\"math\">V_a</span> to increase up to <span class=\"math\">\\hat{V_a}</span>, but not beyond this limit. This post sets <span class=\"math\">\\hat{V_a}=31250</span>, which corresponds to the committee size when 1 million validators are split up into 32 committees (reflecting approximately the current committee size). There has been some progress in enabling clients to handle larger committees, yet the finality gadget may have a slightly different profile than today (e.g., subject the network to twice the signature load). <a href=\"https://ethresear.ch/t/sticking-to-8192-signatures-per-slot-post-ssf-how-and-why/17989#approach-3-rotating-participation-ie-committees-but-accountable-5\">Smaller committees</a> such as <span class=\"math\">\\hat{V_a}=4096</span> could therefore also be modeled using the same framework if required.</p>\n<p>Let <span class=\"math\">C</span> denote the number of committees in a new form of “epoch” constituting a full rotation of the validator set. The validator set is first split up into <span class=\"math\">C</span> disjoint <em>regular committees</em>, ensuring <span class=\"math\">V/C&lt;\\hat{V_a}</span>. As an example, the 4/5 Zipfian staking set at <span class=\"math\">D=</span> 30M ETH consists of around 233 thousand (k) validators. An epoch must therefore be split up into at least <span class=\"math\">C=8</span> committees, with each regular committee in that case consisting of around 29100 validators. Setting <span class=\"math\">C=8</span> leaves room to include around <span class=\"math\">V_{\\mathrm{aux}}=\\hat{V_a}-29\\,100=2150</span> auxiliary validators in each committee—validators that also have been assigned to participate in some other regular committee. Once these 2150 validators have been added, the final <em>full committees</em> consist of <span class=\"math\">\\hat{V_a}</span> validators.</p>\n<p>To select auxiliary validators for the committees, each validator of size <span class=\"math\">s</span> ETH is assigned a weight <span class=\"math\">w</span>. The baseline weighting is</p>\n<div class=\"math\">\nw(s)=\\frac{s}{s_{\\mathrm{max}}},\n</div>\n<p>where <span class=\"math\">s_{\\mathrm{max}}=2048</span> as previously discussed. This is similar to the thresholding operation of <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#active-validator-set-management-8\">Orbit SSF</a>, but it uses <span class=\"math\">s_{\\text{max}}</span> rather than 1024. This change differentiates validators in the range 1024-2048. Vorbit performs optimally under full differentiation, and the change also makes individual consolidation incentives (discussed in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-83-the-activity-ratio-and-its-implications-on-staking-economics-25\">Section 8.3</a>) reasonable above 1024. <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-51-adjusted-weighting-14\">Section 5.1</a> discusses how Orbit can adopt full differentiation. The probability  <span class=\"math\">P(s)</span> for a validator of size <span class=\"math\">s</span> ETH to be drawn as the next auxiliary validator to be included in a committee is given by:</p>\n<div class=\"math\">\nP(s) = \\frac{w(s)}{\\sum_{v \\in \\mathcal{V}_{¢}} w(s_v)},\n</div>\n<p>where <span class=\"math\">v</span> represents each validator in the complementary set <span class=\"math\">\\mathcal{V}_{¢}</span> not already part of the committee, and <span class=\"math\">s_v</span> is the size of validator <span class=\"math\">v</span>. The smallest validators will then tend to participate in roughly <span class=\"math\">1/C</span> of the slots and larger validators more frequently, with outcomes depending on the quantity of stake and consolidation level (see also Figure 22).</p>\n<h3><a name=\"p-50029-h-32-cumulative-finality-7\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-32-cumulative-finality-7\"></a>3.2 Cumulative finality</h3>\n<p>Figure 3 shows the <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#fast-rotation-5\">stepwise</a> <a href=\"https://ethresear.ch/t/a-model-for-cumulative-committee-based-finality/10259\">committee-based</a> cumulative finality for the 4/5 Zipfian staking set, with committees finalizing consecutive slots. For transactions included in block <span class=\"math\">n</span>, aggregate finality is visually accounted for at the conclusion of the slot that the committee voted in. Finality when only using the regular committee is illustrated using a dashed blue line. Since each regular committee is completely disjoint and proportionally reflects the overall distribution, each committee adds an equal marginal cumulative finality to non-finalized transactions/blocks.  The solid blue line in Figure 3 shows cumulative finalization when each regular committee in the example has been supplemented by auxiliary validators up to <span class=\"math\">\\hat{V_a}</span> (“Full”).</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/e/a/eab7b069864af3da6ff936dff826036bdf43c703.png\" data-download-href=\"https://ethresear.ch/uploads/default/eab7b069864af3da6ff936dff826036bdf43c703\" title=\"Figure 3\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/e/a/eab7b069864af3da6ff936dff826036bdf43c703_2_690x471.png\" alt=\"Figure 3\" data-base62-sha1=\"xuphn2MKSp32kRYwbfULvzcesGT\" width=\"690\" height=\"471\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/e/a/eab7b069864af3da6ff936dff826036bdf43c703_2_690x471.png, https://ethresear.ch/uploads/default/optimized/3X/e/a/eab7b069864af3da6ff936dff826036bdf43c703_2_1035x706.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/e/a/eab7b069864af3da6ff936dff826036bdf43c703_2_1380x942.png 2x\" data-dominant-color=\"F1F8FA\"></a></div><p></p>\n<p><strong>Figure 3.</strong> Cumulative finalization of block <span class=\"math\">n</span> for the 4/5 Zipfian staking set. The finality gap (blue arrow) gradually falls. The aggregate finality gap is the sum of all finality gaps until full finality (cyan area).</p>\n<h3><a name=\"p-50029-h-33-aggregate-finality-gap-8\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-33-aggregate-finality-gap-8\"></a>3.3 Aggregate finality gap</h3>\n<p>Let <span class=\"math\">D_f</span> be the quantity of stake that has finalized a block, and <span class=\"math\">D</span> the total quantity of stake deposited for staking. The finality gap <span class=\"math\">F_g</span> is the proportion of the stake that has not yet finalized a block:</p>\n<div class=\"math\">\nF_g = \\frac{D-D_f}{D}.\n</div>\n<p>While <span class=\"math\">D_f</span> is a relevant measure of economic security in isolation, <span class=\"math\">D-D_f</span> is less useful if <span class=\"math\">D</span> is unknown. A block’s finality gap will fall with each new slot as long as new validators participate in the finalizing committees. The example with full committees has a lower finality gap due to the additional finality afforded by the auxiliary validators. Since they are selected in a weighted fashion, the effect is rather pronounced eventhough only around 2150 additional validators were added in this example. The difference in the finality gap diminishes as full finality approaches. At this point, most validators will have been present as part of their regular allocation anyway, and repeating a validator does not, in this comparison, improve upon finality (an argument could potentially be made for higher economic security when repeating a validator, but this is beyond the scope of this post).</p>\n<p>A useful utility measure when dealing with cumulative finality is the aggregate finality gap <span class=\"math\">\\widetilde{F}_{\\!g}</span> that a block is subjected to during consensus formation, until full finalization. It is represented by the cyan area in Figure 3 and is calculated as</p>\n<div class=\"math\">\n\\widetilde{F}_{\\!g} = C - \\sum_{i=1}^{C} F_{g}(i).\n</div>\n<h3><a name=\"p-50029-h-34-auxiliary-committees-9\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-34-auxiliary-committees-9\"></a>3.4 Auxiliary committees</h3>\n<p>What happens if the 4/5 Zipfian set is divided into 9 committees instead of 8? The added auxiliary committee (<span class=\"math\">C_{\\mathrm{aux}}=1</span>) results in <span class=\"math\">\\hat{V_a}/9\\approx3470</span> auxiliary validators in each committee, facilitating a further reduction in <span class=\"math\">\\widetilde{F}_{\\!g}</span>. A comparison between epochs of 8 committees (blue) and 9 committees (purple) is shown in Figure 4. The difference in the finality gap <span class=\"math\">\\Delta F_{\\!g}</span> for block <span class=\"math\">n</span> is indicated in green for the slots when there is a reduction in the gap, and in red when there is an increase. Cumulative finality first improves due to the additional auxiliary validators, and this is the most pronounced effect. As the number of duplicated validators increases, the reduction diminishes. At the beginning of slot <span class=\"math\">n+7</span>, the validator set divided into 8 committees instead has a lower <span class=\"math\">F_g</span>, and it reaches full finality one slot earlier, at the start of slot <span class=\"math\">n+8</span>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/4/8/4837d194d111146a383429331be3d4ec77b89a4f.png\" data-download-href=\"https://ethresear.ch/uploads/default/4837d194d111146a383429331be3d4ec77b89a4f\" title=\"Figure 4\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/4/8/4837d194d111146a383429331be3d4ec77b89a4f_2_690x471.png\" alt=\"Figure 4\" data-base62-sha1=\"aiRY4cOroPL4toEPpOQGWrtS3kH\" width=\"690\" height=\"471\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/4/8/4837d194d111146a383429331be3d4ec77b89a4f_2_690x471.png, https://ethresear.ch/uploads/default/optimized/3X/4/8/4837d194d111146a383429331be3d4ec77b89a4f_2_1035x706.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/4/8/4837d194d111146a383429331be3d4ec77b89a4f_2_1380x942.png 2x\" data-dominant-color=\"F7F7F8\"></a></div><p></p>\n<p><strong>Figure 4.</strong> Cumulative finalization of block <span class=\"math\">n</span> for the 4/5 Zipfian staking set. When adding an auxiliary committee, there is more room for auxiliary validators with high balances in each committee (purple line), and finality therefore accrues faster during the initial phase.</p>\n<p>The aggregate finality gap continues to fall when more auxiliary committees are added, as indicated in Figure 5. In the comparison between <span class=\"math\">C_{\\mathrm{aux}}=3</span> and <span class=\"math\">C_{\\mathrm{aux}}=4</span>, <span class=\"math\">\\Delta F_{g}</span> is negative starting at the beginning of slot <span class=\"math\">n+5</span>, and continues to fall all the way up to slot <span class=\"math\">n+12</span>. As a result, the aggregate finality gap <span class=\"math\">\\widetilde{F}_{\\!g}</span> is about equal for these two configurations.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/4/b/4b1bf568acf6824092c1f1d8b8d124e8755e32a2.png\" data-download-href=\"https://ethresear.ch/uploads/default/4b1bf568acf6824092c1f1d8b8d124e8755e32a2\" title=\"Figure 5\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/4/b/4b1bf568acf6824092c1f1d8b8d124e8755e32a2_2_690x471.png\" alt=\"Figure 5\" data-base62-sha1=\"aIrI6v8dzmHliC9YVWDA4lbfwmS\" width=\"690\" height=\"471\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/4/b/4b1bf568acf6824092c1f1d8b8d124e8755e32a2_2_690x471.png, https://ethresear.ch/uploads/default/optimized/3X/4/b/4b1bf568acf6824092c1f1d8b8d124e8755e32a2_2_1035x706.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/4/b/4b1bf568acf6824092c1f1d8b8d124e8755e32a2_2_1380x942.png 2x\" data-dominant-color=\"F8F7F7\"></a></div><p></p>\n<p><strong>Figure 5.</strong> Cumulative finalization of block <span class=\"math\">n</span> for the 4/5 Zipfian staking set, comparing the outcome between different numbers of auxiliary committees.</p>\n<p>Figure 6 shows the same example for a purely Zipfian staking set. At <span class=\"math\">C_{\\mathrm{aux}}=4</span>, almost 20M ETH (2/3 of the stake) will finalize the block in the first slot. As in the previous example, the benefit of adding auxiliary committees diminishes as more are added (<span class=\"math\">\\widetilde{F}_{\\!g}</span> stops decreasing and eventually reverses).</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/4/d42336e923e31a5109fb72fdd065b9830b360f0d.png\" data-download-href=\"https://ethresear.ch/uploads/default/d42336e923e31a5109fb72fdd065b9830b360f0d\" title=\"Figure 6\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/4/d42336e923e31a5109fb72fdd065b9830b360f0d_2_690x471.png\" alt=\"Figure 6\" data-base62-sha1=\"ugEFzbfN4lOCvSHxCKkpTfYXiHj\" width=\"690\" height=\"471\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/4/d42336e923e31a5109fb72fdd065b9830b360f0d_2_690x471.png, https://ethresear.ch/uploads/default/optimized/3X/d/4/d42336e923e31a5109fb72fdd065b9830b360f0d_2_1035x706.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/4/d42336e923e31a5109fb72fdd065b9830b360f0d_2_1380x942.png 2x\" data-dominant-color=\"F9F8F8\"></a></div><p></p>\n<p><strong>Figure 6.</strong> Cumulative finalization of block <span class=\"math\">n</span> for a pure Zipfian staking set, comparing the outcome between different numbers of auxiliary committees.</p>\n<p>Figure 7 instead shows the outcome with a 1/2 Zipfian staking set. The approximately 486k validators need to be split into at least</p>\n<div class=\"math\">\n\\left\\lceil \\frac{486000}{\\hat{V}_{\\!a}} \\right\\rceil = 16\n</div>\n<p>committees. With no full committees, only 1.875 million ETH will finalize each round. This might seem problematic since a committee that fails to finalize will <a href=\"https://ethresear.ch/t/a-model-for-cumulative-committee-based-finality/10259#mechanism-2\">hold up finality</a> until a sufficient amount of stake in the committee has been replaced through an inactivity leak or a similar mechanism. An accelerated inactivity leak could be considered under such circumstances. From an accountability perspective, this level of stake has however been argued to be <a href=\"https://ethresear.ch/t/sticking-to-8192-signatures-per-slot-post-ssf-how-and-why/17989#why-not-just-do-committees-1\">totally sufficient</a>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/4/8/483f1199756edb6315f1f56de0a5788694f5775b.png\" data-download-href=\"https://ethresear.ch/uploads/default/483f1199756edb6315f1f56de0a5788694f5775b\" title=\"Figure 7\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/4/8/483f1199756edb6315f1f56de0a5788694f5775b_2_690x471.png\" alt=\"Figure 7\" data-base62-sha1=\"aj7v7QwrzLgD6tQk7rGCsm5An6r\" width=\"690\" height=\"471\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/4/8/483f1199756edb6315f1f56de0a5788694f5775b_2_690x471.png, https://ethresear.ch/uploads/default/optimized/3X/4/8/483f1199756edb6315f1f56de0a5788694f5775b_2_1035x706.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/4/8/483f1199756edb6315f1f56de0a5788694f5775b_2_1380x942.png 2x\" data-dominant-color=\"F8F6F7\"></a></div><p></p>\n<p><strong>Figure 7.</strong> Cumulative finalization of block <span class=\"math\">n</span> for the 1/2 Zipfian staking set, comparing the outcome between different numbers of auxiliary committees.</p>\n<h2><a name=\"p-50029-h-4-circular-and-spiral-finality-10\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-4-circular-and-spiral-finality-10\"></a>4. Circular and spiral finality</h2>\n<p>The figures in the previous subsection have all captured cumulative finality over one epoch and are representative for the first block in an epoch. During each epoch, the complete validator set is iterated over, so full finality is reached at the end of the epoch. However, if the validator set is shuffled between epochs, then only the first block of the epoch will achieve full finality by the end of the epoch. For blocks in later slots of the epoch, full finality will not be reached until the end of the <em>next</em> epoch. Marginal cumulative finality decreases markedly at epoch boundaries, because committees on each side of the boundary will have more validator overlaps (even when using only regular committees). Thus, when stating that full finality can be reached within eight slots for the 4/5 Zipfian staking set in Figures 3-5, this is a qualified statement. For the second block of the epoch, full finality is not reached until after 15 slots (7 slots in the first epoch and 8 slots in the subsequent epoch). Recall that <span class=\"math\">C</span> denotes the number of committees in an epoch, which is also then the number of slots in an epoch during regular operation. The average number of slots to full finality <span class=\"math\">\\bar{S}_{\\!f}</span> then becomes</p>\n<div class=\"math\">\n\\bar{S}_{\\!f}=C + \\frac{C-1}{2}.\n</div>\n<p>While full finality might be more of an ideational concern, degradation from shuffling begins already at the second slot/committee if the block was proposed in the last slot of the epoch. There are two ways to improve on this: <em>circular finality</em> and <em>spiral finality</em>. Both provide benefits starting from a block’s second slot of accruing finality.</p>\n<h3><a name=\"p-50029-h-41-circular-finality-11\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-41-circular-finality-11\"></a>4.1 Circular finality</h3>\n<p>The most straightforward solution is to avoid shuffling the validator set each epoch. Instead, the validator set is shuffled in eras, where each era can consist of multiple epochs. The number of epochs per era <span class=\"math\">E_{\\text{era}}</span> is determined from the desired number of slots per era <span class=\"math\">\\hat{S}_{\\text{era}}</span> and <span class=\"math\">C</span>, rounded to the nearest integer:</p>\n<div class=\"math\">\nE_{\\text{era}}=\\lfloor\\hat{S}_{\\text{era}}/C\\rceil. \n</div>\n<p>With this change, the first <span class=\"math\">(E_{\\text{era}}-1)C</span> blocks of the era will be finalized in <span class=\"math\">C</span> slots, whereas the last <span class=\"math\">C</span> blocks will finalize in accordance with the previous equation <span class=\"math\">C + (C-1)/2</span>. Furthermore, and perhaps more importantly, cumulative finality will not degrade when crossing epoch boundaries within the era. The average number of slots to full finality among the <span class=\"math\">E_{\\text{era}}\\times C</span> blocks of an era becomes:</p>\n<div class=\"math\">\n\\bar{S}_{\\!f}=\\frac{C(E_{\\text{era}}-1)C + C(C + (C-1)/2)}{E_{\\text{era}}\\times C}, \n</div>\n<p>which simplifies to</p>\n<div class=\"math\">\n\\bar{S}_{\\!f}=C + \\frac{C-1}{2E_{\\text{era}}}.\n</div>\n<p>As an example, set <span class=\"math\">\\hat{S}_{\\text{era}}=64</span>. The 4/5 Zipfian staking set with no auxiliary slots will then finalize 57 out of 64 blocks in 8 slots, with one block each among the remaining finalizing in 9, 10, 11 slots, etc. Furthermore, only the last 7 out of 64 slots in the era will suffer degraded cumulative finalization, whereas 56 out of 64 will do so without circular finality. The average number of slots to full finality becomes <span class=\"math\">\\bar{S}_{\\!f} \\approx 8.4</span>. In contrast, without circular finality, the result is <span class=\"math\">\\bar{S}_{\\!f}=C+(C-1)/2 = 11.5.</span></p>\n<h3><a name=\"p-50029-h-42-spiral-finality-12\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-42-spiral-finality-12\"></a>4.2 Spiral finality</h3>\n<p>While circular finality is effective in reducing <span class=\"math\">\\bar{S}_{\\!f}</span> and the proportion of blocks with degraded cumulative finality, it does not reduce the maximum time to full finality, which remains <span class=\"math\">S_{f} = 2C-1</span>. This maximum applies to the block proposed in the second slot of the last epoch of the era. A method to reduce this maximum is spiral finality, where limits are placed on how many slots validators may shift forward within the epoch when they are shuffled. This is controlled by the variable <span class=\"math\">C_{\\text{shift}}</span>. Setting <span class=\"math\">C_{\\text{shift}}=2</span> means that validators may only shift two slots forward, but they can always shift back to the start of the epoch. The regular validators located in the first committee of the epoch <span class=\"math\">\\mathcal{C}_n</span> can then be reassigned between committees <span class=\"math\">\\mathcal{C}_n</span> and <span class=\"math\">\\mathcal{C}_{n+2}</span>, the regular validators in committee <span class=\"math\">\\mathcal{C}_{n+1}</span> can be reassigned between committees <span class=\"math\">\\mathcal{C}_n</span> and <span class=\"math\">\\mathcal{C}_{n+3}</span>, etc. If <span class=\"math\">\\hat{V}_a</span> is set relatively low, it might be reasonable to make further stipulations on the random selection, to ensure an even distribution of large and small validators.</p>\n<p>Circular and spiral finality can be combined to achieve a low average time to full finality, as well as a lower upper bound on it. In this setup, spiral finality is applied to the last epoch of an era.</p>\n<h2><a name=\"p-50029-h-5-optimized-selection-and-distribution-of-auxiliary-validators-13\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-5-optimized-selection-and-distribution-of-auxiliary-validators-13\"></a>5. Optimized selection and distribution of auxiliary validators</h2>\n<p>This section reviews two different methods for optimizing the distribution of auxiliary validators. The plots will as previously disregard epoch boundaries (presume circular finality). In fact, to provide a more stable results in light of the randomness inherent in the validatior selection process, finality is evaluated in a circular fashion in all plots of cumulative finality in this post. This involves computing results for <span class=\"math\">C</span> consecutive slots across all <span class=\"math\">C</span> different starting positions. Additionally, the approach ensures that spacing and distribution of validators are not attuned to epoch boundaries, and is particularly useful in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-52-equal-spacing-15\">Section 5.2</a> that introduces equally spaced validators.</p>\n<h3><a name=\"p-50029-h-51-adjusted-weighting-14\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-51-adjusted-weighting-14\"></a>5.1 Adjusted weighting</h3>\n<p>The most straightforward modification is to adjust the weighting scheme by adding the power <span class=\"math\">p</span> to the original equation:</p>\n<div class=\"math\">\nw(s)=\\Big(\\frac{s}{s_{\\mathrm{max}}}\\Big)^p.\n</div>\n<p>If <span class=\"math\">p&gt;1</span>, larger auxiliary validators are further prioritized over smaller validators. This can be useful since the smaller validators are still guaranteed to be included in one committee, and <span class=\"math\">C</span> can be relatively small (short epochs). A potential change to the Orbit slow-rotation paradigm, when validators are selected directly from the weighting and there is no regular committee, is that <span class=\"math\">p</span> instead can be set below 1. This reduces the “slope” of the thresholding mechanism, allowing smaller validators  to be selected with a higher probability than for example 1/32 or 1/64. This can be beneficial for reasons discussed in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-83-the-activity-ratio-and-its-implications-on-staking-economics-25\">Section 8.3</a>, and will be further explored in a post covering the slowly rotating validator set.</p>\n<p>Figure 8 shows the difference in the finality gap in terms of finalized stake <span class=\"math\">\\Delta D_{f}</span> when changing <span class=\"math\">p</span> from 1 to 2. The average outcome across the five validator sets (from 1/2 Zipfian to fully Zipfian) was used. The reader may also wish to review Figure 22 in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-82-activity-rate-24\">Section 8.2</a>, which shows how the change in weighting alters the probability for a validator of size <span class=\"math\">s</span> to be active.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/9/1/9140afbcdd9422b8a85f7a916db431d418609dcb.png\" data-download-href=\"https://ethresear.ch/uploads/default/9140afbcdd9422b8a85f7a916db431d418609dcb\" title=\"Figure 8\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/9/1/9140afbcdd9422b8a85f7a916db431d418609dcb_2_690x484.png\" alt=\"Figure 8\" data-base62-sha1=\"kIXP2XlhLitMQc2bhaxaWvWQlED\" width=\"690\" height=\"484\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/9/1/9140afbcdd9422b8a85f7a916db431d418609dcb_2_690x484.png, https://ethresear.ch/uploads/default/optimized/3X/9/1/9140afbcdd9422b8a85f7a916db431d418609dcb_2_1035x726.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/9/1/9140afbcdd9422b8a85f7a916db431d418609dcb_2_1380x968.png 2x\" data-dominant-color=\"FAF9F9\"></a></div><p></p>\n<p><strong>Figure 8.</strong> Change in <span class=\"math\">D_{f}</span> at 30M staked when <span class=\"math\">p</span> is changed from 1 to 2, during a block’s progression to full finality.</p>\n<p>As evident, <span class=\"math\">D_{f}</span> is on average almost 5M ETH higher for the first slot, when <span class=\"math\">C_{\\text{aux}}</span> is between 3-4 (those lines are somewhat overlapping in the graph). This is a significant improvement, reducing the finality gap at the first slot by almost 1/6. The examples with 2-4 auxiliary committees then experience a slight reduction starting at <span class=\"math\">n+5</span>. This is because validators with the most stake become included in almost every committee: repeated validators do not increase the cumulative finality, and they occupy space in the committees, preventing new validators from finalizing the block.</p>\n<h3><a name=\"p-50029-h-52-equal-spacing-15\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-52-equal-spacing-15\"></a>5.2 Equal spacing</h3>\n<p>Since repeated validators do not increase cumulative finality, it is advantageous to equally space repeated auxiliary validators across the epoch so that repetitions occur as far apart as possible. The distribution of auxiliary validators can then be done slightly differently. The number of auxiliary inclusions <span class=\"math\">\\lambda</span> can be set for a validator with stake <span class=\"math\">s</span> as</p>\n<div class=\"math\">\n\\lambda(s) = \\frac{V_{\\text{aux}}(C-1)w(s)-\\widetilde{V}_{\\!\\text{aux}}}{\\sum_{v \\in \\mathcal{V}} w(s_v)}.\n</div>\n<p>In this equation, <span class=\"math\">\\widetilde{V}_{\\!\\text{aux}}</span> sums the auxiliary validator instances added across the full epoch among validators that are present in every slot. It is initially set to zero. For any validator <span class=\"math\">v</span> with <span class=\"math\">\\lambda_v &gt; C-1</span>, an iterative procedure sets <span class=\"math\">\\lambda_v = C-1</span>, removes the validator from <span class=\"math\">\\mathcal{V}</span>, adds <span class=\"math\">C-1</span> to <span class=\"math\">\\widetilde{V}_{\\!\\text{aux}}</span>, and recomputes <span class=\"math\">\\lambda</span> for the remaining validators. The iterative procedure relying on <span class=\"math\">\\widetilde{V}_{\\!\\text{aux}}</span> is necessary because a validator can never be included more than once per slot (<span class=\"math\">\\lambda \\not &gt; C</span>).</p>\n<p>Given <span class=\"math\">\\lambda</span>, each validator is guaranteed inclusion in <span class=\"math\">\\lfloor \\lambda \\rfloor</span> committees, with any remaining fraction used when drawing validators that will be included in one additional auxiliary committee. The final outcome is denoted <span class=\"math\">\\lambda_f</span>. Auxiliary inclusions for validators are equally spaced at intervals of <span class=\"math\">C/(\\lambda_f+1)</span> slots. The spacing procedure starts from the regular committee position, rounding the computed distance to the nearest integer, and wrapping around epoch boundaries using the modulo operation.</p>\n<p>Due to randomness in the distribution of validators, slots will with this procedure generally end up slightly below or above <span class=\"math\">\\hat{V}_a</span>. In general, this should not be an issue because <span class=\"math\">\\hat{V}_a</span> would typically allow for some flexibility. However, to maintain consistency with the random draw in the evaluation, an iterative procedure reallocated validators from committees with more than <span class=\"math\">\\hat{V}_a</span> validators to committees with fewer, still ensuring no duplications of validators within a committee.</p>\n<p>Let <span class=\"math\">\\equiv</span> represent equal spacing and <span class=\"math\">\\not\\equiv</span> the spacing achieved due to random draw. The change <span class=\"math\">\\Delta D_f</span> at 30M ETH staked, computed as  <span class=\"math\">D_f(\\equiv) - D_f(\\not\\equiv)</span>, is shown in Figure 9. The variable <span class=\"math\">p</span> was set to 2 both for random and equally spaced validators.</p>\n<p>The most significant improvement from equal spacing occurs in the second slot after the block has been proposed. By definition, the first slot will not contain any repetitions anyway. The improvements are most pronounced when there are fewer auxiliary committees, as these are the circumstances where 2048-ETH validators are not included in nearly every committee.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/a/c/acc51601fde62d0126aae0a675c43936385592aa.png\" data-download-href=\"https://ethresear.ch/uploads/default/acc51601fde62d0126aae0a675c43936385592aa\" title=\"Figure 9\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/a/c/acc51601fde62d0126aae0a675c43936385592aa_2_690x475.png\" alt=\"Figure 9\" data-base62-sha1=\"oEonxoF2Ac77WSX4RAhIULcsDFw\" width=\"690\" height=\"475\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/a/c/acc51601fde62d0126aae0a675c43936385592aa_2_690x475.png, https://ethresear.ch/uploads/default/optimized/3X/a/c/acc51601fde62d0126aae0a675c43936385592aa_2_1035x712.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/a/c/acc51601fde62d0126aae0a675c43936385592aa_2_1380x950.png 2x\" data-dominant-color=\"F9F8F9\"></a></div><p></p>\n<p><strong>Figure 9.</strong> Change in <span class=\"math\">D_{f}</span> at 30M staked when validators are equally spaced across the epoch, during a block’s progression to full finality.</p>\n<p>The outcome for the 4/5 Zipfian staking set using <span class=\"math\">p=2</span> and equal spacing is shown in Figure 10. It can be compared with the previous plot in Figure 5, that shows the outcome with <span class=\"math\">p=1</span> and random spacing. The changes increase <span class=\"math\">D_f</span> from 15M ETH to 20M ETH in the first slot when <span class=\"math\">C_{\\text{aux}}</span> is 3-4 and in the second slot when <span class=\"math\">C_{\\text{aux}}=1</span>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/f/6/f6aff7e708f3cf850bec13a5f24edecadfbb27c3.png\" data-download-href=\"https://ethresear.ch/uploads/default/f6aff7e708f3cf850bec13a5f24edecadfbb27c3\" title=\"Figure 10\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/f/6/f6aff7e708f3cf850bec13a5f24edecadfbb27c3_2_690x471.png\" alt=\"Figure 10\" data-base62-sha1=\"zcit1QvZdaZBNbE5RyXTMdjKO5B\" width=\"690\" height=\"471\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/f/6/f6aff7e708f3cf850bec13a5f24edecadfbb27c3_2_690x471.png, https://ethresear.ch/uploads/default/optimized/3X/f/6/f6aff7e708f3cf850bec13a5f24edecadfbb27c3_2_1035x706.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/f/6/f6aff7e708f3cf850bec13a5f24edecadfbb27c3_2_1380x942.png 2x\" data-dominant-color=\"F8F7F7\"></a></div><p></p>\n<p><strong>Figure 10.</strong> Cumulative finalization of block <span class=\"math\">n</span> for the 4/5 Zipfian staking set, with <span class=\"math\">p=2</span> and equal spacing <span class=\"math\">\\equiv</span>.</p>\n<h2><a name=\"p-50029-h-6-analysis-across-d-16\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-6-analysis-across-d-16\"></a>6. Analysis across <span class=\"math\">D</span></h2>\n<p>The analysis in this and the next section relies on <span class=\"math\">p=2</span> and the randomized distribution of auxiliary validators <span class=\"math\">\\not\\equiv</span>. Figure 11 shows how the aggregate finality gap varies with <span class=\"math\">C_{\\text{aux}}</span> across deposit size for the 4/5 Zipfian set. At lower quantities of stake, <span class=\"math\">C_{\\text{aux}}=0</span> gives the lowest <span class=\"math\">\\widetilde{F}_{\\!g}</span>. At higher quantities of stake, <span class=\"math\">C_{\\text{aux}}=5</span> gives the lowest among those plotted. But increasing <span class=\"math\">C_{\\text{aux}}</span> all the way up to 7 will spuriously give the lowest results above 70M ETH staked. However, outcomes are very tightly overlapping at higher settings (hence they were not plotted), implying that in terms of <span class=\"math\">\\widetilde{F}_ {\\! g}</span>, venturing above <span class=\"math\">C_{\\text{aux}}=4</span> will not offer significant improvements.</p>\n<p>The characteristic shark fin-pattern emerges when validators are redistributed due to changes in <span class=\"math\">C</span>. As <span class=\"math\">D</span> increases while the distribution is kept fixed, <span class=\"math\">V</span> also increases. Each “fin” represents the addition of one committee. This addition gives room for more auxiliary validators, which reduces <span class=\"math\">\\widetilde{F}_ {\\! g}</span> when <span class=\"math\">C_{\\text{aux}}</span> is relatively low. However, if <span class=\"math\">C_{\\text{aux}}</span> is too high for the given validator set, the outcome is reversed, and the addition of one committee instead increases <span class=\"math\">\\widetilde{F}_ {\\! g}</span>. This is evident in Figure 12, which zooms in on the outcome below <span class=\"math\">D=</span> 35M ETH.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/3/9/39ecbbbad73e7b8ce1c6eeadf0da8d724fb1078a.png\" data-download-href=\"https://ethresear.ch/uploads/default/39ecbbbad73e7b8ce1c6eeadf0da8d724fb1078a\" title=\"Figure 11\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/3/9/39ecbbbad73e7b8ce1c6eeadf0da8d724fb1078a_2_690x489.png\" alt=\"Figure 11\" data-base62-sha1=\"8gqpHM6pSB1mgpP78R9NpPBbkoi\" width=\"690\" height=\"489\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/3/9/39ecbbbad73e7b8ce1c6eeadf0da8d724fb1078a_2_690x489.png, https://ethresear.ch/uploads/default/optimized/3X/3/9/39ecbbbad73e7b8ce1c6eeadf0da8d724fb1078a_2_1035x733.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/3/9/39ecbbbad73e7b8ce1c6eeadf0da8d724fb1078a_2_1380x978.png 2x\" data-dominant-color=\"F8F6F7\"></a></div><p></p>\n<p><strong>Figure 11.</strong> Aggregate finality gap for the 4/5 Zipfian set across <span class=\"math\">D</span> for various numbers of auxiliary committees.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/7/9/79bedfdb55133ee3488fbd4872f8cb4d332a9c4c.png\" data-download-href=\"https://ethresear.ch/uploads/default/79bedfdb55133ee3488fbd4872f8cb4d332a9c4c\" title=\"Figure 12\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/7/9/79bedfdb55133ee3488fbd4872f8cb4d332a9c4c_2_690x480.png\" alt=\"Figure 12\" data-base62-sha1=\"hn0IFHLSfMyQK9rm7WqtAe4SKpS\" width=\"690\" height=\"480\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/7/9/79bedfdb55133ee3488fbd4872f8cb4d332a9c4c_2_690x480.png, https://ethresear.ch/uploads/default/optimized/3X/7/9/79bedfdb55133ee3488fbd4872f8cb4d332a9c4c_2_1035x720.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/7/9/79bedfdb55133ee3488fbd4872f8cb4d332a9c4c_2_1380x960.png 2x\" data-dominant-color=\"F9F7F8\"></a></div><p></p>\n<p><strong>Figure 12.</strong> Aggregate finality gap for the 4/5 Zipfian set with <span class=\"math\">D\\leq</span> 35M ETH for various numbers of auxiliary committees.</p>\n<p>Define <span class=\"math\">\\widetilde{F}^*_{\\!g}</span> as the minimum aggregate finality gap, achieved at the associated minimum auxiliary committees <span class=\"math\">C^*_{\\text{aux}}.</span> This corresponds to the lowest line at any specific <span class=\"math\">D</span> in Figures 11-12. Figure 13 plots <span class=\"math\">\\widetilde{F}^ * _ {\\!g}</span> for all five staking sets. As evident, there are two fundamental factors that degrade committe-based cumulative finality: a higher quantity of stake and a lower level of consolidation.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/4/3/43112cac286cc97b03b0559f11dd9f0122178bff.png\" data-download-href=\"https://ethresear.ch/uploads/default/43112cac286cc97b03b0559f11dd9f0122178bff\" title=\"Figure 13\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/4/3/43112cac286cc97b03b0559f11dd9f0122178bff_2_690x482.png\" alt=\"Figure 13\" data-base62-sha1=\"9ziMM9A9aONpuu3FsQmFEXiHpfh\" width=\"690\" height=\"482\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/4/3/43112cac286cc97b03b0559f11dd9f0122178bff_2_690x482.png, https://ethresear.ch/uploads/default/optimized/3X/4/3/43112cac286cc97b03b0559f11dd9f0122178bff_2_1035x723.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/4/3/43112cac286cc97b03b0559f11dd9f0122178bff_2_1380x964.png 2x\" data-dominant-color=\"F9F9FB\"></a></div><p></p>\n<p><strong>Figure 13.</strong> The minimum aggregate finality gap across stake. Fast finality is degraded both by a higher quantity of stake and a lower level of consolidation.</p>\n<p>Figure 14 instead focuses on how the optimal number of committees at <span class=\"math\">\\widetilde{F}^*_{\\!g}</span> varies. However, the optimal number of committees will fluctuate greatly due to the fin-like pattern evident in Figure 12, and it is also a discrete measure. Therefore, parabolic interpolation (see <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b3-interpolated-ground-truth-33\">Appendix B.3</a>) was applied to three points around the minimum, resulting in a smoother representation of total committees, here denoted <span class=\"math\">C^y</span>. Both the aggregate finality gap and the total number of committees rise linearly with an increase in the quantity of stake, keeping the distribution fixed.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/f/df23ba4bf89121fb4c3096ca2f52a45fee749450.png\" data-download-href=\"https://ethresear.ch/uploads/default/df23ba4bf89121fb4c3096ca2f52a45fee749450\" title=\"Figure 14\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/f/df23ba4bf89121fb4c3096ca2f52a45fee749450_2_690x486.png\" alt=\"Figure 14\" data-base62-sha1=\"vPZ1nl63yud0XGCBxSkW3xH7mbS\" width=\"690\" height=\"486\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/f/df23ba4bf89121fb4c3096ca2f52a45fee749450_2_690x486.png, https://ethresear.ch/uploads/default/optimized/3X/d/f/df23ba4bf89121fb4c3096ca2f52a45fee749450_2_1035x729.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/f/df23ba4bf89121fb4c3096ca2f52a45fee749450_2_1380x972.png 2x\" data-dominant-color=\"F8F8FA\"></a></div><p></p>\n<p><strong>Figure 14.</strong> Interpolated total number of committees that minimizes the aggregate finality gap.</p>\n<h2><a name=\"p-50029-h-7-predicting-the-optimal-number-of-auxiliary-committees-17\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-7-predicting-the-optimal-number-of-auxiliary-committees-17\"></a>7. Predicting the optimal number of auxiliary committees</h2>\n<h3><a name=\"p-50029-h-71-overview-18\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-71-overview-18\"></a>7.1 Overview</h3>\n<p>How should the number of auxiliary committees (or any other setting such as <span class=\"math\">p</span>) be determined during operation if the suggested variant of committee-based finality is pursued? Five options can be highlighted:</p>\n<ol>\n<li>Generate committees and compute <span class=\"math\">\\widetilde{F}_ {\\! g}</span> (or some more appropriate measure, as further discussed in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b2-weighted-aggregate-finality-gap-32\">Appendix B.2</a>) for various <span class=\"math\">C_{\\text{aux}}</span>-settings (e.g., 0-6), selecting the one that minimizes <span class=\"math\">\\widetilde{F}_ {\\! g}</span>. This solution might have a high computational load if there are several hundred thousand validators.</li>\n<li>Run the process for only the current and adjacent <span class=\"math\">C_{\\text{aux}}</span>-settings. If the analysis is performed frequently, store the results and rely on hysteresis, switching only if a clear majority of recent evaluations are in favor. For example, a threshold of 80% over the last week could be used.</li>\n<li>If the computational load in (2) is still too high, a reduced validator set <span class=\"math\">\\mathcal{V}_ r</span> can be relied upon, with validators in <span class=\"math\">\\mathcal{V}_ r</span> drawn evenly spaced from the ordered full set <span class=\"math\">\\mathcal{V}</span>. The setting for <span class=\"math\">\\hat{V_a}</span> should then be reduced proportional to the reduction in the validator set before generating committees.</li>\n<li>Compute some simple features of the validator set related to for example variability, and determine an appropriate number of auxiliary slots based on these features.</li>\n<li>Specify a fixed number of auxiliary committees so that the mechanism performs reasonably well under a wide range of validator sets, e.g., <span class=\"math\">C_{\\text{aux}}=2</span>.</li>\n</ol>\n<p>When it comes to implementation complexity, all options are rather straightforward. A benefit of Options 1-3 is that client will need to implement the function for assigning validators to committees anyway. The remaining process is then the evaluation function described in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b1-evaluation-procedure-31\">Appendix B.1</a>. This process does not have a high time complexity, but it might still be too computationally intensive if there are many hundred thousand validators.</p>\n<p>Option 2 is then rather appealing, with some parallels to how hysteresis is leveraged when <a href=\"https://eth2book.info/capella/part2/incentives/balances/#hysteresis\">updating validators’ effective balance</a>. Option 3 can further reduce the computational requirements by at least an order of magnitude (10x), perhaps up to two (100x). A question then is what accuracy that can be achieved if the validator set is reduced to for example <span class=\"math\">|\\mathcal{V}_ r| = 1000</span> or <span class=\"math\">|\\mathcal{V}_ r| = 5000</span>. This is studied in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-72-prediction-accuracy-with-a-reduced-validator-set-19\">Section 7.2</a>. Another question is of course the viability of Option 4, which could further reduce the computational requirements. This is studied in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-73-prediction-accuracy-using-general-features-20\">Section 7.3</a>, and Option 5 is reviewed in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-74-prediction-accuracy-using-a-fixed-number-of-auxiliary-committees-21\">Section 7.4</a>. The conclusion of the experiment, expanded on in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-9-conclusion-and-discussion-26\">Section 9</a>, is that Option 2, 3 or 5 seems like the most viable, with Option 5 as a natural starting point.</p>\n<p>The ground truth for modeling was not based on the optimal number of auxiliary committees <span class=\"math\">C_{\\text{aux}}</span> but instead on the optimal number of auxiliary validators <span class=\"math\">V_{\\text{aux}}</span>, mainly to circumvent the fin-like pattern in Figures 11-12. To achieve a smoother target, a more refined point <span class=\"math\">V^{y}_{\\text{aux}}</span> between neighboring <span class=\"math\">V_{\\text{aux}}</span> values was derived via parabolic interpolation—as previously illustrated also for <span class=\"math\">C^y</span> in Figure 14. A further small adjustment was made before interpolation, slightly weighting up <span class=\"math\">\\widetilde{F}_ {\\! g}</span> when a large number of auxiliary slots relative to the number of regular slots was applied. <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b2-weighted-aggregate-finality-gap-32\">Appendix B.2</a>-<a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b3-interpolated-ground-truth-33\">3</a> explains the full procedure for generating the ground truth. <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b4-generation-of-a-log-normal-distributed-validator-set-34\">Appendix B.4</a> then describes the generation of an additional log-normal validator set to provide a greater spread in the evaluated examples. It is shown in yellow in Figures 15-20. One thousand validator sets were generated for each of the six different distributions for the analysis with <span class=\"math\">D</span> in the range 10M-80M ETH, giving a total of 6000 examples.</p>\n<h3><a name=\"p-50029-h-72-prediction-accuracy-with-a-reduced-validator-set-19\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-72-prediction-accuracy-with-a-reduced-validator-set-19\"></a>7.2 Prediction accuracy with a reduced validator set</h3>\n<p>How accurate can the predictions be with a reduced validator set <span class=\"math\">\\mathcal{V}_r</span> from Option 3, if <span class=\"math\">\\mathcal{V}_r</span> consists of only 1000 or 5000 validators? To test this, the predicted optimal, <span class=\"math\">V^{x}_{\\text{aux}}</span>, was computed on the reduced set, using the same evaluation procedure as when setting the ground truth <span class=\"math\">V^{y}_{\\text{aux}}</span> on the full set (<a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#b1-evaluation-procedure-31\">Appendix B.1</a>). The outcome is shown in Figure 15 for 1000 validators (<span class=\"math\">R^2=0.893</span>) and in Figure 16 for 5000 validators (<span class=\"math\">R^2=0.960</span>). The broader black diagonal line represents perfect predictions, while the thinner black lines indicate the range where predictions fall within <span class=\"math\">\\hat{V}_{\\!a}</span>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/6/c64f24c7ae178b92f231406d54797377a84fbef2.png\" data-download-href=\"https://ethresear.ch/uploads/default/c64f24c7ae178b92f231406d54797377a84fbef2\" title=\"Figure 15\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/6/c64f24c7ae178b92f231406d54797377a84fbef2_2_563x500.png\" alt=\"Figure 15\" data-base62-sha1=\"sik6qyLTjg3U22sAjCbO1PlDzPk\" width=\"563\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/6/c64f24c7ae178b92f231406d54797377a84fbef2_2_563x500.png, https://ethresear.ch/uploads/default/optimized/3X/c/6/c64f24c7ae178b92f231406d54797377a84fbef2_2_844x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/6/c64f24c7ae178b92f231406d54797377a84fbef2_2_1126x1000.png 2x\" data-dominant-color=\"F4F2F7\"></a></div><p></p>\n<p><strong>Figure 15.</strong> Predictions of the optimal number of auxiliary validators compared to ground truth, based on a reduced set of 1000 validators.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/8/c81b0158efa89ae7166369f10c33be5d8d67858c.png\" data-download-href=\"https://ethresear.ch/uploads/default/c81b0158efa89ae7166369f10c33be5d8d67858c\" title=\"Figure 16\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/8/c81b0158efa89ae7166369f10c33be5d8d67858c_2_563x500.png\" alt=\"Figure 16\" data-base62-sha1=\"sydlRomhgKMfVpRpQTWv3ohZVSI\" width=\"563\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/8/c81b0158efa89ae7166369f10c33be5d8d67858c_2_563x500.png, https://ethresear.ch/uploads/default/optimized/3X/c/8/c81b0158efa89ae7166369f10c33be5d8d67858c_2_844x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/8/c81b0158efa89ae7166369f10c33be5d8d67858c_2_1126x1000.png 2x\" data-dominant-color=\"F6F4F8\"></a></div><p></p>\n<p><strong>Figure 16.</strong> Predictions of the optimal number of auxiliary validators compared to ground truth, based on a reduced set of 5000 validators.</p>\n<p>As evident, at higher values for <span class=\"math\">V_\\text{aux}</span>, predictions become increasingly less accurate. This is related to the phenomenon shown in Figure 11, wherein the relative difference in <span class=\"math\">\\widetilde{F}_{\\! g}</span> will not be that large between the the best settings for <span class=\"math\">C_{\\text{aux}}</span> (and thus <span class=\"math\">V_{\\text{aux}}</span>). The broader implication is that getting <span class=\"math\">C_\\text{aux}</span> slightly wrong will then not matter much. At the other end, getting it wrong at lower <span class=\"math\">C_\\text{aux}</span> towards the bottom left corner is more of a concern. Note also that only examples where <span class=\"math\">D&gt;</span> 40M ETH are problematic (review Figure 20 for the ground truth range 25M-35M).</p>\n<p>The errors in the predictions stem from how the random selection influences the composition of the committees. Repeating the experiment several times and averaging the outcomes will therefore serve to improve accuracy (as would equally spaced validators described in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-52-equal-spacing-15\">Section 5.2</a>). An example of the average outcome for four validator sets with <span class=\"math\">V_{r} =</span> {1000, 2000, 3000, 5000} respectively is shown in Figure 17. The predictions are now all within the <span class=\"math\">\\hat{V}_a</span> boundary, and <span class=\"math\">R^2=0.981</span>. It must also be remembered that while <span class=\"math\">V^{y}_{\\text{aux}}</span> by definition is the ground truth ideal outcome, it will also itself reflect a random division of validators during generation.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/e/4/e427ff3eddc10528a1ae16c782f8ef56b0a3a066.png\" data-download-href=\"https://ethresear.ch/uploads/default/e427ff3eddc10528a1ae16c782f8ef56b0a3a066\" title=\"Figure 17\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/e/4/e427ff3eddc10528a1ae16c782f8ef56b0a3a066_2_564x499.png\" alt=\"Figure 17\" data-base62-sha1=\"wymyvodPap9i5yr91hXDD410Vnw\" width=\"564\" height=\"499\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/e/4/e427ff3eddc10528a1ae16c782f8ef56b0a3a066_2_564x499.png, https://ethresear.ch/uploads/default/optimized/3X/e/4/e427ff3eddc10528a1ae16c782f8ef56b0a3a066_2_846x748.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/e/4/e427ff3eddc10528a1ae16c782f8ef56b0a3a066_2_1128x998.png 2x\" data-dominant-color=\"F6F5F8\"></a></div><p></p>\n<p><strong>Figure 17.</strong> Predictions of the optimal number of auxiliary validators compared to ground truth, based on the average of four reduced sets.</p>\n<h3><a name=\"p-50029-h-73-prediction-accuracy-using-general-features-20\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-73-prediction-accuracy-using-general-features-20\"></a>7.3 Prediction accuracy using general features</h3>\n<p>Can general features be used to determine the optimal number of auxiliary validators? To explore this, features were generated for the simulated validator sets, capturing basic properties such as validator count, deposit size, and various measures of variability. Polynomial feature expansion of degree 2 was used to generate all monomials of the original features, capturing interactions and non-linear relationships. Predictions were then made using multiple linear regression. The final features were selected through a semi-automatic forward feature selection process, manually choosing among top predictors to premier those that are easier to interpret (a key requirement is a simple model). This process resulted in a linear regression model consisting of three features: {<span class=\"math\">V\\sigma</span>, <span class=\"math\">V_w\\delta</span>, <span class=\"math\">D^2</span>}.</p>\n<p>The first feature is the number of validators <span class=\"math\">V</span> multiplied by the standard deviation of the validator set <span class=\"math\">\\sigma</span>. If the standard deviation is high, auxiliary validators become particularly useful for reducing the finality gap. The second feature multiplies the average absolute deviation, denoted <span class=\"math\">\\delta</span>, with a weighted count of validators <span class=\"math\">V_w</span>. The weighting assigned validators of size 32 and 2048 a weight of 1, with the weight then log-linearly falling to 0 at the mean validator size <span class=\"math\">\\bar{\\mathcal{V}}</span>. Specifically, each validator holding <span class=\"math\">s</span> ETH, received a weighting of:</p>\n<div class=\"math\">\n\\text{Weighted count}(s) = \n\\begin{cases}\n1 - \\frac{\\log(s) - \\log(32)}{\\log(\\bar{\\mathcal{V}}) - \\log(32)} &amp; \\text{if } s \\leq s_1 \\\\\n1 - \\frac{\\log(2048) - \\log(s)}{\\log(2048) - \\log(\\bar{\\mathcal{V}})}\n&amp; \\text{if } s &gt; s_1\n\\end{cases}.\n</div>\n<p>Predictions with <span class=\"math\">V^{x}_{\\text{aux}}&lt;0</span> were set to 0 (the number of auxiliary validators cannot be negative). The predictions had <span class=\"math\">R^2=0.975</span> and are shown in Figure 18. The wider dispersion in the lower left corner is somewhat problematic, as previously discussed. Option 4 therefore gives slightly worse outcomes than Option 3. Also note that since there was no training/test split, quite a bit of overfitting can be assumed. If Option 4 is to be pursued seriously, there would need to be a test set and a wider variety in training examples.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/8/c8872c73082ff82fefb3fb7ce62dab2bd031b5fe.png\" data-download-href=\"https://ethresear.ch/uploads/default/c8872c73082ff82fefb3fb7ce62dab2bd031b5fe\" title=\"Figure 18\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/8/c8872c73082ff82fefb3fb7ce62dab2bd031b5fe_2_564x499.png\" alt=\"Figure 18\" data-base62-sha1=\"sBX6l4Hcl4OguViNrgBYAqYa674\" width=\"564\" height=\"499\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/8/c8872c73082ff82fefb3fb7ce62dab2bd031b5fe_2_564x499.png, https://ethresear.ch/uploads/default/optimized/3X/c/8/c8872c73082ff82fefb3fb7ce62dab2bd031b5fe_2_846x748.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/8/c8872c73082ff82fefb3fb7ce62dab2bd031b5fe_2_1128x998.png 2x\" data-dominant-color=\"F6F5F7\"></a></div><p></p>\n<p><strong>Figure 18.</strong> Predictions of the optimal number of auxiliary validators compared to ground truth, based on general features capturing, e.g., variability in the validator set.</p>\n<h3><a name=\"p-50029-h-74-prediction-accuracy-using-a-fixed-number-of-auxiliary-committees-21\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-74-prediction-accuracy-using-a-fixed-number-of-auxiliary-committees-21\"></a>7.4 Prediction accuracy using a fixed number of auxiliary committees</h3>\n<p>It may also be interesting to review the outcome with a fixed number of auxiliary committees. The outcome when setting all examples to a fixed <span class=\"math\">C_{\\text{aux}}=2</span> is shown in Figure 19. It generates predictions in a vertical band that is <span class=\"math\">\\hat{V}_a</span> wide, with deviations from the ground truth extending well beyond <span class=\"math\">\\hat{V}_a</span>. Figure 20 instead focuses on the range 25-35M ETH. In this case predictions tend to fall within <span class=\"math\">\\hat{V}_a</span>, except for the log-normal distribution, which has several examples with little to no variability in validator balances (in that case, auxiliary slots bring no benefit). This illustrates that if <span class=\"math\">D</span> is kept in a narrow range, the variation in the optimal number of auxiliary committees/validators is reduced considerably. Starting with a fixed number of auxiliary committees is therefore a viable baseline strategy.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/3/6/3621612fbea7f760e82b240c1375c1e7a8b2d7c1.png\" data-download-href=\"https://ethresear.ch/uploads/default/3621612fbea7f760e82b240c1375c1e7a8b2d7c1\" title=\"Figure 19\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/3/6/3621612fbea7f760e82b240c1375c1e7a8b2d7c1_2_563x500.png\" alt=\"Figure 19\" data-base62-sha1=\"7IRix8erkKms4z41hBKrSkjExIB\" width=\"563\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/3/6/3621612fbea7f760e82b240c1375c1e7a8b2d7c1_2_563x500.png, https://ethresear.ch/uploads/default/optimized/3X/3/6/3621612fbea7f760e82b240c1375c1e7a8b2d7c1_2_844x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/3/6/3621612fbea7f760e82b240c1375c1e7a8b2d7c1_2_1126x1000.png 2x\" data-dominant-color=\"F5F3F7\"></a></div><p></p>\n<p><strong>Figure 19.</strong> Predictions of the optimal number of auxiliary validators compared to ground truth, with a fixed <span class=\"math\">C_{\\text{aux}}=2</span>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/2/d2d1b3f17a10ce1ce87327404385f1eba9dd8068.png\" data-download-href=\"https://ethresear.ch/uploads/default/d2d1b3f17a10ce1ce87327404385f1eba9dd8068\" title=\"Figure 20\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/2/d2d1b3f17a10ce1ce87327404385f1eba9dd8068_2_563x500.png\" alt=\"Figure 20\" data-base62-sha1=\"u4Zyq9YpkHPNVBWNasQRmqknj7y\" width=\"563\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/2/d2d1b3f17a10ce1ce87327404385f1eba9dd8068_2_563x500.png, https://ethresear.ch/uploads/default/optimized/3X/d/2/d2d1b3f17a10ce1ce87327404385f1eba9dd8068_2_844x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/2/d2d1b3f17a10ce1ce87327404385f1eba9dd8068_2_1126x1000.png 2x\" data-dominant-color=\"F9F9FA\"></a></div><p></p>\n<p><strong>Figure 20.</strong> Predictions of the optimal number of auxiliary validators compared to ground truth, with a fixed <span class=\"math\">C_{\\text{aux}}=2</span>, for validator sets in the range <span class=\"math\">D=</span> 25M-35M ETH.</p>\n<h2><a name=\"p-50029-h-8-properties-related-to-consensus-formation-22\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-8-properties-related-to-consensus-formation-22\"></a>8. Properties related to consensus formation</h2>\n<h3><a name=\"p-50029-h-81-committee-rotation-ratio-23\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-81-committee-rotation-ratio-23\"></a>8.1 Committee rotation ratio</h3>\n<p>Define the committee rotation ratio <span class=\"math\">R</span> as the proportion of the stake that is replaced in successive committees following finalization. If all validators are replaced, <span class=\"math\">R=1</span>, and if all remain, <span class=\"math\">R=0</span>. Figure 21 shows how <span class=\"math\">R</span> changes across <span class=\"math\">V_{\\text{aux}}</span> at 30M ETH staked. Aside from the relevance to the slow-rotation regime of the available chain, a ceiling has previously been <a href=\"https://ethresear.ch/t/a-model-for-cumulative-committee-based-finality/10259#alternative-single-slot-epoch-casper-ffg-3\">discussed</a> for a finality gadget leveraging Casper FFG. That suggestion, <span class=\"math\">R=0.25</span>, is indicated by a black horizontal line. The circles indicate the point where the aggregate finality gap is minimized (<span class=\"math\">V^*_{\\text{aux}}</span>). This happens at rather modest rotation ratios and can of course readily be adjusted. Rotation becomes comparatively slow after adding around 150k auxiliary validator instances (<span class=\"math\">C_{\\text{aux}}\\approx5</span>), where 90% of the stake remains whenever a committee finalizes and rotates.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/9/b9b1d8106767f5edb53d135da3da373450034380.png\" data-download-href=\"https://ethresear.ch/uploads/default/b9b1d8106767f5edb53d135da3da373450034380\" title=\"Figure 21\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/9/b9b1d8106767f5edb53d135da3da373450034380_2_690x474.png\" alt=\"Figure 21\" data-base62-sha1=\"quJmnRtuZBFvxBOIwIeNdb5MpEY\" width=\"690\" height=\"474\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/9/b9b1d8106767f5edb53d135da3da373450034380_2_690x474.png, https://ethresear.ch/uploads/default/optimized/3X/b/9/b9b1d8106767f5edb53d135da3da373450034380_2_1035x711.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/9/b9b1d8106767f5edb53d135da3da373450034380_2_1380x948.png 2x\" data-dominant-color=\"F8F8FB\"></a></div><p></p>\n<p><strong>Figure 21.</strong> Committee rotation ratio <span class=\"math\">R</span> across auxiliary validators. Circles indicate the point where the aggregate finality gap is minimized.</p>\n<h3><a name=\"p-50029-h-82-activity-rate-24\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-82-activity-rate-24\"></a>8.2 Activity rate</h3>\n<p>The activity rate <span class=\"math\">a</span> captures the proportion of the committees that a validator is active in (defined as <span class=\"math\">p</span> in the <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#active-validator-set-management-8\">Orbit post</a>). The reciprocal <span class=\"math\">a^{-1}</span> captures the average number of slots until the validator has participated in one of them and will be referred to as a validator’s “<a href=\"https://en.wikipedia.org/wiki/Apsis\">apsis</a>”—its orbital distance.</p>\n<p>Figure 22 shows how <span class=\"math\">a</span> varies with validator size <span class=\"math\">s</span> when the aggregate finality gap is minimized (at <span class=\"math\">V^*_{\\text{aux}}</span> marked by circles in Figure 21). As evident, <span class=\"math\">a(s)</span> is not a fixed property across validator sets, and will vary with, e.g., consolidation level and deposit size. Leveraging a variable orbit (“Vorbit”) seems natural, because a multitude of features that Ethereum wishes to optimize for vary with the composition of the validator set (a <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#active-validator-set-management-8\">dynamic threshold</a> has also previously been suggested).</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/a/ca23deafe8d0c0ba47e93cec6d46fa38284b7f8b.png\" data-download-href=\"https://ethresear.ch/uploads/default/ca23deafe8d0c0ba47e93cec6d46fa38284b7f8b\" title=\"Figure 22\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/a/ca23deafe8d0c0ba47e93cec6d46fa38284b7f8b_2_689x474.png\" alt=\"Figure 22\" data-base62-sha1=\"sQdiAIVeZ5U9Of4quHPCu7ndD5h\" width=\"689\" height=\"474\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/a/ca23deafe8d0c0ba47e93cec6d46fa38284b7f8b_2_689x474.png, https://ethresear.ch/uploads/default/optimized/3X/c/a/ca23deafe8d0c0ba47e93cec6d46fa38284b7f8b_2_1033x711.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/a/ca23deafe8d0c0ba47e93cec6d46fa38284b7f8b_2_1378x948.png 2x\" data-dominant-color=\"F7F7F9\"></a></div><p></p>\n<p><strong>Figure 22.</strong> The activity rate <span class=\"math\">a</span> across validator balances <span class=\"math\">s</span> at the minimized aggregate finality gap and 30M staked for the five sets. Note that the x-axis is log-scaled.</p>\n<h3><a name=\"p-50029-h-83-the-activity-ratio-and-its-implications-on-staking-economics-25\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-83-the-activity-ratio-and-its-implications-on-staking-economics-25\"></a>8.3 The activity ratio and its implications on staking economics</h3>\n<p>The activity ratio <span class=\"math\">a_r = a(s_{\\mathrm{min}})/a(s_{\\mathrm{max}})</span> captures how often validators with a small balance are active, relative to validators with larger balances. The apsis ratio again denotes the reciprocal <span class=\"math\">a^{-1}_r</span> and can sometimes be easier to interpret: <span class=\"math\">a^{-1}_r=32</span> means that small validators are present 32 times less frequenly than big validators. When <span class=\"math\">a_r</span> is small (and <span class=\"math\">a^{-1}_r</span> thus big), stakers running validators with a lower balance close to <span class=\"math\">s_{\\mathrm{min}}</span> will <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#individual-consolidation-incentives-12\">bear a lower slashing risk</a> than stakers running validators with higher balances close to <span class=\"math\">s_{\\mathrm{max}}</span>. Inactive validators can hardly (by mistake or otherwise) make slashable actions. Someone running many small validators can therefore catch a faulty setup early so that a lower proportion of their validators are affected. Likewise, a small validator is less likely to get caught up in a <a href=\"https://dankradfeist.de/ethereum/2022/03/24/run-the-majority-client-at-your-own-peril.html\">catastrophic</a> slashing event. Even if such an event only takes place every 100 years, it still meaningfully impacts the expected value of staking, particularly if the total staking yield decreases in the future.</p>\n<p>In a slow-rotating mechanism, <span class=\"math\">a_r</span> is particularly relevant, given that stakers with a high average apsis on their validators can have even more time to, e.g., adjust faulty setups for inactive validators before they return as active. Yet <span class=\"math\">a_r</span> is relevant also in a fast-rotating mechanism. To encourage consolidation, <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#individual-consolidation-incentives-12\">individual incentives</a> should compensate for the additional risks that large validators take on, relative to small validators. Individual incentives can potentially also be combined with collective consolidation incentives. The individual incentives will generally need to be higher when <span class=\"math\">a_r</span> is smaller, because the benefit of running smaller validators increases. It is therefore desirable to keep <span class=\"math\">a_r</span> closer to 1, whenever possible. This minimizes the yield differential between small and large validators, reducing “tensions” among stakers. Such tensions emerge under high yield differentials, where Ethereum will favor (or at least appear to favor) stakers with more capital.</p>\n<p>Even if the additional yield is intended to compensate for increased risks, only stakers with high capital will have the option to choose between higher and lower risk. Stakers with more capital will also disproportionately benefit from the ability to adjust faulty setups among one of their many validators, should they decide to split up their stake. Tensions may therefore also emerge if a large staking service provider (SSP) relies on small validators to reduce its risk profile, and <a href=\"https://ethresear.ch/t/orbit-ssf-solo-staking-friendly-validator-set-management-for-ssf/19928#collective-incentives-15\">collective incentives</a> as a result bring down everyone’s yield. There may for example be calls to discouragement attack the specific SSP’s validators, introducing an unhealthy dynamic to consensus formation. There are similarities to the type of issues that may emerge in <a href=\"https://ethresear.ch/t/mev-burn-a-simple-design/15590\">MEV burn</a> when using an English auction, where SSPs will need to <a href=\"https://ethresear.ch/t/burn-incentives-in-mev-pricing-auctions/19856#d-metagame-staker-initiated-griefing-9\">specifically target each other</a> through early builder bids to remain competitive.</p>\n<p>In Figure 22, <span class=\"math\">a_r</span> is approximately 1/6 for the Zipfian staking set at <span class=\"math\">p=2</span>. Validators with 2048 ETH are always present, and validators with 32 ETH are only present as regular validators in one of the 6 committees of the epoch. This situation is generally better than if the smallest validators only are present once every 32 slots, as with the Orbit thresholding mechanism. The Orbit thresholding mechanism can however be adjusted by setting <span class=\"math\">p&lt;1</span>. In a subsequent post, addressing slow rotation for the available chain, that avenue is intended to be explored further, together with other related consensus issues beyond the scope of this post.</p>\n<p>Allowing 1-ETH validators would further reduce the activity ratio, requiring an increased yield differential. Smaller validator balances such as 1 ETH will thus require a communication effort to explain why these validators receive a markedly lower yield, and why large staking service providers cannot be prevented from relying on 1-ETH validators to lower their risk profile (but certainly nudged in the opposite direction via public discourse).</p>\n<h2><a name=\"p-50029-h-9-conclusion-and-discussion-26\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-h-9-conclusion-and-discussion-26\"></a>9. Conclusion and discussion</h2>\n<p>Cumulative committee-based finality has been reviewed under fast-rotating validator committees. A good measure for evaluating cumulative finality is the aggregate finality gap <span class=\"math\">\\widetilde{F}_{\\!g}</span>, which aggregates the finality gap for a block during its progression to full finality. The four main avenues for reducing (improving) <span class=\"math\">\\widetilde{F}_{\\!g}</span> are:</p>\n<ul>\n<li>adding a few auxiliary committees (around 2-4) beyond those required for all validators to cast one vote in an epoch,</li>\n<li>including the largest validators in almost every committee,</li>\n<li>equally spacing auxiliary validators to minimize successive repetitions,</li>\n<li>pursuing “circular finality” (repeating epochs over a longer era) and “spiral finality” (constrained shuffling) to mitigate degradation in cumulative finality during shuffling.</li>\n</ul>\n<p>Five validator sets were used in the analysis, capturing various levels of Zipfianness. <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-6-analysis-across-d-16\">Section 6</a> made it clear that both insufficient validator consolidation and a higher quantity of stake (keeping the distributions fixed) impede finality, thereby increasing <span class=\"math\">\\widetilde{F}_{\\!g}</span>. When considering tempering the quantity of stake, one argument has been that it will generate a higher quantity of small validators. Regardless of the merits of this theory, it should be noted that a higher quantity of stake and a large proportion of small validators combines to produce the worst conditions for accruing finality, as shown in Figure 13.</p>\n<p>Methods for dynamically adjusting the number of auxiliary commitees were reviewed. The best method is to simply simulate and evaluate the outcome with the same or one more/less auxiliary committees. This can be done on a reduced validator set to improve performance, if necessary. However, it is not a strict requirements that the number of auxiliary slots should change dynamically. The optimal setting for a given point in time is likely to remain viable for quite a while.</p>\n<p>Properties related to consensus formation are important to keep in mind. As shown in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-8-properties-related-to-consensus-formation-22\">Section 8</a>, the committee rotation ratio <span class=\"math\">R</span> falls rather quickly with added auxiliary validators. It would be beneficial to map out more specific requirements on <span class=\"math\">R</span> from a consensus perspective going forward, both for the available chain and the finality gadget. Requirements regarding the activity ratio <span class=\"math\">a_r</span> are easier to understand in some respects; a higher ratio is better when considered in isolation, as it reduces tensions and yield differentiation.</p>\n<p>The assumption of a pure Zipfian staking distribution becomes rather dubious if the range is extended much further. If the minimum staking balance is reduced from 32 ETH to 1 ETH, there will not necessarily be an exponential increase in stakers. One reason is that fixed costs for running a validator eventually surpass yield revenue as the staking balance decreases. For example, when focusing exclusively on fixed costs, if running a 32-ETH validator requires a 1% yield to remain profitable, then running a 1-ETH validator would require a 32% yield. Another point to keep in mind when considering a move to allow for 1-ETH validators is the decreased activity ratio <span class=\"math\">a_r</span> that it would bring. At the same time, allowing users with less capital to become active participants in the consensus process is of course fundamentally valuable and something to strive for.</p>\n<hr>\n<hr>\n<h2><a name=\"p-50029-appendix-a-zipfian-distribution-27\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-appendix-a-zipfian-distribution-27\"></a>Appendix A: Zipfian distribution</h2>\n<h3><a name=\"p-50029-a1-quantity-of-stakers-under-a-pure-zipfian-distribution-28\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-a1-quantity-of-stakers-under-a-pure-zipfian-distribution-28\"></a>A.1 Quantity of stakers under a pure Zipfian distribution</h3>\n<p>For large <span class=\"math\">N</span>, the harmonic series</p>\n<div class=\"math\">\n1 + \\frac{1}{2} + ... + \\frac{1}{N}\n</div>\n<p>approaches <span class=\"math\">\\ln(N)+\\gamma</span>, where <span class=\"math\">\\gamma</span> is the Euler–Mascheroni constant, approximately 0.577. The total quantity of stake is</p>\n<div class=\"math\">\nD = 32N(\\ln(N)+\\gamma)\n</div>\n<p>The task now is to deduce <span class=\"math\">N</span>, given a specific <span class=\"math\">D</span>. Let <span class=\"math\">u = \\ln(N) + \\gamma</span>. Then <span class=\"math\">N = e^{u - \\gamma}</span>, and the equation can be rearranged as follows:</p>\n<div class=\"math\">\n\\frac{D}{32}e^\\gamma = u e^{u}\n</div>\n<p>Use the definition of the Lambert W function, which gives <span class=\"math\">u = W(z)</span>, where<br>\n<span class=\"math\">z = \\frac{D}{32} e^\\gamma</span>:</p>\n<div class=\"math\">\nu = W \\left( \\frac{D}{32} e^\\gamma \\right)\n</div>\n<p>Recall that <span class=\"math\">u = \\log(N) + \\gamma</span>. Substituting this in gives</p>\n<div class=\"math\">\n\\log(N) + \\gamma = W \\left( \\frac{D}{32} e^\\gamma \\right),\n</div>\n<p>and thus</p>\n<div class=\"math\">\n\\log(N) = W \\left( \\frac{D}{32} e^\\gamma \\right) - \\gamma.\n</div>\n<p>Both sides are finally exponentiated to solve for <span class=\"math\">N</span>:</p>\n<div class=\"math\">\nN = e^{ W \\left( \\frac{D}{32} e^\\gamma \\right) - \\gamma}\n</div>\n<p>The equation provides a simple way to deduce <span class=\"math\">N</span> given <span class=\"math\">D</span>, such that the baseline Zipfian distribution in the form of the harmonic series can be used in accordance with the previous specification. The following two lines of Python code generate the staking set <code>S</code> for a specific deposit size, where <code>eg=np.euler_gamma</code>:</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">N = round(np.exp(scipy.special.lambertw(D*np.exp(eg)/(32))-eg))\nS = 32*N/np.arange(1, N + 1)\n</code></pre>\n<h3><a name=\"p-50029-a2-quantity-of-validators-under-a-pure-zipfian-distribution-29\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-a2-quantity-of-validators-under-a-pure-zipfian-distribution-29\"></a>A.2 Quantity of validators under a pure Zipfian distribution</h3>\n<p>Recall that the number of stakers is as previously derived</p>\n<div class=\"math\">\nN = e^{ W \\left( \\frac{D}{32} e^\\gamma \\right) - \\gamma}.\n</div>\n<p>Among these <span class=\"math\">N</span> stakers, 1/64 will have a stake of 2048 or higher:</p>\n<div class=\"math\">\n2048 = \\frac{32N}{N_{h}},\n</div>\n<div class=\"math\">\nN_{h} = \\frac{N}{64}.\n</div>\n<p>Under ideal circumstances, that stake will be divided up into</p>\n<div class=\"math\">\nV_{h} = \\frac{1}{2048}\\sum_{n=1}^{N_h} \\frac{32N}{n} = \\frac{32N}{2048} \\cdot (\\ln(N/64) + \\gamma) = \\frac{N}{64} \\cdot (\\ln(N/64) + \\gamma)\n</div>\n<p>validators. However, the <span class=\"math\">\\frac{N}{64}</span> stakers will roughly add an expected <span class=\"math\">\\gamma</span> validators each to that figure, due to waste when splitting up stake into its last validators (i.e., the cumulative effect of the fractional parts). There are <span class=\"math\">63N/64</span> stakers with less than 2048 ETH. The total number of validators under a pure Zipfian distribution, where stakers maximize consolidation, is thus</p>\n<div class=\"math\">\nV=\\frac{N}{64} \\left(63+\\ln(N/64) + 2\\gamma \\right).\n</div>\n<p>The equation is a fairly exact approximation. For example, at 30M ETH, the outlined procedure gives 88065 validators, and the equation (after rounding <span class=\"math\">N</span> in the first step) gives 88065.385 validators.</p>\n<h2><a name=\"p-50029-appendix-b-prediction-and-evaluation-30\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-appendix-b-prediction-and-evaluation-30\"></a>Appendix B: Prediction and evaluation</h2>\n<h3><a name=\"p-50029-b1-evaluation-procedure-31\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-b1-evaluation-procedure-31\"></a>B.1 Evaluation procedure</h3>\n<p>Cumulative finality of a block is simulated by a boolean mask that iterates through the committees, entering every validator seen up to and including a particular slot/committee. Thus, the starting point is a binary mask of all validators in the committee of the first processed slot. The operation then progresses through the slots of the epoch, entering previously unseen validators from a committee to the binary mask applicable to a specific slot. Finalized validators are then summed at each slot, from which <span class=\"math\">D_f</span> and thus <span class=\"math\">\\widetilde{F}_ {\\! g}</span> are computed. For best accuracy, the evaluation is performed in a circular fashion, as previously discussed. If <span class=\"math\">S_{\\text{ep}}</span> is high, there can be an upper limit on how many starting points that are evaluated, e.g., starting at every other or every third slot. The evaluation for <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-6-analysis-across-d-16\">Section 6</a> used a limit of ten different starting points.</p>\n<p>A potential optimization is to also compute a separate mask (or list of indices) that specifies only the newly unseen validators for each slot. This mask/list specifies if the validator is present in the current committee <code>AND</code> <code>NOT</code> present in the cumulative finality mask computed up to the previous committee. The benefit is that summation can be done only of the newly added validators, subsequently adding the cumulative sum derived at the previous slot/committee.</p>\n<h3><a name=\"p-50029-b2-weighted-aggregate-finality-gap-32\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-b2-weighted-aggregate-finality-gap-32\"></a>B.2 Weighted aggregate finality gap</h3>\n<p>The aggregate finality gap <span class=\"math\">\\widetilde{F}_ {\\! g}</span> generally seems like a well-balanced optimization criterion. Yet in some scenarios, it may be desirable to prioritize high finality in the initial slots (thus also slowing down rotation), while in others, a short time to full finality overall may be preferred (thus also increasing the activity ratio discussed in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-83-the-activity-ratio-and-its-implications-on-staking-economics-25\">Section 8.3</a>). A weighted aggregate finality gap can therefore be useful. This post used a weighting that provides a slightly shorter time to full finality on average. This helped resolve edge cases in the log-normal set (Appendix B.4) where the mechanism was brought very close to full finality, but the last fraction of finality took several slots. However, the opposite direction can also be explored, factoring in, for example, requirements concerning rotation speed.</p>\n<p>Define a scenario where full finality can be achieved in 2 regular slots, but two auxiliary validators are added, as {2|4}. The weighting was designed to affect the following outcomes equally: {2|4}, {4|7}, {10|15} and {21|28}. This weighting for {<span class=\"math\">a</span>|<span class=\"math\">b</span>} was:</p>\n<div class=\"math\">\nw = \\frac{b\\sqrt[3]{b-a}}{ka}.\n</div>\n<p>The constant <span class=\"math\">k</span> was set to <span class=\"math\">2^6</span> and the weight applied to each evaluated number of auxiliary slots. This can be done in two ways: <span class=\"math\">\\widetilde{F}_ {\\! gw} = \\widetilde{F}_ {\\! g}(1+w)</span> or <span class=\"math\">\\widetilde{F}_ {\\! gw} = \\widetilde{F}_ {\\! g} \\ +w</span>, with the first being used in this work.</p>\n<h3><a name=\"p-50029-b3-interpolated-ground-truth-33\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-b3-interpolated-ground-truth-33\"></a>B.3 Interpolated ground truth</h3>\n<p>The ground truth for modeling was not auxiliary committees <span class=\"math\">C_{\\text{aux}}</span> but instead the number of auxiliary validators <span class=\"math\">V_{\\text{aux}}</span> to be added. The main reason  why <span class=\"math\">C_{\\text{aux}}</span> is generally undesirable as a ground truth is related to the fin-like pattern in Figures 11-12. The optimal <span class=\"math\">C_{\\text{aux}}</span> will shift at the boundaries where regular committees require one more regular slot, causing the ground truth to oscillate as <span class=\"math\">D</span> rises. Targeting auxiliary validators avoids this issue. The total number of committees <span class=\"math\">C</span> shown in Figure 14 could have been used as well, but this precludes parabolic interpolation with <span class=\"math\">\\widetilde{F}_ {\\! gw}</span> for the regular committee  as one of the interpolation points.</p>\n<p>A remaining issue is that the <span class=\"math\">V_{\\text{aux}}</span> that minimizes <span class=\"math\">\\widetilde{F}_ {\\! gw}</span> is discretized into steps differing by <span class=\"math\">\\hat{V}_ {\\!a}</span>, since the minimum can only be defined at integers in <span class=\"math\">C_ {\\text{aux}}</span>. Define the number of auxiliary committees that minimizes <span class=\"math\">\\widetilde{F}_ {\\! gw}</span> as <span class=\"math\">C^*_{\\text{aux}}</span>. Parabolic interpolation was performed across the three neighboring points, <span class=\"math\">\\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}-1)</span>, <span class=\"math\">\\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}})</span> and <span class=\"math\">\\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}+1)</span> to derive a relative position:</p>\n<div class=\"math\">\nw_{V} = \\frac{\\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}+1)-\\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}-1)}{2(2\\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}) - \\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}-1) - \\widetilde{F}_ {\\! gw}(C^*_{\\text{aux}}+1))}.\n</div>\n<p>Define <span class=\"math\">V_{\\text{aux}}(C^*_{\\text{aux}})</span> as the number of auxiliary validators at the optimal number of auxiliary committees. The ground truth <span class=\"math\">V^{y}_{\\text{aux}}</span> is given by the <span class=\"math\">w_{V}</span>-weighted average of neighboring values. Thus, if <span class=\"math\">w_{V}&lt;0</span>, it becomes</p>\n<div class=\"math\">\nV^{y}_{\\text{aux}}=V_{\\text{aux}}(C^*_{\\text{aux}}-1)(1-w_{V}) + V_{\\text{aux}}(C^*_{\\text{aux}})w_{V},\n</div>\n<p>with a corresponding weighting applied if <span class=\"math\">w_{V}&gt;0</span>. Predictions for the number of auxiliary validators in <a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464#p-50029-h-7-predicting-the-optimal-number-of-auxiliary-committees-17\">Section 7</a> are correspondigly defined as <span class=\"math\">V^{x}_{\\text{aux}}</span>.</p>\n<h3><a name=\"p-50029-b4-generation-of-a-log-normal-distributed-validator-set-34\" class=\"anchor\" href=\"https://ethresear.ch#p-50029-b4-generation-of-a-log-normal-distributed-validator-set-34\"></a>B.4 Generation of a log-normal distributed validator set</h3>\n<p>To provide a wider variety of examples of validator sets, an additional set with a log-normal distribution was generated. The mean <span class=\"math\">\\mu_{\\mathcal{V}}</span> was first drawn from a normal distribution centered at 400 ETH with a standard deviation of 128 ETH, restricted to lie within the range <span class=\"math\">s_{\\text{min}} = 32</span> ETH to <span class=\"math\">s_{\\text{max}} = 2048</span> ETH. Next, the standard deviation <span class=\"math\">\\sigma</span> of the log-normal distribution was drawn uniformly from the interval [0, 3]. To provide edge cases with validator sets that have no variability at all, any <span class=\"math\">\\sigma</span> below 0.2 was set to 0.</p>\n<p>Given the selected mean <span class=\"math\">\\mu_{\\mathcal{V}}</span> and standard deviation <span class=\"math\">\\sigma</span>, the mean of the log-normal distribution in the logarithmic space <span class=\"math\">\\mu</span> was computed as</p>\n<div class=\"math\">\n\\mu = \\ln(\\mu_{\\mathcal{V}}) - \\frac{\\sigma^2}{2},\n</div>\n<p>with the goal of keeping the mean in the original space close to <span class=\"math\">\\mu_{\\mathcal{V}}</span>. Validators were then generated up to the sought quantity of stake <span class=\"math\">D</span> by sampling from a log-normal distribution defined by the parameters <span class=\"math\">\\mu</span> and <span class=\"math\">\\sigma</span>, ensuring that each generated validator remained within the bounds <span class=\"math\">s_{\\text{min}}</span> to <span class=\"math\">s_{\\text{max}}</span>.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464\">Read full topic</a></p>","link":"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464","pubDate":"Fri, 20 Sep 2024 18:44:41 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20464"},"source":{"@url":"https://ethresear.ch/t/vorbit-ssf-with-circular-and-spiral-finality-validator-selection-and-distribution/20464.rss","#text":"Vorbit SSF with circular and spiral finality: validator selection and distribution"},"filter":false},{"title":"Privacy Problems in the P2P Network and What They Tell Us","dc:creator":"liobaheimbach","category":"Networking","description":"<p>Authors: <a href=\"https://liobaheimba.ch/\" rel=\"noopener nofollow ugc\">Lioba Heimbach</a>, <a href=\"https://yannvonlanthen.com/\" rel=\"noopener nofollow ugc\">Yann Vonlanthen</a>, Juan Villacis, <a href=\"https://luciannakiffer.com/\" rel=\"noopener nofollow ugc\">Lucianna Kiffer</a>, <a href=\"https://disco.ethz.ch/\" rel=\"noopener nofollow ugc\">Roger Wattenhofer</a></p>\n<p>Preprint: <a href=\"https://arxiv.org/abs/2409.04366\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">[2409.04366] Deanonymizing Ethereum Validators: The P2P Network Has a Privacy Issue</a></p>\n<h2><a name=\"p-50027-tldr-1\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-tldr-1\"></a>TL;DR</h2>\n<p>The messages exchanged in the Ethereum P2P network allow a silent observer to deanonymize validators in the network, i.e., map a validator to an IP address of a node in the network. Our deanonymization technique is simple, cost-effective, and capable of identifying over 15% of Ethereum’s validators with only three days of data. This post discusses the technique, its implications, and potential mitigations to protect validators’ privacy in the P2P network.</p>\n<h2><a name=\"p-50027-background-2\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-background-2\"></a>Background</h2>\n<p>Ethereum’s P2P network is what allows validators to exchange important messages like blocks and attestations, which keeps the blockchain running. With over a million validators, it’s not practical for each one to send a vote (attestation) to every node for every block, especially to keep Ethereum accessible to solo stakers. To make things manageable, voting (i.e., attestations by validators) is divided in two main ways:</p>\n<p><strong>Time Division Across Slots</strong>: Validators only need to vote once per epoch (i.e., once every 32 slots), in a random slot. Thus, only a fraction are voting in a given slot.</p>\n<p><strong>Network Division Across Committees</strong>: Validators are split into 64 <em>committees</em>. Within each committee, a set of validators is assigned as <em>aggregators</em> that collect and combine attestations into a single aggregate. This division of attestations into committees is further mirrored in the network layer, which is also divided into 64 attestation <em>subnets (overlay sub-networks)</em>. Each committee is assigned to one of these 64 subnets, and the corresponding attestations are broadcast only within the respective subnet. These subnets are also referred to as <em>topics</em> in the context of GossipSub,  the underlying P2P implementation used by Ethereum.</p>\n<p><strong>Attestation Propagation in GossipSub:</strong> When a validator signs an attestation, it gets published to its specified subnet by sending it to a subset of peers that are part of the subnet. The node hosting a validator does not need to be subscribed to this specific subnet, since their committee changes every epoch. Instead, each node in the network subscribes to two subnets by default, and participates in propagating attestations only in these two subnets - these are known as <em>backbone duties</em>. Additionally, each node maintains a connection with at least one peer in each subnet so that their own attestations can be sent to the correct subnet in one hop.</p>\n<h2><a name=\"p-50027-deanonymization-approach-3\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-deanonymization-approach-3\"></a>Deanonymization Approach</h2>\n<p>Given the background on Ethereum node behavior, we describe how an ideal peer (a peer who gives us perfect information) would behave. Let us assume we are connected to a peer running <span class=\"math\">V</span> validators who is a backbone in two subnets. The peer’s validators will attest <span class=\"math\">V</span> times per epoch. Let us assume we receive perfect information from this peer, meaning they forward all attestations they hear about in their two backbones to us. In each epoch, we will receive <span class=\"math\">V</span> attestations from our peer for their validators, and <span class=\"math\">N\\cdot \\frac{2}{64}</span> for all other <span class=\"math\">N</span>  validators.</p>\n<p><strong>Observation:</strong> An ideal peer will only send us an attestation in a subnet they are not a backbone of if they are the signer of the attestation.</p>\n<p>Thus, in this scenario, we receive all attestations for the <span class=\"math\">V</span> validators of the peer and can distinguish them as the only attestations we do not receive from the two backbones of the peer. Thus, linking validators to peers in this scenario is trivial.</p>\n<h3><a name=\"p-50027-case-study-4\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-case-study-4\"></a>Case Study</h3>\n<p>In practice, however, network message data is not perfect. To showcase this, we plot the attestations received from an example peer across time and subnets. On this peer, we will identify four validators associated with the peer; their respective attestations are highlighted in red, blue, yellow, and green, while the remaining attestations are shown in pink. Notice that the attestations from these four validators, who happen to have consecutive identifiers, appear equally distributed across subnets. In contrast, the vast majority of attestations come from the two subnets where the peer acts as a backbone (subnets 12 and 13 for the sample peer). Thus, we can locate validators on our peers by observing how the attestations belonging to a validator, which we receive from the peer, are distributed across subnets.</p>\n<p>Additionally, and this is where the imperfect information comes into play, the validators hosted on the peer are occasionally tasked with being aggregators in a subnet approximately every 30 epochs per validator. During these times, they temporarily become a backbone (smaller pink horizontal strips) for these subnets and receive attestations from multiple validators belonging to the subnet.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/8/c/8c8f040874963de5a0c732cf369fb3fde4802d4a.png\" data-download-href=\"https://ethresear.ch/uploads/default/8c8f040874963de5a0c732cf369fb3fde4802d4a\" title=\"casestudy\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/8/c/8c8f040874963de5a0c732cf369fb3fde4802d4a_2_690x388.png\" alt=\"casestudy\" data-base62-sha1=\"k3rfQV7785SeHeSl3QRpWnU7hDI\" width=\"690\" height=\"388\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/8/c/8c8f040874963de5a0c732cf369fb3fde4802d4a_2_690x388.png, https://ethresear.ch/uploads/default/optimized/3X/8/c/8c8f040874963de5a0c732cf369fb3fde4802d4a_2_1035x582.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/8/c/8c8f040874963de5a0c732cf369fb3fde4802d4a_2_1380x776.png 2x\" data-dominant-color=\"F4F3F3\"></a></div><p></p>\n<h3><a name=\"p-50027-heuristics-5\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-heuristics-5\"></a>Heuristics</h3>\n<p>Based on the above observations and other network behaviors which lead to imperfect information such as temporary disconnects, we develop a set of heuristics to link a validator with a node. We verify our results  (see <a href=\"https://arxiv.org/abs/2409.04366\" rel=\"noopener nofollow ugc\">pre-print</a> for more details).</p>\n<h3><a name=\"p-50027-comparison-to-other-approaches-6\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-comparison-to-other-approaches-6\"></a>Comparison to Other Approaches</h3>\n<p>We are aware of three existing approaches to deanonymize peers in the P2P network that, similarly to us, only rely on observing messages.</p>\n<p>A <a href=\"https://ethresear.ch/t/packetology-validator-privacy/7547\">research post</a> explores mapping validators to peers by observing which peer consistently first broadcasts a block. There also exists a <a href=\"https://medium.com/hoprnet/proof-of-stake-validator-sniping-research-8670c4a88a1c\" rel=\"noopener nofollow ugc\">medium post</a> that discusses using attestation arrival times in a similar fashion. The presented analysis is based on data collected on the Gnosis Beacon Chain. Finally, in parallel to our work, a further <a href=\"https://ethresear.ch/t/estimating-validator-decentralization-using-p2p-data/19920\">research post</a> discussed using dynamic subscriptions to deanonymize validators in the P2P network.</p>\n<p>We believe that compared to these approaches our method requires significantly less data or concurrent network connections (in the case of timing analyses). Further, it is less prone to noise  in comparison to those approaches based on arrival times and also works if a node hosts more than 62 validators (this is the limit of the approach based on dynamic subscriptions). Thus, we suspect it to be able to more precisely deanonymize a larger proportion of the network in less time.</p>\n<h2><a name=\"p-50027-measurement-results-7\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-measurement-results-7\"></a>Measurement Results</h2>\n<p>By deploying our logging client across four nodes over a period of three days, we were able to deanonymize more than <strong>15% of Ethereum’s validators</strong> in the P2P network. Our nodes were located in Frankfurt (FR), Seoul (SO), Virginia (VA), and Zurich (ZH). By deploying a greater number of nodes and running the measurement for longer, we presume this figure would increase.</p>\n<p>With the data we collected, we can also make additional observations about the geographic decentralization and hosting of validators, as well as the behavior of staking pools.</p>\n<h3><a name=\"p-50027-geographic-decentralization-8\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-geographic-decentralization-8\"></a>Geographic Decentralization</h3>\n<p>We show the distribution of validators across countries in the following figure both overall and  separately for the four nodes we ran. We locate the largest proportion (around 14%) in the Netherlands. Further, 71.53% of the validators we locate are in Europe, 11.95% are in North America, 11.52% are in Asia, 4.90% are in Oceania, 0.06% are in Africa and 0.03% are in South America.</p>\n<p>Additionally, we notice geographical biases, e.g., the SO node’s high relative proportion of deanonymizations in Australia and South Korea. Thus, we presume that the skew towards Europe could be a result of us running two out of the four nodes in Europe.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/f/4/f45fb3a3f65719354e1dc95150461dccb139b567.png\" data-download-href=\"https://ethresear.ch/uploads/default/f45fb3a3f65719354e1dc95150461dccb139b567\" title=\"country_validators\"><img src=\"https://ethresear.ch/uploads/default/original/3X/f/4/f45fb3a3f65719354e1dc95150461dccb139b567.png\" alt=\"country_validators\" data-base62-sha1=\"yRPxErKSvIawlAJeXNViX7xtCrZ\" width=\"690\" height=\"218\" data-dominant-color=\"E7EAEC\"></a></div><p></p>\n<h3><a name=\"p-50027-cloud-hosting-9\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-cloud-hosting-9\"></a>Cloud Hosting</h3>\n<p>We perform a similar analysis to understand how peers are run - if they run hosted on cloud providers or through residential ISP (likely home stakers). Overall, around 90% of the validators we locate are run through cloud providers, with the other 10% belonging to residential ISPs. We plot the distribution across organizations and find that  eight out of the ten largest organizations are cloud providers. Further, we locate the largest number of validators in Amazon data centers, i.e., 19.80% of the validators we locate.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/d/bdf51bb01378fcc59ecf23b602ee18f3e0dd65fd.png\" data-download-href=\"https://ethresear.ch/uploads/default/bdf51bb01378fcc59ecf23b602ee18f3e0dd65fd\" title=\"org_validators\"><img src=\"https://ethresear.ch/uploads/default/original/3X/b/d/bdf51bb01378fcc59ecf23b602ee18f3e0dd65fd.png\" alt=\"org_validators\" data-base62-sha1=\"r6rnN0gHCu0JtU2csEyBJzVuEqh\" width=\"690\" height=\"218\" data-dominant-color=\"EFF1F2\"></a></div><p></p>\n<h3><a name=\"p-50027-staking-pools-10\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-staking-pools-10\"></a>Staking Pools</h3>\n<p>We also take a deeper look at the practices of the  five largest staking pools (Lido, Coinbase, <a href=\"http://Ether.Fi\" rel=\"noopener nofollow ugc\">Ether.Fi</a>, Binance, and Kraken). On average, we observe 678 validators on a given peer for staking pools, with the largest node running 19,263 validators (!).</p>\n<blockquote>\n<p>Additionally, many staking pools utilize node operators and many of the node operators run validators for various staking pools. This creates a dependency between the staking pools. In particular, we find five instances of validators from two different staking pools that utilize the same node operators being located on the same machine.</p>\n</blockquote>\n<h2><a name=\"p-50027-security-implications-11\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-security-implications-11\"></a>Security Implications</h2>\n<p><strong>Taking Out Previous Block Proposers</strong>: One security issue that’s been discussed is the incentive for the proposer of slot <span class=\"math\">n+1</span> to prevent the proposer of slot <span class=\"math\">n</span> from publishing a block. If successful, the slot <span class=\"math\">n+1</span> proposer can include both the missed transactions and new ones in their block, earning more in fees. Since proposers are known in advance (about six minutes), an attacker could deanonymize the proposer for slot <span class=\"math\">n</span> and launch a temporary DoS or BGP hijack attack, preventing them from submitting their block. Importantly, this attack only needs to last for four seconds - the window for making a block proposal.</p>\n<p><strong>Breaking Liveness and Safety</strong>: Extending this attack, an attacker could continuously target the upcoming proposers to stop the network’s progress. If more than one-third of block proposals are missed, Ethereum’s finality gadget won’t be able to finalize blocks, halting the network. Even worse, safety could be compromised as many Ethereum light clients assume the chain head is finalized. By breaking network synchrony through DoS or network partitioning, attackers could cause serious issues.</p>\n<h2><a name=\"p-50027-mitigations-12\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-mitigations-12\"></a>Mitigations</h2>\n<p>To mitigate these security risks one can either improve privacy in the P2P network or protect against potential attacks. We discuss both avenues.</p>\n<h3><a name=\"p-50027-providing-anonymity-13\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-providing-anonymity-13\"></a>Providing anonymity</h3>\n<p><strong>Increase Subnet Participation</strong>: Validators could subscribe to more subnets than the default, making it harder for adversaries to link specific attestations to validators. This increases the communication overhead on the network, potentially undermining Ethereum’s goal of enabling solo stakers to run validators with minimal resources. However, given the increase of the <a href=\"https://ethresear.ch/t/increase-the-max-effective-balance-a-modest-proposal/15801\">MAX_EFFECTIVE_BALANCE</a> in the upcoming hardfork there might be room for a slight increase in the number of P2P messages.</p>\n<p><strong>Run Validators Across Multiple Nodes</strong>: Validators could distribute their attestation broadcasts across multiple nodes, making it harder to deanonymize them. While this increases operational costs, it can enhance privacy by spreading validator responsibilities across different IP addresses.</p>\n<p><strong>Private Peering Agreements</strong>: Both Lighthouse and Prysm clients allow validators to set up private peering agreements, where a group of trusted peers helps relay gossip messages. While this improves performance and reliability, it also provides some privacy, making it harder to trace validators to a single IP. Instead, an attacker would have to target multiple peers in the agreement. However, finding trusted peers can be costly and difficult, especially for smaller stakers.</p>\n<p><strong>Anonymous Gossiping</strong>: Protocols like Dandelion and Tor have been proposed to enhance anonymity. Dandelion, for example, sends messages through a single node first (the “stem” phase) before broadcasting to the network (the “fluff” phase), which helps conceal the message origin. However, these methods introduce delays and might not be fast enough for the Ethereum P2P network.</p>\n<h3><a name=\"p-50027-defending-against-dos-14\" class=\"anchor\" href=\"https://ethresear.ch#p-50027-defending-against-dos-14\"></a>Defending Against DoS</h3>\n<p><strong>Network Layer Defenses</strong>: The libp2p framework used for the Ethereum P2P layer already includes some defenses like limiting the number of connections, rate-limiting incoming traffic, and auto-adjusting firewalls. However, these aren’t foolproof, and manual intervention might still be needed during attacks.</p>\n<p><strong>Secret Leader Election</strong>: Another potential defense against DoS attacks is keeping the identity of block producers secret until they propose blocks. This idea, called <strong>secret leader election</strong>, avoids other issues and looks promising. Some proposals have been made for Ethereum, but they’re still in the early design phase as far as we are aware.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/privacy-problems-in-the-p2p-network-and-what-they-tell-us/20463\">Read full topic</a></p>","link":"https://ethresear.ch/t/privacy-problems-in-the-p2p-network-and-what-they-tell-us/20463","pubDate":"Fri, 20 Sep 2024 16:04:42 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20463"},"source":{"@url":"https://ethresear.ch/t/privacy-problems-in-the-p2p-network-and-what-they-tell-us/20463.rss","#text":"Privacy Problems in the P2P Network and What They Tell Us"},"filter":false},{"title":"FOCIL Resource Design Considerations","dc:creator":"terence","category":"Block proposer","description":"<p>Special thanks to Thomas, Julian, Barnabe, and Jihoonsong for reviewing it</p>\n<p>This document was motivated by our work on the <a href=\"https://github.com/terencechain/consensus-specs/pull/2\" rel=\"noopener nofollow ugc\">FOCIL consensus spec</a>, where we realized that the protocol required more thoughtful consideration around resource constraints since certain details were not explicitly specified in the <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870\">FOCIL Ethereum research post</a>.</p>\n<h1><a name=\"p-50013-prerequisite-1\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-prerequisite-1\"></a>Prerequisite</h1>\n<p>Before we begin, we assume the following setup to establish a clean baseline for our considerations:</p>\n<ul>\n<li>The setup is based on the Electra hard fork. It also makes sense to revisit this on top of EIP-7732 (ePBS) for comparison</li>\n<li>We are assuming solo block building and releasing, where the proposer is not running MEV-Boost. This is the first key component to get right, while the Builder API is a secondary consideration</li>\n<li>We are assuming a solo staker setup with typical compute, memory requirements, and bandwidth that you can easily follow on the Ethereum chain today</li>\n</ul>\n<h1><a name=\"p-50013-actors-2\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actors-2\"></a>Actors</h1>\n<p>Before we proceed, we assume the following actors are part of the protocol and analyze their responsibilities:</p>\n<ul>\n<li>Inclusion List (IL) committee members, who are responsible for constraining the next slot proposer by its set of inclusion list transactions</li>\n<li>The proposer, who is responsible for proposing the next slot</li>\n<li>Attesters, who are attesting to the next slot for the head of the chain</li>\n<li>Nodes, which are verifying and following the chain. Proposers and attesters are part of nodes that have staked Ether</li>\n</ul>\n<h1><a name=\"p-50013-timeline-3\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-timeline-3\"></a>Timeline</h1>\n<p>We assume the following timeline in which the IL committee, proposer, and attesters perform some honest actions:</p>\n<ul>\n<li>Slot <code>n-1</code>, <code>t=6</code>: The IL committee publishes their local Inclusion Lists (ILs) over a global topic after learning the contents of block <code>n-1</code></li>\n<li>Slot <code>n-1</code>, <code>t=9</code>: Attesters and honest verifying nodes lock in their view of the local ILs</li>\n<li>Slot <code>n</code>, <code>t=0</code>: The block proposer for slot <code>n</code> releases block <code>B</code>, which includes the payload which should satisfy the IL requirement</li>\n<li>Slot <code>n</code>, <code>t=4</code>: Attesters for slot <code>n</code> vote on block <code>B</code>, verifying the IL aggregation by comparing it to their local IL views and confirming whether block <code>B</code> is “valid”\n<ul>\n<li>We overload the word “valid” when referring to a block, but it could mean “importable,” “canonical”, or something else. See the open question for further clarification</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-50013-interval-1-il-committee-releases-local-il-4\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-interval-1-il-committee-releases-local-il-4\"></a>Interval 1: IL Committee Releases Local IL</h2>\n<h3><a name=\"p-50013-actor-inclusion-list-committee-5\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-inclusion-list-committee-5\"></a>Actor: Inclusion List Committee</h3>\n<p>IL committee members retrieve a list of IL transactions from EL client given the head (CL → EL call), then they sign the local IL (transactions + summaries) and release it to the gossip network.</p>\n<h4><a name=\"p-50013-resource-considerations-6\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-6\"></a>Resource Considerations</h4>\n<ul>\n<li>Retrieving IL transactions from the EL mempool → CPU/MEM</li>\n<li>Signing the inclusion list → CPU</li>\n<li>Uploading the inclusion list to the gossip network → Bandwidth (Upload)</li>\n</ul>\n<h3><a name=\"p-50013-actor-nodes-including-attesters-7\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-nodes-including-attesters-7\"></a>Actor: Nodes (including Attesters)</h3>\n<p>Nodes following the chain will download the IL, verify it for anti-DOS (not importing it to EL yet), and forward it to other peers. Nodes also import the IL into fork choice and track which ILs have been seen using an aggregate cache. Attesters and nodes following the chain should have the same view of the chain.</p>\n<h4><a name=\"p-50013-resource-considerations-8\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-8\"></a>Resource Considerations</h4>\n<ul>\n<li>Downloading the IL → Bandwidth (Download)</li>\n<li>Forwarding the IL → Bandwidth (Upload)</li>\n<li>Verifying the IL for anti-DOS → CPU/MEM</li>\n<li>Caching seen and aggregate ILs → MEM</li>\n</ul>\n<h3><a name=\"p-50013-actor-proposer-9\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-proposer-9\"></a>Actor: Proposer</h3>\n<p>The proposer for the next slot actively monitors the IL gossip network and, collects and aggregates the local ILs, then at IL aggregation cutoff (interval <span class=\"hashtag-raw\">#2</span>) proposer updates the block-building process with a list of IL transactions to be included for its block. This requires a CL to EL call.</p>\n<h4><a name=\"p-50013-resource-considerations-10\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-10\"></a>Resource Considerations</h4>\n<ul>\n<li>Inherits the same costs as nodes following the chain</li>\n</ul>\n<h4><a name=\"p-50013-proposer-edge-case-11\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-proposer-edge-case-11\"></a>Proposer Edge Case</h4>\n<p>If the next slot’s proposer observes a sufficient number of inclusion lists based on a parent hash it hasn’t seen, the proposer will need to manually request the missing beacon block, import the block, and build on top of that block.</p>\n<h3><a name=\"p-50013-conclusion-12\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-conclusion-12\"></a>Conclusion</h3>\n<p>Based on the above, we can identify potential resource-intensive areas and narrow down on them:</p>\n<ul>\n<li><strong>IL Committee’s CPU impact</strong>: IL transaction retrieval from EL &amp; signing: while there are resource demands here, this is presumed to be relatively inexpensive and not a major concern.</li>\n<li><strong>Nodes bandwidth impact</strong>: Nodes downloading and uploading ILs may use tons of bandwidth, especially research post currently states that the inclusion list size is flexible/unbounded. This introduces a potential DOS risk, as a malicious IL committee member could flood the network with a large number of transactions, even if they are invalid. Nodes would still gossip about the IL before they import the ILs. Anti-DoS measures need to be considered carefully.</li>\n</ul>\n<h2><a name=\"p-50013-interval-2-nodes-lock-their-view-proposer-import-il-transactions-13\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-interval-2-nodes-lock-their-view-proposer-import-il-transactions-13\"></a>Interval 2: Nodes lock their view, proposer import IL transactions</h2>\n<h3><a name=\"p-50013-actor-proposer-14\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-proposer-14\"></a>Actor: Proposer</h3>\n<p>The proposer updates block building process with a list of inclusion list transactions. This is a CL → EL call.</p>\n<h4><a name=\"p-50013-resource-considerations-15\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-15\"></a>Resource Considerations</h4>\n<ul>\n<li>Updates block building process with a list of inclusion list transactions → CPU/MEM</li>\n</ul>\n<h3><a name=\"p-50013-actor-nodes-including-attesters-16\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-nodes-including-attesters-16\"></a>Actor: Nodes (including Attesters)</h3>\n<p>Lock inclusion list view. Stop accepting local inclusion list from this point.</p>\n<h4><a name=\"p-50013-resource-considerations-17\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-17\"></a>Resource Considerations</h4>\n<ul>\n<li>Lock local inclusion list view → None</li>\n</ul>\n<h3><a name=\"p-50013-conclusion-18\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-conclusion-18\"></a>Conclusion</h3>\n<ul>\n<li><strong>Proposer’s CPU impact</strong>: Importing the IL transactions into the block-building process could disrupt the block building process, potentially straining the execution layer client’s CPU during transaction simulation. This may become complicated under account abstraction as transactions may invalidate each other. This should be further analyzed.</li>\n</ul>\n<h2><a name=\"p-50013-interval-3-proposer-releases-block-19\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-interval-3-proposer-releases-block-19\"></a>Interval 3: Proposer Releases Block</h2>\n<h3><a name=\"p-50013-actor-proposer-20\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-proposer-20\"></a>Actor: Proposer</h3>\n<p>The proposer retrieves the execution payload from the EL client (CL → EL call), and releases it to the beacon block gossip network. Everyone else then verifies the block.</p>\n<h4><a name=\"p-50013-resource-considerations-21\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-21\"></a>Resource Considerations</h4>\n<ul>\n<li>Retrieving the payload from the EL client → CPU/MEM</li>\n</ul>\n<h3><a name=\"p-50013-actor-nodes-22\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-nodes-22\"></a>Actor: Nodes</h3>\n<p>Nodes receive the beacon block and verify it. The new verification steps include checking the inclusion list aggregate construction and confirming whether the inclusion list satisfies the evaluation function, which is be completed on the CL. The checking of IL conditions (whether they can be skipped due to conflicts or not) will be performed on the EL.</p>\n<h4><a name=\"p-50013-resource-considerations-23\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-23\"></a>Resource Considerations</h4>\n<ul>\n<li>Verifying that the inclusion list is satisfied on CL → CPU</li>\n<li>Verifying inclusion list conditions on EL → CPU</li>\n</ul>\n<h3><a name=\"p-50013-conclusion-24\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-conclusion-24\"></a>Conclusion</h3>\n<p>The additional duties for the proposer do not seem to be a significant concern. The new verification steps for nodes—checking verifying that the inclusion list meets the satisfactory conditions—may introduce some additional CPU load, but it doesn’t appear to be a major issue.</p>\n<h2><a name=\"p-50013-interval-4-attester-committee-25\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-interval-4-attester-committee-25\"></a>Interval 4: Attester Committee</h2>\n<h3><a name=\"p-50013-actor-attester-26\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-actor-attester-26\"></a>Actor: Attester</h3>\n<p>The attester votes for the beacon block using LMD GHOST fork choice rule. Attesters will only vote for a beacon block that satisfies the inclusion list evaluation function, based on observations from Interval 1.</p>\n<h3><a name=\"p-50013-resource-considerations-27\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-considerations-27\"></a>Resource Considerations</h3>\n<ul>\n<li>Attesters voting for a block that satisfies the inclusion list evaluation function → No additional cost</li>\n</ul>\n<h3><a name=\"p-50013-conclusion-28\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-conclusion-28\"></a>Conclusion</h3>\n<p>There is no difference than today.</p>\n<h1><a name=\"p-50013-resource-consideration-summary-29\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-resource-consideration-summary-29\"></a>Resource Consideration Summary</h1>\n<p>As seen above, the most significant resource concerns revolve around inclusion list upload, download, and the potential for spamming from a node’s perspective. Another key concern is the overhead on nodes for verifying and importing the inclusion list, as well as the proposer’s need to update its block-building process to satisfy the inclusion list. These aspects require careful consideration and design to ensure efficiency and security.</p>\n<h1><a name=\"p-50013-open-questions-30\" class=\"anchor\" href=\"https://ethresear.ch#p-50013-open-questions-30\"></a>Open Questions</h1>\n<p>Based on the above, we outline several open questions that will influence how the specification is written:</p>\n<ol>\n<li>\n<p><strong>Block Not Satisfying the Evaluation Function</strong>: How should a block that fails the inclusion list evaluation function be handled, and what design considerations come into play for such conditions?</p>\n<ul>\n<li>Should it be treated similarly to blobs and <strong>cannot be imported</strong>?</li>\n<li>Should it <strong>not be filtered</strong> by fork choice?</li>\n<li>Should it <strong>not be valid</strong> in the state transition function?</li>\n</ul>\n</li>\n<li>\n<p><strong>Inclusion List Equivocations</strong>: If an inclusion list committee member sends different versions of the inclusion list to different nodes, and they are all propagated across the network, what are the consequences of this action? How could such behavior negatively impact the proposer building the next block?</p>\n</li>\n<li>\n<p><strong>Proposer Already Building on a Different Head</strong>: If the proposer builds on a different head than the one sent by the inclusion list committee, and thus needs to change its head view, what are the consequences of this action for block validity and proposer behavior?</p>\n</li>\n<li>\n<p><strong>Inclusion List Transactions Invalidations</strong>: Local inclusion list transactions can be invalidated in a few ways. Even if these transactions are invalidated, the block should still be able to satisfy the evaluation function. Transactions may be invalidated as multiple inclusion lists merge with each other or with transactions in the block. Besides typical nonce checking, account abstraction introduces new ways for transactions to be invalidated, as balance can be drained with a static nonce. How much additional simulation a block builder needs to perform due to transaction invalidation and how much this affects its CPU compute remains to be seen for both MEV-Boost actors and local builders.</p>\n</li>\n<li>\n<p><strong>Proposer’s Observation of the IL Committee Subnet</strong>: The proposer monitors the inclusion list committee subnet to know when it is ready to construct the aggregate. There are two design approaches here, and it’s worth considering them further. The first approach is a greedy proposer, where the proposer waits until <code>t=9</code>, gathers as many ILs as possible, sends them to the EL, and the EL updates its block. The second approach is a selective proposer, where the proposer waits until it has a sufficient inclusion list to satisfy the eval function, sends them to the EL, and can do this in less than <code>t=9s</code> or even earlier. The question is whether the second approach justifies the optimization to allow the proposer to release the inclusion list aggregate earlier. The second approach may only be well suited for an IL with its own dedicated gas limit.</p>\n</li>\n</ol>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/focil-resource-design-considerations/20457\">Read full topic</a></p>","link":"https://ethresear.ch/t/focil-resource-design-considerations/20457","pubDate":"Thu, 19 Sep 2024 14:30:43 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20457"},"source":{"@url":"https://ethresear.ch/t/focil-resource-design-considerations/20457.rss","#text":"FOCIL Resource Design Considerations"},"filter":false},{"title":"Trusted Advantage in Slot Auction ePBS","dc:creator":"Julian","category":"Economics","description":"<p><em>Thanks to Thomas Thiery, Anders Elowsson and Barnabé Monnot for reviewing this post. Also, thanks to everyone in the <a href=\"https://rig.ethereum.org/\" rel=\"noopener nofollow ugc\">Robust Incentives Group</a> and the ePBS Breakout Call <span class=\"hashtag-raw\">#9</span> attendees for discussions. This post’s argument was presented during the ePBS Breakout Call <span class=\"hashtag-raw\">#9</span> (<a href=\"https://youtu.be/2BUsiUnUZYc?si=6pbGlXJ-nkRK2dh9\" rel=\"noopener nofollow ugc\">recording</a>; <a href=\"https://docs.google.com/presentation/d/1-MnAqDzR7JapIPpUEbScALEtY5axyRcPgJDpgaJ_qVI/edit?usp=sharing\" rel=\"noopener nofollow ugc\">slides</a>).</em></p>\n<p>ePBS facilitates the fair exchange between a beacon proposer and a block producer. A block producer is the party that constructs the execution payload, which could be a sophisticated builder or a proposer. The beacon proposer sells the rights to build an execution payload to a block producer in exchange for a bid. The <strong>Unconditional Payment</strong> and <strong>Honest Builder Safety</strong> <a href=\"https://hackmd.io/@potuz/rJ9GCnT1C#Optional-changes\" rel=\"noopener nofollow ugc\">are two desiderata</a> of this fair exchange. The former means that a proposer must receive the bid’s value regardless of the block producer’s actions. The latter roughly implies the block producer must receive the execution payload rights if it paid for them. The final desideratum is that there is <strong>No Trusted Advantage.</strong> In this context, we define this final desideratum as follows.</p>\n<blockquote>\n<p><strong>(Definition) No Trusted Advantage</strong>: The beacon proposer is incentivized to use the in-protocol commitment to commit to the block producer whose in-protocol bid value maximizes the beacon proposer’s utility.</p>\n</blockquote>\n<p>Since <a href=\"https://mevboost.pics/\" rel=\"noopener nofollow ugc\">most beacon proposers run</a> MEV-Boost, it has become apparent that they want to outsource block building to sophisticated block producers. The No Trusted Advantage desideratum ensures that the commitment that beacon proposers use to outsource to block producers benefits from the Unconditional Payment and Honest Builder Safety guarantees that ePBS provides. Suppose an ePBS design does not satisfy No Trusted Advantage, then a rational beacon proposer may be incentivized to sell the execution payload construction rights or to receive payment for the sale via other commitments that do not have the trustless fair exchange properties of ePBS. The trust a rational beacon proposer must then pose in a third party hurts the credible neutrality of the network and defeats the purpose of ePBS.</p>\n<p>This post argues that the slot auction <a href=\"https://ethresear.ch/t/payload-timeliness-committee-ptc-an-epbs-design/16054#proposer-initiated-splitting-18\">Payload-timeliness committee (PTC)</a> ePBS design does not satisfy No Trusted Advantage. We will present an informal model in which a rational proposer outsources execution payload construction via another commitment than the commitment facilitated via ePBS. In practice, this attack means that a proposer will not use ePBS as intended. Instead, the beacon proposer waits until the execution payload must be revealed and sells the execution payload construction rights via an out-of-protocol block auction, like how MEV-Boost currently works.</p>\n<p>In the slot auction Payload-timeliness committee (PTC) ePBS design, a beacon proposer commits to a block producer at the beginning of the slot (t = 0). The block producer must reveal its execution payload halfway into the slot (t = 6). This time difference exists because a block producer must be able to observe attestations for the beacon block so that it knows that the beacon block will likely become canonical, ensuring Honest Builder Safety.</p>\n<p>Consider a proposer that decides whether to sell the execution payload construction rights Early (t = 0) or Late (t = 6). The proposer must decide which auction it will use at time t = 0, and it can only choose one auction format. If the proposer is incentivized to sell Early, slot auction ePBS satisfies No Trusted Advantage. If the proposer is incentivized to sell Late, No Trusted Advantage is violated since the proposer would commit to itself in the beacon block and run a MEV-Boost-like auction just before t = 6. Assume the proposer maximizes its payoff.</p>\n<p>Builders also bid to maximize payoffs. At the beginning of the block, builders only know the distribution of values they could extract by building the execution payload. Just before t = 6, builders learn the precise value they could extract by building an execution payload called the realized value.</p>\n<p>If the proposer were to host an auction Early, builders would bid based on their distribution of values; specifically, risk-neutral builders would bid according to the expected value. If the proposer hosts an auction Late, builders bid based on their realized value. This post assumes bids are monotonically increasing in value. The critical insight is that the expected auction revenue is likely higher based on realized value than expected values under many circumstances. This is because only the highest-order statistics of realized values are relevant.</p>\n<p>Considering an ascending-bid first-price auction, the winning builder should pay the builder’s value with the second-highest valuation. Hence, if the second-highest expected value in the Early auction is lower than the expectation of the second-highest realized value, then the proposer will choose to sell via the Late auction.</p>\n<blockquote>\n<p><strong>(Main Result) Slot Auction ePBS does not satisfy No Trusted Advantage:</strong> In an ascending-bid first-price auction, a rational beacon proposer will auction the execution payload construction rights via the Late auction if the second-highest expected value (Early auction revenue) is lower than the expectation of the second-highest realized value (Late auction expected revenue). <strong>In this case, slot auction ePBS does not satisfy No Trusted Advantage.</strong></p>\n</blockquote>\n<p>This result relies on two key assumptions:</p>\n<ol>\n<li>The beacon proposer has access to a secondary market to sell the execution payload construction rights to block producers in the Late auction.</li>\n<li>Block producers have less access to a secondary market for selling the execution payload construction rights to other block producers in the Late auction than the beacon proposer.</li>\n</ol>\n<p>If the first assumption does not hold, then the beacon proposer effectively has no option to sell in the Late auction. A secondary market will likely be available to the beacon proposer since this market already exists via MEV-Boost. On the other hand, <a href=\"https://discord.com/channels/595666850260713488/874767108809031740/1284179164672426118\" rel=\"noopener nofollow ugc\">Terence has argued</a> that ePBS makes same-slot unbundling attacks easier if a beacon proposer were to sell Late because a beacon proposer could release equivocation execution payloads without losing fork-choice weight or being slashed.</p>\n<p>The second assumption could be motivated by the complexity of facilitating trust between two sophisticated parties. Perhaps relays are less willing to facilitate fair exchange between two sophisticated parties. Perhaps block producers will continuously request bids from bidders in the secondary market, whereas today, <a href=\"https://ethresear.ch/t/bid-cancellations-considered-harmful/15500\">proposers do not</a>. Perhaps <a href=\"https://www.youtube.com/watch?v=-PXGPFFneMI\" rel=\"noopener nofollow ugc\">adverse selection</a> is worse if the auctioneer is sophisticated.</p>\n<p>Suppose the second assumption does not hold, and the beacon proposer and builders have equal access to the secondary market. In that case, the beacon proposer’s decision to sell in the Early or the Late auction is a risk-reward trade-off. This is because a block producer would then incorporate the value it could get by reselling the item in the secondary market in its bid, which would be equivalent to the value a beacon proposer could get. If the beacon proposer is less risk-averse than builders, it will sell in the Late auction; otherwise, it will sell in the Early auction.</p>\n<p>The key point is that whether ePBS is used—whether No Trusted Advantage is satisfied—depends on the risk appetite of beacon proposers and the state of the secondary market if ePBS were deployed with slot auctions. Yet it is entirely unclear what these proposers’ risk appetite or the secondary market’s state will be. In contrast, MEV-Boost has given the ecosystem <a href=\"https://ieeexplore.ieee.org/abstract/document/10634354\" rel=\"noopener nofollow ugc\">a</a> <a href=\"https://openreview.net/forum?id=XMBR5UEo3f\" rel=\"noopener nofollow ugc\">lot</a> <a href=\"https://arxiv.org/abs/2405.01329\" rel=\"noopener nofollow ugc\">of</a> <a href=\"https://arxiv.org/abs/2407.13931\" rel=\"noopener nofollow ugc\">information</a> on how block auctions work, providing confidence in it satisfying No Trusted Advantage.</p>\n<p>Satisfying No Trusted Advantage in slot auction ePBS is challenging. This desideratum could be achieved by forcing a sale in the early auction, for example, using MEV-Burn. <a href=\"https://mirror.xyz/barnabe.eth/QJ6W0mmyOwjec-2zuH6lZb0iEI2aYFB9gE-LHWIMzjQ\" rel=\"noopener nofollow ugc\">Execution Auctions</a> use <a href=\"https://ethresear.ch/t/mev-burn-a-simple-design/15590\">MEV-Burn</a>. Whether MEV-Burn is sufficient to satisfy the No Trusted Advantage is still understudied.</p>\n<blockquote>\n<p>This argument could be pivotal in whether ePBS is deployed with block or slot auctions. The difference between the two is huge in terms of market structure. Therefore, it would be very valuable to have numerical validation of the theoretical argument presented here. If you want to create a simulation that tests this theory, please get in touch with Julian Ma (<a href=\"mailto:julian.ma@ethereum.org\">julian.ma@ethereum.org</a>)</p>\n</blockquote>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/trusted-advantage-in-slot-auction-epbs/20456\">Read full topic</a></p>","link":"https://ethresear.ch/t/trusted-advantage-in-slot-auction-epbs/20456","pubDate":"Thu, 19 Sep 2024 11:37:12 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20456"},"source":{"@url":"https://ethresear.ch/t/trusted-advantage-in-slot-auction-epbs/20456.rss","#text":"Trusted Advantage in Slot Auction ePBS"},"filter":false},{"title":"Decentralized Anti-MEV sequencer based on Order-Fairness Byzantine Fault-Tolerant (BFT) consensus","dc:creator":"0x1cc","category":"Layer 2","description":"<p><em>by <a href=\"https://x.com/0x_1cc\" rel=\"noopener nofollow ugc\">KD.Conway</a></em></p>\n<h2><a name=\"p-49955-tldr-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49955-tldr-1\"></a>TL;DR</h2>\n<ul>\n<li>This post introduces a <strong>Decentralized Anti-MEV Sequencer</strong> based on <strong>Order-Fairness Byzantine Fault-Tolerant (BFT) Consensus,</strong> a mechanism designed to counteract MEV and ensure transaction fairness.</li>\n</ul>\n<h2><a name=\"p-49955-order-fairness-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49955-order-fairness-2\"></a>Order Fairness</h2>\n<p><strong>Received-Order-Fairness</strong>[1]: with parameter 1/2 &lt; 𝛾 ≤ 1 dictates that if 𝛾 fraction of honest nodes receive a transaction tx before tx′, then tx should be ordered no later than tx’.</p>\n<h2><a name=\"p-49955-introducing-the-anti-mev-sequencer-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49955-introducing-the-anti-mev-sequencer-3\"></a>Introducing the Anti-MEV Sequencer</h2>\n<p>Our proposed solution is a <strong>Decentralized Anti-MEV Sequencer</strong> that leverages an <strong>Order-Fairness Byzantine Fault-Tolerant (BFT) consensus</strong> mechanism. This system provides:</p>\n<ol>\n<li>\n<p><strong>Decentralization</strong>: Instead of a centralized sequencer, we will build a sequencer network with multiple nodes contributing to transaction ordering and batching.</p>\n</li>\n<li>\n<p><strong>Order-Fairness</strong>: Transactions are processed based on the time they were received by the nodes in the sequencer network, ensuring no one participant can manipulate transaction ordering.</p>\n</li>\n<li>\n<p><strong>Byzantine Fault Tolerance</strong>: The consensus protocol ensures the system remains operational even if some of the participants behave maliciously.</p>\n</li>\n</ol>\n<h2><a name=\"p-49955-workflow-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49955-workflow-4\"></a>Workflow</h2>\n<ol>\n<li>\n<p>When a user wants to send a transaction on a layer 2 blockchain, they submit the transaction to the sequencer network.</p>\n</li>\n<li>\n<p>The Order-Fairness BFT consensus is employed to determine the correct order of transactions. This guarantees that, even if a minority of nodes act maliciously, the system can still reach consensus on a fair transaction order.</p>\n</li>\n<li>\n<p>After reaching consensus, the sequencer batches the transactions and submits them to the Rollup smart contract on Ethereum, where they are executed in the agreed-upon order.</p>\n</li>\n</ol>\n<p>For details on the system implementation of the Order-Fairness BFT consensus, please refer to the corresponding references at the end of this post.</p>\n<h2><a name=\"p-49955-references-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49955-references-5\"></a>References</h2>\n<p>[1] Kelkar, Mahimna, et al. “Order-fairness for byzantine consensus.” <em>Advances in Cryptology–CRYPTO 2020: 40th Annual International Cryptology Conference, CRYPTO 2020, Santa Barbara, CA, USA, August 17–21, 2020, Proceedings, Part III 40</em>. Springer International Publishing, 2020.</p>\n<p>[2] Kelkar, Mahimna, et al. “Themis: Fast, strong order-fairness in byzantine consensus.” <em>Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications Security</em>. 2023.</p>\n            <p><small>3 posts - 2 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/decentralized-anti-mev-sequencer-based-on-order-fairness-byzantine-fault-tolerant-bft-consensus/20427\">Read full topic</a></p>","link":"https://ethresear.ch/t/decentralized-anti-mev-sequencer-based-on-order-fairness-byzantine-fault-tolerant-bft-consensus/20427","pubDate":"Fri, 13 Sep 2024 15:27:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20427"},"source":{"@url":"https://ethresear.ch/t/decentralized-anti-mev-sequencer-based-on-order-fairness-byzantine-fault-tolerant-bft-consensus/20427.rss","#text":"Decentralized Anti-MEV sequencer based on Order-Fairness Byzantine Fault-Tolerant (BFT) consensus"},"filter":false},{"title":"PANDAS: A Practical Approach for Next-Generation Data Availability Sampling","dc:creator":"oascigil","category":"Sharding","description":"<p><strong>PANDAS: A Practical Approach for Next-Generation Data Availability Sampling</strong></p>\n<p>Authors: Onur Ascigil<sup>1</sup>, Michał Król<sup>2</sup>, Matthieu Pigaglio<sup>3</sup>, Sergi Reñé<sup>4</sup>, Etienne Rivière<sup>3</sup>, Ramin Sadre<sup>3</sup></p>\n<p><strong>TL;DR</strong></p>\n<ul>\n<li>PANDAS is a network layer protocol that supports <a href=\"https://www.google.com/url?q=https://a16zcrypto.com/posts/article/an-overview-of-danksharding-and-a-proposal-for-improvement-of-das/&amp;sa=D&amp;source=editors&amp;ust=1726244230013129&amp;usg=AOvVaw1uA0yFlQiomkk9RvjmwyCi\" rel=\"noopener nofollow ugc\">Danksharding</a> with 32 MB blobs and beyond.</li>\n<li>PANDAS aims to achieve a 4-second deadline for random sampling (under the <a href=\"https://www.google.com/url?q=https://ethresear.ch/t/das-fork-choice/19578&amp;sa=D&amp;source=editors&amp;ust=1726244230013705&amp;usg=AOvVaw3doAIsKjvcjcIC7S-PusJW\" rel=\"noopener nofollow ugc\">tight fork choice model</a>).</li>\n<li>Following the <a href=\"https://www.google.com/url?q=https://ethereum.org/en/roadmap/pbs/&amp;sa=D&amp;source=editors&amp;ust=1726244230013999&amp;usg=AOvVaw2dMSikl29D4bH315qZQzBC\" rel=\"noopener nofollow ugc\">Proposer-Builder Separation (PBS)</a>, resourceful builders perform the initial distribution (i.e., seeding) of samples to the nodes.</li>\n<li>PANDAS proceeds in two phases during each slot: 1) <em>Seeding Phase,</em> where the chosen builder of a slot distributes <em>subsets of rows and columns</em> of a 2-D encoded blob to the validator nodes, and 2) Row/Column <em>Consolidation and</em> <em>Sampling phase,</em> where nodes sample random cells and at the same time retrieve and reconstruct assigned rows/columns to boost the data availability of cells.</li>\n<li>PANDAS uses a <em>direct communication</em> approach, which means 1-hop, i.e., point-to-point communications, for both seeding and sampling phases rather than a gossip-based, multi-hop approach or a DHT.</li>\n</ul>\n<p>We make the following assumptions when designing PANDAS:</p>\n<p><strong>Assumption 1) Resourceful Builders:</strong> Following the <a href=\"https://www.google.com/url?q=https://ethereum.org/en/roadmap/pbs/&amp;sa=D&amp;source=editors&amp;ust=1726244230016209&amp;usg=AOvVaw2u6aLVhX_45QF4JizRPRrL\" rel=\"noopener nofollow ugc\">Proposer-Builder Separation (PBS)</a> scheme, in PANDAS, a set of resourceful builders — e.g., cloud instances with sufficiently high upload bandwidth such as 500 Mbps or more — undertake the distribution of seed samples to the network.</p>\n<p><strong>Assumption 2) Builder Incentives:</strong> The builders have an incentive for the blob data to be available since the block will be accepted only if DAS succeeds. However, different builders can have different amounts of resources. The interest of rational builders is to guarantee that data will be considered available while spending a minimal amount of resources.</p>\n<p><strong>Assumption 3) Validator Nodes (VNs) are the primary entities of DAS protocol:</strong> A single Validator Node (VN) performs only a single sampling operation (as one entity), independent of the number of validators it hosts.</p>\n<p><strong>Assumption 4) Dishonest Majority:</strong> A majority (or even supermajority) of VNs and builders can be malicious and, therefore, may not follow the protocol correctly.</p>\n<p><strong>Assumption 5) Sybil-resistance</strong> <strong>VNs</strong>: An honest VN can use a <a href=\"https://www.google.com/url?q=https://ethresear.ch/t/proof-of-validator-a-simple-anonymous-credential-scheme-for-ethereums-dht/16454&amp;sa=D&amp;source=editors&amp;ust=1726244230018106&amp;usg=AOvVaw2S4QQ8d0c8zadKQKbVBQ6W\" rel=\"noopener nofollow ugc\">Proof-of-Validator</a> scheme to prove that it hosts at least one validator. If multiple nodes attempt to re-use the same proof, they can be blocklisted by other honest nodes and builders.</p>\n<p>Below are the objectives of PANDAS:</p>\n<p><strong>Objective 1)</strong> <strong>Tight fork choice:</strong> <em>Honest validator nodes (VNs) complete</em> <em>random sampling</em> <em>before voting for a block, even when the</em> <em>majority of VNs are malicious</em>*.* Therefore, we target the <a href=\"https://www.google.com/url?q=https://ethresear.ch/t/das-fork-choice/19578&amp;sa=D&amp;source=editors&amp;ust=1726244230019035&amp;usg=AOvVaw0jtQl6ICcsg9iqBiQh4Mst\" rel=\"noopener nofollow ugc\">tight fork choice model</a>, which means that honest VNs in a slot’s committee must complete random sampling before voting <em>within four seconds</em> into that slot.</p>\n<p><strong>Objective 2)</strong> <strong>Flexible builder seeding strategies:</strong> Given that different builders can have different resources, our design allows the block builder the flexibility to implement different blob distribution strategies, each with a different trade-off between security and resource usage. For higher security, the builder can send more copies of the blob’s cells to validator nodes, ensuring higher availability. Conversely, to minimise resource usage, the builder can distribute a single copy of each cell at most, reducing bandwidth usage at the expense of lower security. This flexible approach allows the builder to navigate the trade-off between ensuring data availability and optimising bandwidth while under the incentive for the block to be deemed available by validator nodes to be accepted.</p>\n<p><strong>Objective 3) Allowing Inconsistent Node Views:</strong> Our objective is to ensure that the VNs and the builders are not required to reach a consensus on the list of VNs. While we aim for the VNs and builders to generally agree on the set of VNs in the system, it is not necessary for the VNs to maintain strictly consistent views or for the builders’ and VNs’ views to be fully synchronised.</p>\n<p><strong>PANDAS Design</strong></p>\n<p><strong>Continuous Peer Discovery:</strong> To achieve Objective 3, the nodes in the system perform continuous peer discovery in parallel to the protocol phases below to maintain an up-to-date “view” containing other peers. <em>The builder</em> and the VNs aim to discover all the VNs with a valid <a href=\"https://www.google.com/url?q=https://ethresear.ch/t/proof-of-validator-a-simple-anonymous-credential-scheme-for-ethereums-dht/16454&amp;sa=D&amp;source=editors&amp;ust=1726244230020521&amp;usg=AOvVaw1-IdEEIXKyEqrBkmFcpdG1\" rel=\"noopener nofollow ugc\">Proof-of-Validator</a>. We expect both the builder and VNs to have a close but not perfect view of all the VNs in the system.</p>\n<p>A membership service running the peer discovery protocol inserts new (verified) VNs to the view and eventually converges to a complete set of VNs. Peer discovery messages are piggybacked to sample request messages to reduce discovery overhead.</p>\n<p>PANDAS protocol has two (uncoordinated) phases, which repeat during each slot:</p>\n<p><strong>Phase 1</strong>) Seeding,</p>\n<p><strong>Phase 2)</strong> Row/Column Consolidation and Sampling</p>\n<p>In the seeding phase, the builder pushes subsets of row/columns directly to the VNs where row/column assignment is based on a deterministic function. Once a VN receives its samples from the builder, it consolidates the entire row/column it is assigned to (by requesting missing cells from other VNs assigned to the corresponding row/column) and simultaneously performs random sampling.</p>\n<p>VNs do not coordinate to start consolidating and sampling. Therefore, a node finishing phase 1 can begin phase 2 immediately without coordinating with other nodes. The VNs who are the committee members of a slot must complete seeding and random sampling within 4 seconds into the slot.</p>\n<p>Below, we explain the two phases of our protocol in detail.</p>\n<p><strong>Phase 1- Seeding</strong>: The builder assigns VNs to individual rows/columns using a deterministic function that uses a hashspace as we explain below. This mapping of VNs to individual rows/columns is dynamic and changes in each slot. The mapping allows nodes to locally and deterministically map nodes to rows/columns without requiring the number or full list of nodes to be known.</p>\n<p>The Builder prepares and distributes seed samples to the VNs as follows:</p>\n<p><strong>1.a) <em>Mapping Rows/Columns to static regions in the hashspace:</em></strong> The individual rows and columns are assigned static regions in the hashspace as shown in the upper portion of Figure 1.</p>\n<p><strong>1.b)</strong> <em><strong>Mapping VNs to a hashspace</strong></em> <em>:</em> The builder uses a sortition function F<sub>NODE</sub>(NodeID, epoch, slot, R) to assign each VN to a key in the hashspace. The function takes parameters such as NodeID, which is the identifier of the node (i.e., peer ID), epoch and slot numbers, and a random value R derived from the header of the block header from the previous slot.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/4/8/48bcaeee1eef51ab1128caf78e0d29d6d54dbe7e.png\" data-download-href=\"https://ethresear.ch/uploads/default/48bcaeee1eef51ab1128caf78e0d29d6d54dbe7e\" title=\"image3\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/4/8/48bcaeee1eef51ab1128caf78e0d29d6d54dbe7e_2_690x352.png\" alt=\"image3\" data-base62-sha1=\"ansD3O8cW25kAkyM9W3uKgBEvXE\" width=\"690\" height=\"352\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/4/8/48bcaeee1eef51ab1128caf78e0d29d6d54dbe7e_2_690x352.png, https://ethresear.ch/uploads/default/original/3X/4/8/48bcaeee1eef51ab1128caf78e0d29d6d54dbe7e.png 1.5x, https://ethresear.ch/uploads/default/original/3X/4/8/48bcaeee1eef51ab1128caf78e0d29d6d54dbe7e.png 2x\" data-dominant-color=\"E4E7E3\"></a></div><br>\n<strong>Figure 1:</strong> Assignment of Row samples to VNs. The Column samples are mapped similarly.<p></p>\n<p>A VN assigned to a row’s region will receive a subset of the cells belonging to that row from the builder. As the VNs are re-mapped to the hashspace during each slot using F<sub>NODE</sub>, their row/column assignments can also change.</p>\n<p><strong>NOTE:</strong> A dynamic, per-slot assignment of rows and columns to VNs is impossible in a gossip-based seeding approach where per-row and per-column gossip channels must remain relatively stable over time.</p>\n<p><strong>1.c)</strong> <strong>Row/Column <em>Sample Distribution:</em></strong> For each row and column, the builder applies a best-effort distribution strategy to push subsets of each row/column to the VNs mapped to the corresponding row/column’s region. The builder uses a direct communication approach, particularly a UDP-based protocol, to distribute the cells for each row/column directly to the VNs.</p>\n<p><em>Rationale for direct communication</em>*:* We aim to complete the seeding phase as quickly as possible to give time for committee members to complete random sampling before voting (Objective 1).</p>\n<p>Row/Column Distribution Strategies: We allow the builders to choose distribution strategies based on resource availability in line with Objective 2. A trade-off between resource usage and data availability exists for different distribution strategies. Consider the example in Figure 2 for distributing two rows. In one extreme case (on the left), the builder distributes the entire row 1 to each VN in the row’s region for improved data availability at the expense of higher resource usage. In another extreme case, the builder sends non-overlapping row pieces of row 6 to each VN in that row’s region, which requires fewer resources but results in less availability of individual cells.</p>\n<p>We are currently evaluating different distribution strategies, including ones that can deterministically map individual cells of rows/columns to individual VNs in the row/column’s region.</p>\n<p><strong>NOTE</strong>: The builder is only involved in the Seeding phase.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/2/d/2d447780eca05e1064f2f780b7a1dcaad92a386e.png\" data-download-href=\"https://ethresear.ch/uploads/default/2d447780eca05e1064f2f780b7a1dcaad92a386e\" title=\"image1\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/2/d/2d447780eca05e1064f2f780b7a1dcaad92a386e_2_690x374.png\" alt=\"image1\" data-base62-sha1=\"6ssaT91AfZVDaylQxsVU0XoLR82\" width=\"690\" height=\"374\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/2/d/2d447780eca05e1064f2f780b7a1dcaad92a386e_2_690x374.png, https://ethresear.ch/uploads/default/original/3X/2/d/2d447780eca05e1064f2f780b7a1dcaad92a386e.png 1.5x, https://ethresear.ch/uploads/default/original/3X/2/d/2d447780eca05e1064f2f780b7a1dcaad92a386e.png 2x\" data-dominant-color=\"ECEAED\"></a></div><br>\n<strong>Figure 2:</strong> Two (extreme) strategies to distribute row samples to the VNs in the corresponding row’s region.<p></p>\n<p><strong>Phase 2- Row/Column Consolidation and Sampling</strong>: VNs that are part of the current slot’s committee aim to complete random sampling within the slot’s first four seconds (i.e., voting deadline). To boost the availability of cells, particularly for the committee members of the slot who must perform (random) sampling within four seconds, the VNs also consolidate, i.e., retrieve the full row and column they are assigned to based on the F<sub>NODE</sub> mapping as part of row/column sampling.</p>\n<p><strong>2.a) VN Random Sampling:</strong> The VNs in the current slot’s committee attempt to retrieve <a href=\"https://www.google.com/url?q=https://ethresear.ch/t/peerdas-a-simpler-das-approach-using-battle-tested-p2p-components/16541/5?u%3Doascigil&amp;sa=D&amp;source=editors&amp;ust=1726244230027394&amp;usg=AOvVaw3dcjIB9khL3JRIj_je8GsM\" rel=\"noopener nofollow ugc\">73 randomly chosen cells</a> as soon as they receive their seed samples from the builder.</p>\n<p>Using the deterministic assignment F<sub>NODE</sub>, VNs can locally determine the nodes expected to eventually custody a given row or column.</p>\n<p><em>Sampling Algorithm:</em> Some of these nodes may be offline or otherwise unresponsive. Sequentially sending requests for cells risks missing the 4-second deadline for the committee members.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/3/b315051e7742d17e0aabd822c6d282c69402eead.png\" data-download-href=\"https://ethresear.ch/uploads/default/b315051e7742d17e0aabd822c6d282c69402eead\" title=\"image2\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/3/b315051e7742d17e0aabd822c6d282c69402eead_2_690x276.png\" alt=\"image2\" data-base62-sha1=\"pyev90JeycbhjUgiggaLtVYFn53\" width=\"690\" height=\"276\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/3/b315051e7742d17e0aabd822c6d282c69402eead_2_690x276.png, https://ethresear.ch/uploads/default/optimized/3X/b/3/b315051e7742d17e0aabd822c6d282c69402eead_2_1035x414.png 1.5x, https://ethresear.ch/uploads/default/original/3X/b/3/b315051e7742d17e0aabd822c6d282c69402eead.png 2x\" data-dominant-color=\"ECEEEB\"></a></div><br>\n<strong>Figure 3:</strong> Sample Fetching Example: The rows and columns assigned to each VN are shown on the top of the corresponding VN. VN14 knows to send a request to VN78 to retrieve cell one based on the knowledge of the mapping F<sub>NODE</sub>.<p></p>\n<p>At the same time, sending requests to all peers holding copies will lead to an explosion of messages in the network and bear the risk of congestion. Fetching must, therefore, seek a tradeoff between the use of parallel and redundant requests on the one hand and latency constraints on the other hand. Our approach employs an adaptive cell-fetching strategy using direct communication between nodes through a UDP-based (connectionless) protocol. The fetching algorithm can tolerate losses and offline nodes.</p>\n<p><strong>2.b) VN Row/Column Consolidation:</strong> If a VN receives less than half of the cells of its assigned row or column from the builder (as a consequence of the builder’s chosen distribution strategy), it requests the missing cells from other VNs. A VN requests cells from only the VNs assigned to the same row/column’s region during row/column consolidation. When a VN has half of the cells of a row or column, it can locally reconstruct the entire row or column.</p>\n<p><em>The Rationale for Consolidating Row/Column:</em></p>\n<ul>\n<li><em>Reconstructing missing cells</em>: while performing row/column sampling, VNs reconstruct missing cells.</li>\n<li><em>To boost the availability of cells</em>: Given the deterministic mapping (F<sub>NODE</sub>), the builder can choose any distribution strategy to send subsets of rows and columns to the VNs. Row/Column consolidation aims to improve the availability of samples so that random sampling can be completed on time.</li>\n</ul>\n<p>Ideally, the builder should select a seed sample distribution strategy that enables VNs to consolidate rows and columns efficiently. To facilitate this, the builder can push each VN a map (together with the seed samples) that details how individual cells of a row/column are assigned to VNs within that row/column’s region as part of the builder’s distribution strategy. With this map, VNs can quickly identify and retrieve missing cells to reconstruct a complete row, thereby improving the availability of the data.</p>\n<p><strong>NOTE:</strong> In some DAS approaches, the term ‘row/column sampling’ refers to nodes retrieving multiple rows and columns before voting on the availability of the blob. In our approach, nodes retrieve rows and columns to enhance data availability, supporting validators who must perform random sampling before they vote.</p>\n<p>We refer to this as ‘row/column consolidation’ instead of ‘row/column sampling’ because in PANDAS, committee members vote based on random sampling, and they do not directly sample entire rows or columns.</p>\n<p><strong>What about Regular Nodes (RNs)?</strong></p>\n<p>Unlike VNs, RNs do not obtain seed row/column samples from the builder. The builder sends initial seed samples to a Sybil-resistant group of VNs that use the <a href=\"https://www.google.com/url?q=https://ethresear.ch/t/proof-of-validator-a-simple-anonymous-credential-scheme-for-ethereums-dht/16454&amp;sa=D&amp;source=editors&amp;ust=1726244230030492&amp;usg=AOvVaw3FE6AN3DjFuibklaNwyDPO\" rel=\"noopener nofollow ugc\">Proof-of-Validator</a> scheme. There is currently no mechanism for RNs to prove that they are not Sybils; therefore, the initial distribution of samples from the builder only uses VNs.</p>\n<p>Using the public deterministic function F<sub>NODE</sub>, RNs can be similarly mapped to individual row/column regions. Once mapped to a region, RNs can (optionally) perform row/column consolidation to retrieve entire rows and columns and respond to queries for cells within their assigned region.</p>\n<p>Like other nodes, RNs must perform peer discovery. In general, RNs aim to discover all the VNs and can also seek to discover other RNs. Given the knowledge of other peers through peer discovery, RNs can perform random sampling through direct communication. Unlike VNs, RNs are not under strict time constraints to complete sampling — they can start sampling after the VNs, for instance, after receiving the block header for the current slot.</p>\n<p><strong>Discussion &amp; On-going Work</strong></p>\n<p>We assume rational builders to have an incentive to cut costs (and under provision) but, at the same time, aim to make blocks available (to be rewarded). This implies that the builders will aim for the row/column consolidation to be as efficient as possible, i.e., with efficient consolidation, which boosts the availability of cells, the builder can send less copies of each cell during the seeding phase to cut costs.</p>\n<p>We are currently experimenting with different distribution strategies with malicious VNs withholding samples and attempting to disrupt peer discovery. Our DAS simulation code is available on <a href=\"https://www.google.com/url?q=https://github.com/datahop/kademlia-simulator/&amp;sa=D&amp;source=editors&amp;ust=1726244230032037&amp;usg=AOvVaw1UC1uGBj8kO1dTX4Q01QRY\" rel=\"noopener nofollow ugc\">DataHop GitHub repository</a>.</p>\n<p><sup>1</sup> Lancaster University, UK</p>\n<p><sup>2</sup> City, University London, UK</p>\n<p><sup>3</sup> Université Catholique de Louvain (UCLouvain)</p>\n<p><sup>4</sup> DataHop Labs</p>\n            <p><small>3 posts - 3 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/pandas-a-practical-approach-for-next-generation-data-availability-sampling/20426\">Read full topic</a></p>","link":"https://ethresear.ch/t/pandas-a-practical-approach-for-next-generation-data-availability-sampling/20426","pubDate":"Fri, 13 Sep 2024 15:23:19 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20426"},"source":{"@url":"https://ethresear.ch/t/pandas-a-practical-approach-for-next-generation-data-availability-sampling/20426.rss","#text":"PANDAS: A Practical Approach for Next-Generation Data Availability Sampling"},"filter":false},{"title":"AUCIL: An Auction-Based Inclusion List Design for Enhanced Censorship Resistance on Ethereum","dc:creator":"sarisht","category":"Block proposer","description":"<p>By <a class=\"mention\" href=\"https://ethresear.ch/u/sarisht\">@sarisht</a> <a class=\"mention\" href=\"https://ethresear.ch/u/kartik1507\">@kartik1507</a> <a class=\"mention\" href=\"https://ethresear.ch/u/voidp\">@voidp</a> <a class=\"mention\" href=\"https://ethresear.ch/u/soispoke\">@soispoke</a> <a class=\"mention\" href=\"https://ethresear.ch/u/julian\">@Julian</a><br>\nIn collaboration with <a class=\"mention\" href=\"https://ethresear.ch/u/barnabe\">@barnabe</a> <a class=\"mention\" href=\"https://ethresear.ch/u/luca_zanolini\">@luca_zanolini</a> <a class=\"mention\" href=\"https://ethresear.ch/u/fradamt\">@fradamt</a> - <span class=\"discourse-local-date\" data-date=\"2024-09-12\" data-email-preview=\"2024-09-12T04:00:00Z UTC\" data-timezone=\"America/New_York\">2024-09-12T04:00:00Z UTC</span></p>\n<h2><a name=\"p-49946-tldr-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-tldr-1\"></a>TLDR;</h2>\n<p>In this post, we introduce an <ins>AUC</ins>tion-based-<ins>I</ins>nclusion <ins>L</ins>ist design, AUCIL, that leverages competition within an inclusion list committee consisting of rational parties. The protocol design leverages two key components: (i) an input list creation mechanism allowing committee members to pick non-overlapping transactions while maximizing their fees, and (ii) an auction mechanism allowing parties to ensure most of these input lists are included in the final output inclusion list. The former ensures many censored transactions are considered for inclusion, and the latter employs competition where including as many of the input lists as possible is incentivized to produce the output inclusion list.</p>\n<h1><a name=\"p-49946-introduction-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-introduction-2\"></a>Introduction</h1>\n<p>The centralized builder ecosystem of Ethereum today has led to ~2 builders with the power to decide <em>which</em> transactions are posted on Ethereum. This centralization leads to censorship concerns since the builders have complete authority over which transactions are included. The current solution proposed (and rejected) by Ethereum (<a href=\"https://eips.ethereum.org/EIPS/eip-7547\" rel=\"noopener nofollow ugc\">EIP 7547</a>) requires the current proposer to determine the <em>inclusion list</em> (or the set of censored transactions) to be included by the next proposer. Such a proposer also acts as a single point of failure, which can easily be bribed to exclude transactions. This has led to proposals such as <a href=\"https://ethresear.ch/t/the-more-the-less-censored-introducing-committee-enforced-inclusion-sets-comis-on-ethereum/18835\">COMIS</a> and <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870\">FOCIL</a> that require inputs from multiple proposers to be aggregated to form the inclusion list.</p>\n<p>Intuitively, using multiple proposers implies the need to bribe multiple parties for a transaction to be excluded. However, do all parties include the transaction in the first place? Since the resulting inclusion list is finite (limited to block size), <em>how do each of these parties decide which transactions to include in their local list such that maximizing the utility also increases the system’s throughput?</em> Moreover, when aggregating the transactions to produce the inclusion list, how many points of failure can be bribed to exclude transactions? This post introduces a multi-proposer design called AUCIL to address these questions.</p>\n<h1><a name=\"p-49946-motivation-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-motivation-3\"></a>Motivation</h1>\n<p>Let’s first motivate the first part as to how the inclusion lists should be created. For existing inclusion list designs, the intricate assumption is that an IL Proposer can include as many transactions as it sees. While <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870\">FOCIL</a> or <a href=\"https://ethresear.ch/t/the-more-the-less-censored-introducing-committee-enforced-inclusion-sets-comis-on-ethereum/18835\">COMIS</a>, leave the proposal of transactions in Local Inclusion List underspecified, <a href=\"https://arxiv.org/abs/2301.13321\" rel=\"noopener nofollow ugc\">Fox et al.</a> assumes that there is no network congestion. However, including all the transactions could lead to a scenario where the size of the inclusion list is larger than the block size. In such a scenario, the builder (constrained by transactions in the Inclusion List) would add as many transactions as possible, dropping any leftover transactions in the inclusion list.</p>\n<p>The first thing to note above is that for an IL Proposer, it never makes sense to add more transactions than the block size, and thus, there could be an implicit block space size constraint (<span class=\"math\">\\mathcal{L}</span>) on the Local Inclusion List (We would refer to these as Input Lists).</p>\n<p>Now, consider that the proposer is passive (i.e., rational but does not accept a bribe). Since each input could be size <span class=\"math\">\\mathcal{L}</span>, the resulting union of lists could be of size <span class=\"math\">\\geq \\mathcal{L}</span>. Now, the builder (or proposer without the PBS) is constrained to pick transactions from the Inclusion List; it would pick the top <span class=\"math\">\\mathcal{L}</span> paying transactions, and the rest would not execute. Thus, the inclusion list proposers would only want to include the top <span class=\"math\">\\mathcal{L}</span> transactions. Thus, all the previous analysis made for inclusion lists with a scale factor of the number of inclusion list proposers holds in this case (<a href=\"https://arxiv.org/abs/2301.13321\" rel=\"noopener nofollow ugc\">Fox et al.</a>, <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870\">FOCIL</a>, <a href=\"https://ethresear.ch/t/the-more-the-less-censored-introducing-committee-enforced-inclusion-sets-comis-on-ethereum/18835\">COMIS</a>).</p>\n<p>However, things look very different in the presence of a bribing adversary. Consider that one party is bribed enough (we will quantify this at the end of paragraph) to exclude a top <span class=\"math\">\\mathcal{L}</span> paying transaction and instead replace it with <span class=\"math\">(\\mathcal{L}+1)^{th}</span> transaction. The builder now receives an inclusion list with <span class=\"math\">\\mathcal{L}+1</span> transactions and can choose any transaction to exclude. The adversary can further bribe the builder to exclude the target transaction. Since there is one extra transaction in the list, the block can be formed without violating the properties of an inclusion list (All transactions are executed, or the block space is full). Coming back to the incentives for the party, if it is the only party that deviates from picking top <span class=\"math\">\\mathcal{L}</span> transactions, then it would be the only recipient of the fee from <span class=\"math\">(\\mathcal{L}+1)^{th}</span> transaction. This may be larger than the utility received (if <span class=\"math\">f_t</span> for the target transaction is not <span class=\"math\">n</span> times larger than <span class=\"math\">f_{\\mathcal{L}+1}</span> for the inserted transaction). Even in the worst case, the bribe required would be slightly larger than <span class=\"math\">f_t/n</span>.</p>\n<p>All in all, the property of inclusion list that allows the transaction to be excluded if the block is full is a property the design in this post wishes to avoid. Thus, we would restrict the size of input lists to less than <span class=\"math\">\\mathcal{L}/n</span> such that even if all parties propose unique transactions, the size of the inclusion list is less than the available block size.<sup class=\"footnote-ref\"><a href=\"https://ethresear.ch#footnote-49946-1\" id=\"footnote-ref-49946-1\">[1]</a></sup></p>\n<p>There could exist other solutions to this problem like cumulative non-expiring inclusion list and unconditional inclusion lists, however, these require additional state support, where parties would have to keep track of previous inclusion lists.<sup class=\"footnote-ref\"><a href=\"https://ethresear.ch#footnote-49946-2\" id=\"footnote-ref-49946-2\">[2]</a></sup></p>\n<p>As for the other question of how many points of failure exist while using multi-proposer designs, aggregation of lists from all parties is the most critical point of failure, which hasn’t yet been adequately studied. Fox et al. sidestep this by never truly aggregating and assuming that the proposer’s inputs would be included without truly analyzing the problem. In COMIS, the aggregator role is formalized, and they assume that this role is trusted for their analysis. FOCIL removes this assumption by using the proposer of the next block and keeping the point of failure in check with the committee of attesters. However, relying on attesters comes with its share of problems. Attesters are not incentivized to verify; as long as they vote with other attesters, they receive rewards without the risk of a penalty. Using attesters to compute is thus more unreliable than relying on the attesters to confirm the existence of the block or verify a proof as used in this post.</p>\n<h1><a name=\"p-49946-model-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-model-4\"></a>Model</h1>\n<p>In this post, we consider all parties involved in consensus as rational, i.e., trying to maximize the value they receive through transaction fees, consensus, or bribery. We will call each party collectively proposing the inclusion list as an IL Proposer and their input as an input list. We will refer to the aggregator as the party that computes a union of these input lists to create an inclusion list. Differing from previous proposals, we assume that the input list size of each party is constrained. The size of an input list can be at most <span class=\"math\">k \\leq \\mathcal{L}/n</span>, as mentioned in the previous section. The total number of IL proposers is considered to be <span class=\"math\">n</span>. Each transaction <span class=\"math\">tx_i</span> pays a fee of <span class=\"math\">f_i</span> for inclusion in the inclusion list, which is paid to the IL Proposer(s) that include it (chosen by the user independently from the base fee and Ethereum transaction fee). If the transaction repeats across multiple input lists, the fee is equally divided amongst all the IL Proposers that included it tracably on-chain.</p>\n<p>We assume an external adversary with a budget such that it can bribe parties to take adversarial actions.</p>\n<h1><a name=\"p-49946-problem-statement-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-problem-statement-5\"></a>Problem Statement</h1>\n<p>The problem setting consists of <span class=\"math\">n</span> rational parties who locally have access to a set of censored transactions (<span class=\"math\">M_i</span>) that are continually updated (their mempool). Let <span class=\"math\">M = \\cap_i M_i</span>. The problem is to create a list of <em>valid</em> transactions with each party contributing a share of transactions it observes. </p>\n<p><strong>Adversarial model.</strong> We assume each of the <span class=\"math\">n</span> parties is rational, i.e., they maximize their utility. We assume a bribing adversary will bribe these parties to censor one or more transactions.</p>\n<p><strong>Definition (<span class=\"math\">(b,p,T)</span>-Censorship Resistance.)</strong> We say that a protocol is <em><span class=\"math\">(b,p,T)</span>-censorship resistant</em> if given a budget <span class=\"math\">b</span> to an external adversary for bribing parties, for all transactions <span class=\"math\">t \\in T(M)</span> at least <span class=\"math\">p</span> parties output a list which contains all the transactions in <span class=\"math\">T(M)</span>.</p>\n<p>The protocol design aims to maximize <span class=\"math\">b</span> for a fixed <span class=\"math\">p</span> and <span class=\"math\">|T(M)|</span>. More concretely, in non-multi-proposer inclusion list design schemes, <span class=\"math\">b</span> is typically <span class=\"math\">O(f)</span>, but our protocol aims to obtain <span class=\"math\">b = O(n\\cdot f)</span>.</p>\n<p>To facilitate understanding of the goal, <span class=\"math\">T(M)</span> can be considered the “feasible” subset of transactions in <span class=\"math\">M</span>, e.g., those paying sufficiently high fees subject to a space limit. The definition of <span class=\"math\">T</span> depends on the protocol we implement, and it is justified why such a <span class=\"math\">T</span> is used.</p>\n<p>In our protocol, we assume that <span class=\"math\">M_i = M</span>. When <span class=\"math\">M_i \\neq M</span>, our protocol does not satisfy the definition since it may output a higher paying transaction that appears in some <span class=\"math\">M_i</span> at the expense of some lower paying transaction in the intersection</p>\n<h1><a name=\"p-49946-input-list-creation-mechanism-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-input-list-creation-mechanism-6\"></a>Input List Creation Mechanism</h1>\n<p>The first question we address is how IL Proposers select transactions for their input lists. A simple approach is for IL Proposers to naively choose the transactions that pay the highest fees, regardless of the actions of others. However, this greedy approach is not a Nash equilibrium. If all other IL Proposers are greedily selecting transactions, the rational choice for any IL Proposer might not be to do the same. <strong>Table 1</strong> illustrates this point.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Strategy</th>\n<th>Objects Picked</th>\n<th>Utility</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pick Top Paying</td>\n<td><span class=\"math\">(o_1,o_2)</span></td>\n<td>7</td>\n</tr>\n<tr>\n<td>Alternate</td>\n<td><span class=\"math\">(o_3,o_4)</span></td>\n<td>15</td>\n</tr>\n</tbody>\n</table>\n</div><p><strong>Table 1</strong>: Picking top-paying objects is not a Nash equilibrium. Consider transactions <span class=\"math\">(\\{o_1,o_2,o_3,o_4,o_5,o_6\\})</span> with utilities <span class=\"math\">(\\{11, 10, 9, 6, 4, 3\\})</span> respectively and three players with max size input list of 2. Other players are assumed to follow the strategy of picking the top-paying transaction.</p>\n<p>A more viable approach is to use mixed strategies, where each party selects transactions based on a predefined probability distribution. Deviating from this distribution would result in lower expected revenue. However, a mixed Nash equilibrium may not be sufficient, especially in games where players can wait to observe others’ actions before deciding. Thus, this post explores a correlated equilibrium instead.</p>\n<p>A correlated equilibrium is a situation where each player is suggested specific actions, and deviating from these suggestions leads to lower utility, assuming others follow the suggestions. To prevent centralization (by asking a single known party to send recommendations), we propose a well-known algorithm that each party can run locally to simulate these suggested actions. Deviating from the algorithm would result in lower utility for the deviating party.</p>\n<h3><a name=\"p-49946-algorithm-1-a-greedy-algorithm-for-transaction-inclusion-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-algorithm-1-a-greedy-algorithm-for-transaction-inclusion-7\"></a>Algorithm 1: A Greedy Algorithm for Transaction Inclusion</h3>\n<p><strong>Input</strong>: <span class=\"math\">( n \\geq 0 )</span>, <span class=\"math\">( m \\geq 0 )</span>, <span class=\"math\">( k \\geq 0 )</span>  (number of players, transactions, input list size)</p>\n<p><strong>Output</strong>: <span class=\"math\">( L_i )</span> arrays for all <span class=\"math\">( i \\in P )</span> (final inclusion lists for each player)</p>\n<ol>\n<li><span class=\"math\">P \\gets [1,\\dots,n]</span></li>\n<li><span class=\"math\">U \\gets [u_1,\\dots, u_m]</span></li>\n<li><span class=\"math\">N \\gets [1,\\dots,1]</span></li>\n<li><span class=\"math\">\\forall i \\in P: L_i \\gets [1,\\dots,1]</span></li>\n<li><span class=\"math\">l \\gets 0</span></li>\n<li><strong>while</strong> <span class=\"math\">l &lt; k</span>  <strong>do</strong>\n<ol>\n<li><span class=\"math\">i \\gets 0</span></li>\n<li><strong>while</strong> <span class=\"math\">i &lt; n</span> <strong>do</strong>\n<ol>\n<li><span class=\"math\">U_{curr} \\gets (U \\otimes L_i) \\oslash N</span></li>\n<li><span class=\"math\">s \\gets argmax(U_{curr})</span></li>\n<li><span class=\"math\">L_{i}[s] \\gets 0</span></li>\n<li><span class=\"math\">N[s] \\gets N[s] + 1</span></li>\n<li><span class=\"math\">i \\gets i + 1</span></li>\n</ol>\n</li>\n<li><strong>end while</strong></li>\n<li><span class=\"math\">l \\gets l + 1</span></li>\n</ol>\n</li>\n<li><strong>end while</strong></li>\n<li><strong>return</strong> <span class=\"math\">\\forall i \\in P: L_i</span></li>\n</ol>\n<hr>\n<p>This algorithm iteratively updates each player’s transaction inclusion status. Each player’s input list <span class=\"math\">(L_i)</span> indicates whether a transaction has been included (0) or not (1). The algorithm aims to maximize utility values greedily, including transactions based on their current utility and the number of times each transaction has been included.</p>\n<h3><a name=\"p-49946-description-of-the-algorithm-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-description-of-the-algorithm-8\"></a>Description of the algorithm</h3>\n<p>Consider the following simulation protocol. All parties are first numbered randomly. Since the randomness needs to be the same across all parties, a random seed is agreed upon before the start of the protocol. All parties are assigned items greedily, one at a time. Each party picks the item that gives the maximum utility at that instant. To do so, it computes the current utility of all objects yet to be chosen <span class=\"math\">\\left((U \\otimes L_i) \\oslash N\\right)</span>. The first <span class=\"math\">(U \\otimes L_i)</span> makes the utility of all objects already chosen by <span class=\"math\">i</span> as 0, and then <span class=\"math\">\\oslash N</span> divides by the number of parties sharing the object if party <span class=\"math\">i</span> decides to pick that object. The list of objects the party picks is updated (0 implies the object is chosen), and the number of parties picking the object is also updated. The procedure is repeated <span class=\"math\">k</span> times such that each party picks <span class=\"math\">k</span> objects. This protocol achieves a correlated equilibrium. Note that while the protocol assigns objects to parties one at a time, in practice, the output recommends all transactions to the parties at once.</p>\n<p>This protocol provably achieves a correlated equilibrium while also achieving a notion of game-theoretic-fairness properties (almost equal distribution of fee) (Paper to follow soon). The set of all transactions chosen by the input list creation algorithm is <span class=\"math\">T(M)</span>, for which we achieve <span class=\"math\">(b,p, T)</span>-censorship resistance through AUCIL, which follows.</p>\n<h1><a name=\"p-49946-aggregation-of-input-lists-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-aggregation-of-input-lists-9\"></a>Aggregation of input lists</h1>\n<p>After creating input lists, the next step is to aggregate the lists to create an inclusion list for the next block. If a transaction appears in the inclusion list, it is constrained to appear in the next block. Since the space occupied by the input list is fixed, it cannot suffer from spam transactions since each transaction is confirmed valid (with an adequate base fee) right before the block that includes it.</p>\n<p>A standard way to approach this problem is to assign a party the role of an <em>aggregator</em>. This aggregator would compute the union of all the input lists and add it to the inclusion list. However, this aggregator is now a single point of failure. For instance, it may be the case that the aggregator may not receive input lists from all IL proposers and thus cannot be expected to add all input lists. However, if we consider this and only require it to include some threshold number of input lists, then the aggregator can strategically omit specific input lists and significantly reduce the required budget to censor transactions.</p>\n<p>So, what can be done in this case? <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870\">FOCIL</a> requires the proposer of the following block to include an inclusion list, a superset of local input lists. However, it still allows for some transactions to not be on the inclusion list (due to the threshold). Instead, we look at a different way to deal with this problem. We auction off the role of the aggregator; however, instead of paying a bid to win the role of the aggregator, the bids are the size of the inclusion list. Thus, if a party <span class=\"math\">P</span> proposes a larger inclusion list than all other parties, then <span class=\"math\">P</span> would be rewarded with the aggregator role and reward.</p>\n<h3><a name=\"p-49946-algorithm-aucil-outline-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-algorithm-aucil-outline-10\"></a>Algorithm: AUCIL Outline</h3>\n<p><strong>Participants:</strong> All IL proposers <span class=\"math\">P_1, P_2, \\ldots, P_n</span></p>\n<h4><a name=\"p-49946-step-1-il-proposers-broadcast-input-lists-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-1-il-proposers-broadcast-input-lists-11\"></a>Step 1: IL Proposers Broadcast Input Lists</h4>\n<ul>\n<li>For each proposer <span class=\"math\">P_i</span>:\n<ul>\n<li><span class=\"math\">P_i \\rightarrow_B</span> (broadcasts to all parties): <span class=\"math\">\\text{inpL}_i</span></li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-49946-step-2-parties-aggregate-input-lists-into-an-inclusion-list-and-broadcast-it-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-2-parties-aggregate-input-lists-into-an-inclusion-list-and-broadcast-it-12\"></a>Step 2: Parties Aggregate Input Lists into an Inclusion List and Broadcast It</h4>\n<ul>\n<li>For each party <span class=\"math\">P_j</span>:\n<ul>\n<li><span class=\"math\">\\text{incL}_j = \\bigcup_{i=1}^{n} \\text{inpL}_i</span></li>\n<li><span class=\"math\">P_j \\rightarrow_B</span> (broadcasts to all parties):<span class=\"math\">\\left(\\text{incL}_j, \\ell_j = \\text{size}(\\text{incL}_j)\\right)</span></li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-49946-step-3-proposer-selects-the-highest-bid-inclusion-list-13\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-3-proposer-selects-the-highest-bid-inclusion-list-13\"></a>Step 3: Proposer Selects the Highest Bid Inclusion List</h4>\n<ul>\n<li>Proposer receives: <span class=\"math\">\\{(\\text{incL}_1, \\ell_1), (\\text{incL}_2,\\ell_2), \\ldots, (\\text{incL}_n,\\ell_n)\\}</span></li>\n<li>Proposer selects the highest bid.</li>\n</ul>\n<p>While <strong>Step 2</strong> has its incentives clear by introducing aggregation rewards (<span class=\"math\">u_a</span>), <strong>Step 1</strong> and <strong>Step 3</strong> are not incentive compatible. If all other parties broadcast their input lists, then it is dominant not to broadcast its input list for a party. This way, it can create the largest inclusion list and thus win the auction. Thus, <strong>Step 1</strong> is not incentive-compatible. Similarly, the proposer is not incentivized to pick the largest bid. Censorship in auctions (<a href=\"https://arxiv.org/abs/2301.13321\" rel=\"noopener nofollow ugc\">Fox et al.</a>) has been studied and is easily applicable here. Thus, <strong>Step 3</strong> is also not incentive-compatible.</p>\n<p>Recall the definition of censorship resistance. If some protocol satisfies the definition of <span class=\"math\">(b,p, T)</span>-censorship resistance, then at least <span class=\"math\">p</span> parties output a non-censored inclusion list. Thus, we require the proposer to include proof of the included bid being greater than <span class=\"math\">n-p</span> other bids (e.g., including <span class=\"math\">n-p</span> bids). If the proposer fails to add such proof, the block would be considered invalid, thus making <strong>Step 3</strong> incentive compatible.</p>\n<p>We make the auction biased to deal with the problem of not broadcasting. First, observe that if no party is broadcasting its input list, then the probability of winning the auction for any party is very low; thus, broadcasting its input list at least yields the rewards from including the input list in making the inclusion list. Thus, if more people believe that keeping its input list private does not lead to a significant increase in the probability of winning, then parties would be incentivized to broadcast its input list.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/5/d5699e95fe4dfa9c4562533d720b3400e0a1805b.png\" data-download-href=\"https://ethresear.ch/uploads/default/d5699e95fe4dfa9c4562533d720b3400e0a1805b\" title=\"AUCIL-Outline\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/5/d5699e95fe4dfa9c4562533d720b3400e0a1805b_2_690x420.png\" alt=\"AUCIL-Outline\" data-base62-sha1=\"urVZn8ssuyhGX2txzZdlFCvIevh\" width=\"690\" height=\"420\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/5/d5699e95fe4dfa9c4562533d720b3400e0a1805b_2_690x420.png, https://ethresear.ch/uploads/default/optimized/3X/d/5/d5699e95fe4dfa9c4562533d720b3400e0a1805b_2_1035x630.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/5/d5699e95fe4dfa9c4562533d720b3400e0a1805b_2_1380x840.png 2x\" data-dominant-color=\"EFEFF0\"></a></div><p></p>\n<h3><a name=\"p-49946-algorithm-aucil-14\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-algorithm-aucil-14\"></a>Algorithm: AUCIL</h3>\n<p><strong>Participants:</strong> All IL proposers <span class=\"math\">P_1, P_2, \\ldots, P_n</span></p>\n<h4><a name=\"p-49946-step-0-il-proposers-generate-their-auction-bias-15\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-0-il-proposers-generate-their-auction-bias-15\"></a>Step 0: IL Proposers Generate Their Auction Bias</h4>\n<ul>\n<li>For each proposer <span class=\"math\">P_i</span>:\n<ul>\n<li><span class=\"math\">P_i</span> generates a random bias: <span class=\"math\">\\text{bias} \\gets \\text{VRF}(P_i, \\text{biasmax})</span></li>\n<li><em>(The bias is uniformly distributed between 0 and <span class=\"math\">\\text{biasmax}</span> and is added to the bid.)</em></li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-49946-step-1-il-proposers-broadcast-input-lists-16\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-1-il-proposers-broadcast-input-lists-16\"></a>Step 1: IL Proposers Broadcast Input Lists</h4>\n<ul>\n<li>For each proposer <span class=\"math\">P_i</span>:\n<ul>\n<li><span class=\"math\">P_i \\rightarrow_B</span> (broadcasts to all parties): <span class=\"math\">\\text{inpL}_i</span></li>\n<li><em>(Proposers broadcast their input lists to all parties.)</em></li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-49946-step-2-parties-aggregate-input-lists-into-an-inclusion-list-and-broadcast-it-17\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-2-parties-aggregate-input-lists-into-an-inclusion-list-and-broadcast-it-17\"></a>Step 2: Parties Aggregate Input Lists into an Inclusion List and Broadcast It</h4>\n<ul>\n<li>For each party <span class=\"math\">P_j</span>:\n<ul>\n<li><span class=\"math\">\\text{incL}_j = \\bigcup_{i=1}^{y_j} \\text{inpL}_i</span>\n<ul>\n<li><em>(where <span class=\"math\">y_j</span> is the number of input lists party <span class=\"math\">P_j</span> receives.)</em></li>\n</ul>\n</li>\n<li><span class=\"math\">P_j \\rightarrow_B</span> (broadcasts to all parties): <span class=\"math\">\\left(\\text{incL}_j, \\ell_j = y_j + \\text{bias}\\right)</span></li>\n<li><em>(Parties declare their bid with the added bias.)</em></li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-49946-step-3-proposer-selects-the-highest-bid-inclusion-list-18\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-3-proposer-selects-the-highest-bid-inclusion-list-18\"></a>Step 3: Proposer Selects the Highest Bid Inclusion List</h4>\n<ul>\n<li>Proposer receives: <span class=\"math\">\\{(\\text{incL}_1, \\ell_1), (\\text{incL}_2,\\ell_2), \\ldots, (\\text{incL}_n,\\ell_n)\\}</span></li>\n<li>Proposer selects the highest bid and adds it to the block <span class=\"math\">(\\text{incL},\\ell)</span>.</li>\n<li>Proposer adds proof that the highest bid is greater than <span class=\"math\">n-p</span> other bids.</li>\n</ul>\n<h4><a name=\"p-49946-step-4-attesters-vote-on-the-validity-of-the-block-19\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-step-4-attesters-vote-on-the-validity-of-the-block-19\"></a>Step 4: Attesters Vote on the Validity of the Block</h4>\n<ul>\n<li>For each attester:\n<ul>\n<li>Attester receives: <span class=\"math\">\\{(\\text{incL}_1, \\ell_1), (\\text{incL}_2,\\ell_2), \\ldots, (\\text{incL}_n,\\ell_n)\\}</span> and <span class=\"math\">(\\text{incL},\\ell)</span></li>\n<li>Attester verifies the attached proof and votes only if the proof is correct.</li>\n</ul>\n</li>\n<li>Block is considered valid if it receives more than a threshold of votes.</li>\n</ul>\n<p>With the above algorithm, we claim that the party is incentivized to broadcast the input list unless the bias drawn is greater than <span class=\"math\">\\text{biasmax} -1</span>. Even when the bias is greater than <span class=\"math\">\\text{biasmax} -1</span>, a mixed Nash equilibrium still exists, and parties could still choose to broadcast.</p>\n<h1><a name=\"p-49946-censorship-resistance-20\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-censorship-resistance-20\"></a>Censorship Resistance</h1>\n<h3><a name=\"p-49946-censorship-by-bribery-to-il-proposers-21\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-censorship-by-bribery-to-il-proposers-21\"></a>Censorship by bribery to IL Proposers</h3>\n<p>The first attack step an adversary can take is removing a transaction from the input lists. For this, assume that a bribe is given to those IL Proposers who are assigned to include the target transaction. This bribe should be enough to ensure that the target transaction is excluded from each input list with probability 1. It is assumed (for now) that each of these IL Proposers would compute the union of all observed input lists in <strong>Step 3</strong>.</p>\n<p>Fox et al. analyze the bribe required for a multi-proposer scenario. In their case, it is assumed that the transaction repeats across all proposers. If a transaction pays a fee (higher fee for them) of <span class=\"math\">f_i</span>, then the adversary would have to pay <span class=\"math\">n</span> times the fee to censor the transaction.</p>\n<p>In our case, the analysis is similar. If the transaction repeats across <span class=\"math\">\\kappa_i</span> input lists, then the expected bribe required is <span class=\"math\">\\kappa_i f_i</span>. The parameter <span class=\"math\">\\kappa_i</span> is directly proportional to <span class=\"math\">\\frac{n\\cdot f_i\\cdot k}{\\sum f_i}</span>, where <span class=\"math\">\\sum f_i</span> is the sum of fees paid by all transactions chosen by the protocol. As an intuition for this number, one of our results ensures that the revenue distribution from each transaction is <em>fair</em>, and thus, assumes that each transaction gives the same utility. (Let’s say there exist two transactions paying a fee of 15 and 5, respectively, then the former transaction would be included in thrice as many input lists as the latter transaction. Thus, revenue is the same). <span class=\"math\">n\\cdot k</span> represents the total available slots out of which a transaction with fee <span class=\"math\">f_i</span> would occupy <span class=\"math\">\\frac{f_i}{\\sum f_i}</span> off the total space to maintain the same revenue assumption. Thus, if bribing the IL Proposers to exclude the transaction from the input list is the dominant action (as compared to bribery by aggregator we will mention next), then the protocol would be <span class=\"math\">(b=O(\\frac{nkf_i^2}{\\sum f_i}),n, T</span>)-censorship resistant.</p>\n<h3><a name=\"p-49946-censorship-by-bribery-to-aggregator-22\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-censorship-by-bribery-to-aggregator-22\"></a>Censorship by bribery to aggregator</h3>\n<p>In an alternate bribery attack, the adversary could bribe a party to reduce its bid by excluding all input lists that contain the target transaction. Thus, the bid for each party decreases by <span class=\"math\">\\kappa_i</span>. This would be the same as drawing a bias <span class=\"math\">\\kappa_i</span> less than what is drawn. A bias of <span class=\"math\">\\text{biasmax}-1</span> is supposed to have almost <span class=\"math\">0</span> probability of winning, and thus, reduction of a party bias to <span class=\"math\">\\text{biasmax}-\\kappa_i</span>, essentially means the adversary is bribing the party to not participate in the auction. From our analysis, the adversary would have to pay in expectation <span class=\"math\">\\frac{\\kappa_i n}{biasmax}</span> parties (Each with a bias greater than <span class=\"math\">n-\\kappa_i</span>) a bribe of <span class=\"math\">u_a</span> each in order for them not to include the input lists containing the target transaction. Setting <span class=\"math\">\\text{biasmax}</span> and <span class=\"math\">u_a</span> to be <span class=\"math\">\\sqrt n</span> and <span class=\"math\">\\sqrt n \\cdot u_{il} \\geq \\sqrt n \\cdot f_i</span>, we achieve <span class=\"math\">(b = O(\\frac{n^2kf_i^2}{\\sum f_i}),n-\\kappa_i\\sqrt n+1,T)</span>-censorship resistant.</p>\n<h1><a name=\"p-49946-conclusion-23\" class=\"anchor\" href=\"https://ethresear.ch#p-49946-conclusion-23\"></a>Conclusion</h1>\n<p>We outline an input list building scheme that all parties are incentivized to follow. Working within the confines of limited-size inclusion lists, we achieve significant censorship resistance guarantees (proportional to the number of parties, including the transaction). Then, we looked at an aggregation scheme, AUCIL, that utilizes auctions to incentivize parties to include the largest inclusion list. AUCIL ensures that the aggregator is incentivized to add all input lists to the transaction. We are also analyzing how coalition affects the censorship resistance guarantees and will publish the results soon. Meanwhile, it would be amazing to hear thoughts on AUCIL and the inclusion list building mechanism.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-49946-1\" class=\"footnote-item\"><p>Note that with <a href=\"https://eips.ethereum.org/EIPS/eip-1559\" rel=\"noopener nofollow ugc\">EIP-1559</a>, the cost to fill the block scales when the block space is full. And so, if the network is not congested, and the adversary is inserting artificial transactions to raise the congestion, then the cost of bribery would be high across multiple blocks. <a href=\"https://ethresear.ch#footnote-ref-49946-1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"footnote-49946-2\" class=\"footnote-item\"><p>We achieve the same “unconditional” property as Unconditional ILs without assigning exclusive Inclusion List space. <a href=\"https://ethresear.ch#footnote-ref-49946-2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/aucil-an-auction-based-inclusion-list-design-for-enhanced-censorship-resistance-on-ethereum/20422\">Read full topic</a></p>","link":"https://ethresear.ch/t/aucil-an-auction-based-inclusion-list-design-for-enhanced-censorship-resistance-on-ethereum/20422","pubDate":"Thu, 12 Sep 2024 17:45:11 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20422"},"source":{"@url":"https://ethresear.ch/t/aucil-an-auction-based-inclusion-list-design-for-enhanced-censorship-resistance-on-ethereum/20422.rss","#text":"AUCIL: An Auction-Based Inclusion List Design for Enhanced Censorship Resistance on Ethereum"},"filter":false},{"title":"Pricing Ethereum Blocks with Vol Markets with Implications for Preconfirmations","dc:creator":"lepsoe","category":"Economics","description":"<h1><a name=\"p-49938-ethereum-block-pricing-in-the-context-of-vol-markets-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-ethereum-block-pricing-in-the-context-of-vol-markets-1\"></a>Ethereum Block Pricing in the Context of Vol Markets</h1>\n<p><em>by <a href=\"https://x.com/lepsoe\">Lepsoe </a> (<a href=\"https://www.ethgas.com/\">@ETHGas</a>)</em></p>\n<p><em>With thanks to the <a href=\"https://x.com/Commit_Boost\">Commit Boost</a>, and <a href=\"https://x.com/titanbuilderxyz\">Titan </a> teams for making Preconfs a near-term open and scalable possibility, and <a href=\"https://x.com/DrewVdW\">Drew</a> for prompting the market sizing exploration</em></p>\n<h2><a name=\"p-49938-tldr-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-tldr-2\"></a><em>TL;DR</em></h2>\n<ul>\n<li>With the forthcoming gas markets and the ability to buy Entire Blocks, we look at how to price these taking into account prevailing market Volatility, Token prices, Transaction Fees, and Liquidity</li>\n<li>Treating the Blockchain/Network as a financial instrument, Block purchases are effectively Options on this network. If one can buy 5 blocks of Ethereum (e.g. 1 minute), one can observe prices in CEXs over this time with an option to monetize the difference between CEX and DEX prices (e.g. latency arb trade)</li>\n<li>Buying a block is analogous to buying a Straddle on the Network, and all its DEXs. Taking into account transaction fees, liquidity and slippage, however, this is more analogous to a Strangle.</li>\n<li>We then employ an arbitrage trade that involves Shorting European Strangles in CEX (e.g. Deribit, Binance, OKX), and Buying Blocks or Preconfs of Ethereum. This implies a minimum or floor price for one or many consecutive blocks</li>\n<li>We can then draw a direct, real-time connection between the current implied Vol for ETH, BTC, SOL, etc… and Preconfs prices</li>\n<li>We conclude that if ETH Vol is 75%, and transaction fees are 0.10%, then buying 5 consecutive blocks of Ethereum should be no lower than 6.9 Gwei</li>\n<li>Historically, very short-end vol appears to rise dramatically higher than 75% with a Mean of 273%, although the median remains at 75% over the last 2 years</li>\n<li>With the current PBS flow and prior to blockspace commitment contracts, this strategy is possible but limited to only the current/next block. With the ability to buy two or more blocks, it becomes easier to execute on and thus price Preconfs with confidence</li>\n<li>Connecting the two markets, Vol and Macro traders may therefore trade the Preconf markets, in some cases, with little care as to how these instruments are used or valued with respect to the underlying physical gas markets themselves (e.g. typical orderflow, MEV)</li>\n<li>The terms Preconfs and Blocks are used interchangeable for readability</li>\n</ul>\n<h2><a name=\"p-49938-background-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-background-3\"></a>Background</h2>\n<p>How much are Ethereum’s blocks worth?</p>\n<p>Arbitrage, often referred to as ‘arb’ trading, typically involves quantitative strategies that exploit pricing discrepancies or minor imbalances between closely related financial instruments. These instruments may be similar in nature or expected to exhibit similar behaviors over time - they can be priced with models or priced using dynamic replication (such as options replicated through dynamic hedging).</p>\n<p>One such arb is statistical arbitrage (‘stat arb’) that frequently employs mean reversion models to capitalize on short-term pricing inefficiencies. Another one is latency arbitrage that takes advantage of minute price variations across different trading venues. In the cryptocurrency, a common form of arbitrage is known as CEX/DEX arb, a type of latency arbitrage where decentralized exchanges (DEXs) respond more slowly to market changes than centralized exchanges (CEXs), largely due to differing block or settlement times. In such scenarios, traders engage in relative-value or pairs trading between centralized exchanges (such as Binance and OKX) and decentralized exchanges (such as Uniswap and Curve).</p>\n<h3><a name=\"p-49938-the-network-as-a-financial-instrument-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-the-network-as-a-financial-instrument-4\"></a>The Network As a Financial Instrument</h3>\n<p>In this article, we look to delineate, and quantify such an arbitrage trade between two seemingly different instruments: the Vol markets on CEX vs the Ethereum Blockchain itself (i.e. the Network, not DEXs).</p>\n<p>The purpose of this article is to introduce a closed-form solution to price a floor price for Ethereum Blocks drawing a direct relationship between Vol markets and the minimum price one should pay for Ethereum Blocks. More specifically, we will look at the effect of selling Strangles on ETH (and other tokens) in CEX, while buying Blockspace Commitments (or Preconfirmations) on Ethereum.</p>\n<p>While this type of relationship may exist with limited effect today for 12 seconds, the burgeoning space of preconfirmations and validator commitments will enable this to exist for much longer periods turning what may be a theoretical exercise today into a practical exercise tomorrow.</p>\n<p>Through this exercise, we position the Blockchain or Network itself as a financial instrument that can be used for macro hedging or relative value trading purposes.</p>\n<h3><a name=\"p-49938-what-is-a-strangle-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-what-is-a-strangle-5\"></a>What is a Strangle?</h3>\n<p>The building blocks of options markets or ‘Vol’ markets are ‘vanilla’ options known as calls and puts. Combining such vanilla options together at the same strike produces a ‘V-shaped’ payoff known as a ‘Straddle’. A Straddle will always have a positive intrinsic value or payoff enabling the buyer to monetize any movement of the underlying instrument.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/7/1/71515733c74792ef64bb5afa1456f44c8a078678.png\" data-download-href=\"https://ethresear.ch/uploads/default/71515733c74792ef64bb5afa1456f44c8a078678\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/7/1/71515733c74792ef64bb5afa1456f44c8a078678_2_690x399.png\" alt=\"image\" data-base62-sha1=\"gasdZshCZ95459up6h7kPEGPIkE\" width=\"690\" height=\"399\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/7/1/71515733c74792ef64bb5afa1456f44c8a078678_2_690x399.png, https://ethresear.ch/uploads/default/optimized/3X/7/1/71515733c74792ef64bb5afa1456f44c8a078678_2_1035x598.png 1.5x, https://ethresear.ch/uploads/default/original/3X/7/1/71515733c74792ef64bb5afa1456f44c8a078678.png 2x\" data-dominant-color=\"F8F9F9\"></a></div><br>\n<em>Figure 1: Straddles vs Strangles</em><p></p>\n<p>When the strikes are apart from one another, in the above example by a distance of ‘z’, they are called a ‘Strangle’. For example:</p>\n<ul>\n<li>A Put and Call both with strikes of 100 (i.e. X) would collectively be called a Straddle</li>\n<li>A Put and Call with strikes of 90 (i.e. X - z) and 110 (i.e. X + z) respectively, would collectively be a Strangle</li>\n</ul>\n<p>Strangles payoff or have an intrinsic value only when the underlying spot price has moved by a sufficient distance, in this case ‘z’.</p>\n<h3><a name=\"p-49938-what-are-preconfirmations-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-what-are-preconfirmations-6\"></a>What Are Preconfirmations?</h3>\n<p>Preconfirmations and Blockspace Commitments are part of a new field of Ethereum Research and Development focused on giving Validators (called Proposers, i.e. those that Propose the next epoch of blocks) expanded abilities to sell blockspace in a way that gives them more flexibility than they are currently afforded within the current PBS (Proposer-Builder- Separation) flow.</p>\n<p>Such an initiative is intended broadly to bring more control in-protocol (as opposed to externally with Block Builders), and streamline scaling technology for the new field of Based Rollups.</p>\n<p>While there are different forms of Blockspace Commitments, the general form has Proposers providing commitments to buyers - typically Searchers, Market Makers, Block Builders, and others looking to use the blockspace for transactions, among other purposes. For example, there are:</p>\n<ul>\n<li>Inclusion Preconfirmations: Where Proposers issue guarantees to include transactions within a specified block, anywhere in the block</li>\n<li>Execution Preconfirmations: Where Proposers issue guarantees to include transactions within a specific block, with a specific state or result</li>\n<li>Whole Block Sales which may be called Entire Blocks or Execution Tickets: Where Proposers sell their block en masse to an intermediary who then engages in some form of pseudo block building consisting perhaps of a mix of their own trades, Inclusion Preconfirmations, Execution Preconfirmations, private order flow, and public order flow.</li>\n</ul>\n<p>For the purposes of this paper, we will be referring to Whole Block Sales by Proposers, but may refer to them generically as Preconfirmations or Preconfs for ease of reading and consistency with some current nomenclature.</p>\n<h3><a name=\"p-49938-current-preconf-and-blockspace-pricing-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-current-preconf-and-blockspace-pricing-7\"></a>Current Preconf and Blockspace Pricing</h3>\n<p>The value of Ethereum blocks are often associated with the Maximum Extractable Value (MEV), that is, the largest amount of value that one could extract or monetize within a 12 second period. This may include a mix of the public’s willingness to pay for transactions (financial and non-financial), private order flow, as well as other MEV trades including sandwich attacks, atomic arbitrage, CEX/DEX arb, or other.</p>\n<p>Extending into the Multi-block MEV (MMEV) or Consecutive Block valuation, MMEV valuation is often performed in the context of TWAP oracle manipulation attacks producing forced liquidations by price manipulation. While there is an intersection between longer-term CEX/DEX arb captured in single-block pricing discussions vs the relative value vol markets, we prefer the simplicity and forward-looking nature of the vol markets for the purpose of our pricing exercise.</p>\n<p>Putting this together, there are multiple ways to value a single or multiple set of Ethereum blocks. From our analysis, we present a floor price for Ethereum blocks driven by non-arbitrage pricing and the Vol markets in CeFi. From this floor price one may additionally then consider encompassing other forms of value capture to arrive at a true mid-market price of an Ethereum Block.</p>\n<h2><a name=\"p-49938-the-trade-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-the-trade-8\"></a>The Trade</h2>\n<h3><a name=\"p-49938-historical-background-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-historical-background-9\"></a>Historical Background</h3>\n<p>Buying a block, or multiple blocks of Ethereum enables one more control over order execution and states. Simply, if it were possible to buy 12.8 minutes of Ethereum (i.e. 64 blocks or two epoch) one could watch prices as they move in CEX during this time, and at any time during this 12 minute period, one could put on a relative value trade capturing the difference in prices between the CEXs and DEXs. If, for example, prices rose 5% in CEX during this time, one could sell assets in CEX, and buy those same assets in DEX (where the prices haven’t moved) earning 5% in the process. While this may not be currently feasible, it is the starting point for discussion.</p>\n<p>Historically, we can look at these dynamics measuring the maximum price movements over 12 secs, 1 min, or more. We can then take into account the liquidity on DEXs and calculate a historical breakeven between the profitability of such transactions with the number of blocks for a given period. For more on this see this article: <a href=\"https://greenfield.xyz/2024/09/10/statistical-arbitrage-on-amms-and-block-building-on-ethereum-part-1/\" class=\"inline-onebox\">| Greenfield</a></p>\n<p>While possible to calculate, we’re more interested in looking forward, not backward. Enter the Vol markets.</p>\n<h3><a name=\"p-49938-vol-markets-strangles-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-vol-markets-strangles-10\"></a>Vol Markets &amp; Strangles</h3>\n<p>To execute the trade above, one must cross bid-offer, paying transaction fees on both the CEX and DEX side as well as ‘time’ the market accordingly to maximize the arbitrage. One furthermore has to factor in the liquidity or depth of the market. That is, for the strategy to pay off, prices need to move beyond a certain minimum threshold or in our case, a Strike price different from the current Spot price.</p>\n<p>Let us assume that the “sum of transaction fees and slippage between CEX/DEX” - our ‘threshold’ or Strike is 0.10%. If we have the Vol of the asset, and a time horizon, we can now price this using Black-Scholes as a simple Strangle.</p>\n<p>Assume the following:</p>\n<ul>\n<li>Trade Size: $10mm</li>\n<li>Token: ETH</li>\n<li>Spot Price: 100 || to keep things simple</li>\n<li>Interest Rates: 4.00%</li>\n<li>Dividend Yield: 0.00%</li>\n<li>Vol: 75%</li>\n<li>Expiry: 32 Blocks (12.8mins)</li>\n<li>Fees: 0.10 as accounted for in the following Strikes:\n<ul>\n<li>Strike 1: 100 + 0.10 = 100.10 - for the Call Option</li>\n<li>Strike 2: 100 - 0.10 = 99.90 - for the Put Option</li>\n</ul>\n</li>\n</ul>\n<p>Result:</p>\n<ul>\n<li>Call Price: 0.0620%</li>\n<li>Put Price: 0.0619%</li>\n<li>Strangle Price: 0.0620% + 0.0619% = 0.1239%</li>\n<li>Price in USD Terms: $12,388</li>\n</ul>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/a/ca508d8bddc9793de7b6326ed95552f760925a2e.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/ca508d8bddc9793de7b6326ed95552f760925a2e\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/a/ca508d8bddc9793de7b6326ed95552f760925a2e_2_690x376.jpeg\" alt=\"image\" data-base62-sha1=\"sRL22iwFUGngN8Eams1zZKPmFkO\" width=\"690\" height=\"376\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/a/ca508d8bddc9793de7b6326ed95552f760925a2e_2_690x376.jpeg, https://ethresear.ch/uploads/default/optimized/3X/c/a/ca508d8bddc9793de7b6326ed95552f760925a2e_2_1035x564.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/a/ca508d8bddc9793de7b6326ed95552f760925a2e_2_1380x752.jpeg 2x\" data-dominant-color=\"FBFBFC\"></a></div><br>\n<em>Figure 2: A Strangle on Ethereum and all its DEXs combined</em><p></p>\n<p>Per the diagram above, if one could trade this Strangle in CEX for $12,388 (see <a href=\"https://docs.google.com/spreadsheets/d/1wwhe-O8L0eG72Mb0PJGLhlDi1Fxe1E0CSzpX0sAaz2U/edit?usp=sharing\">spreadsheet</a> for calculations), one should equivalently be able to trade Preconfs on Ethereum for the same price. If the underlying spot market in CEX moves up or down more than 0.10, whilst DEX prices stay the same, then these options become in-the-money…</p>\n<p>Putting CEX and DEX together below, one would sell the Strangle on ETH in CEX but buy Preconfs on Ethereum giving them an almost identical payoff where z represents both the expected transaction fees and the distance to the Strike price for pricing purposes:</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/9/b/9bf362500aa612b87a9254ea96544495005030a3.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/9bf362500aa612b87a9254ea96544495005030a3\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/9/b/9bf362500aa612b87a9254ea96544495005030a3_2_422x500.jpeg\" alt=\"image\" data-base62-sha1=\"mfBsg7Ct99lf3NCKAcVNASRpepl\" width=\"422\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/9/b/9bf362500aa612b87a9254ea96544495005030a3_2_422x500.jpeg, https://ethresear.ch/uploads/default/optimized/3X/9/b/9bf362500aa612b87a9254ea96544495005030a3_2_633x750.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/9/b/9bf362500aa612b87a9254ea96544495005030a3_2_844x1000.jpeg 2x\" data-dominant-color=\"FBFBFB\"></a></div><br>\n<em>Figure 3: Short CEX Strangle + Long Ethereum Preconf</em><p></p>\n<p>If the Vol markets imply a price of $12,399 for 12.8mins (i.e. 32 blocks) then this is the amount (less one dollar) that one would be willing to pay to buy up 32 consecutive blocks (i.e. 12.8mins) of Ethereum. Given the assumptions above, the expected value is always positive and we thus have a closed-form solution to Floor pricing for Preconfs.</p>\n<p>The arbitrage carries two scenarios:</p>\n<ul>\n<li>Prices are between 99.90 and 100.10: Both the Strangle and Preconf Expire ‘out-of-the-money’ without any cash settlement</li>\n<li>Prices are beyond 99.90 and 100.10 with options expiring ‘in-the-money’. The Trader incurs a loss on the CEX Strangle, but then monetizes the gain in DeFi by entering into an off-market spot trade (with respect to CEX) crystallizing the in-the-money value of the option</li>\n</ul>\n<p>Vol Traders do this 1000s of times a day, with automated systems and razor-sharp precision. Trading Vol vs Preconfs opens up an entirely new relative-value asset class for them to potentially buy vol or gamma much more cheaply.</p>\n<h3><a name=\"p-49938-scenario-analyses-and-sensitivities-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-scenario-analyses-and-sensitivities-11\"></a>Scenario Analyses and Sensitivities</h3>\n<p>Turning to Gas Market terminology, the price of $12,399 translates into a Gwei price of 165 Gwei ($12,399 / 2,500 * 1e9 / 30e6) assuming the ETH price is 2,500 in this example. Using the Strangle pricing method, we can then infer from the ETH Vol markets (75% vol in this case) the price of 1 block, all the way up to 32 consecutive blocks or slots as follows:<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/5/7/57defb97d1f6360692afa2c53920481469468872.png\" data-download-href=\"https://ethresear.ch/uploads/default/57defb97d1f6360692afa2c53920481469468872\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/5/7/57defb97d1f6360692afa2c53920481469468872_2_690x285.png\" alt=\"image\" data-base62-sha1=\"cxlhfX0XwY53CSr2H5WAK7cu33Y\" width=\"690\" height=\"285\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/5/7/57defb97d1f6360692afa2c53920481469468872_2_690x285.png, https://ethresear.ch/uploads/default/optimized/3X/5/7/57defb97d1f6360692afa2c53920481469468872_2_1035x427.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/5/7/57defb97d1f6360692afa2c53920481469468872_2_1380x570.png 2x\" data-dominant-color=\"FBFCFC\"></a></div><br>\n<em>Figure 4: Price for N-Consecutive Blocks of Ethereum</em><p></p>\n<p>Comparing the difference in Strangle prices between a period of N(0,1), to a Strangle with a period of length N(0,2), we can then price the Strangle for Slot 2 N(1,2), as follows for the entire curve. We can furthermore take the ‘average preconf price’ for N slots.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/d/cd5b4a440fe65ad5649f789572044f132c3a152f.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/cd5b4a440fe65ad5649f789572044f132c3a152f\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/d/cd5b4a440fe65ad5649f789572044f132c3a152f_2_690x379.jpeg\" alt=\"image\" data-base62-sha1=\"tiFt74q3VhzyYaW0bDyd5MikmDB\" width=\"690\" height=\"379\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/d/cd5b4a440fe65ad5649f789572044f132c3a152f_2_690x379.jpeg, https://ethresear.ch/uploads/default/optimized/3X/c/d/cd5b4a440fe65ad5649f789572044f132c3a152f_2_1035x568.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/d/cd5b4a440fe65ad5649f789572044f132c3a152f_2_1380x758.jpeg 2x\" data-dominant-color=\"FCFBFC\"></a></div><p></p>\n<p><em>Figure 5: Slot N Price vs Avg Price for N-Slots</em></p>\n<p>The following table highlights the fees in Gwei that validators would get paid for specific blocks/slots with 5.16 Gwei as the average. This may be compared, for example, to historical Priority Fees that one receives via MEV-Boost where 4.04 Gwei is the average:</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/3/c3625c9aef9793341f69e2c496ba4151b8ba8a06.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/c3625c9aef9793341f69e2c496ba4151b8ba8a06\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/3/c3625c9aef9793341f69e2c496ba4151b8ba8a06_2_690x369.jpeg\" alt=\"image\" data-base62-sha1=\"rSrQrdQYkGKvfEsa1G7mfZSdpPM\" width=\"690\" height=\"369\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/3/c3625c9aef9793341f69e2c496ba4151b8ba8a06_2_690x369.jpeg, https://ethresear.ch/uploads/default/optimized/3X/c/3/c3625c9aef9793341f69e2c496ba4151b8ba8a06_2_1035x553.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/3/c3625c9aef9793341f69e2c496ba4151b8ba8a06_2_1380x738.jpeg 2x\" data-dominant-color=\"F2F4FA\"></a></div><br>\n<em>Figure 6: Historical Priority Fees from MEV-Boost. Priority Fees from 24 Jan 2024 to 9 Sep 2024.</em><p></p>\n<h4><a name=\"p-49938-transaction-costs-impact-on-pricing-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-transaction-costs-impact-on-pricing-12\"></a>Transaction Costs Impact on Pricing</h4>\n<p>The difference between the Strike Prices and Spot Price or transaction costs above are taken to be uniform at 0.10%. In practice however, transaction costs encompass i) actual transaction fees, and ii) liquidity/slippage in execution. Below, we see that Transaction Costs have a significant impact on Preconf pricing especially where there is a shorter time-to-maturity.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/b/bb067308cb50d9cac678fffc4c4df056a7b697c3.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/bb067308cb50d9cac678fffc4c4df056a7b697c3\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/b/bb067308cb50d9cac678fffc4c4df056a7b697c3_2_690x395.jpeg\" alt=\"image\" data-base62-sha1=\"qGv6ugLzC87bVuLljsNJvDlSxCb\" width=\"690\" height=\"395\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/b/bb067308cb50d9cac678fffc4c4df056a7b697c3_2_690x395.jpeg, https://ethresear.ch/uploads/default/optimized/3X/b/b/bb067308cb50d9cac678fffc4c4df056a7b697c3_2_1035x592.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/b/bb067308cb50d9cac678fffc4c4df056a7b697c3_2_1380x790.jpeg 2x\" data-dominant-color=\"FBFAF9\"></a></div><br>\n<em>Figure 7: Preconf Pricing for varying levels of Transaction Costs</em><p></p>\n<h4><a name=\"p-49938-volatility-impact-on-pricing-13\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-volatility-impact-on-pricing-13\"></a>Volatility Impact on Pricing</h4>\n<p>Finally, as the CEX leg of the trade uses Volatility as the primary market input, we now consider the impact that volatility has on Preconf pricing with Vega close to 0.1 Gwei at the 4th slot, and ~0.06 Gwei at the 32nd slot. That is, <strong>at Slot 4, a 10% change in Vol is impacts Block prices by 1 Gwei.</strong></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/6/c/6c7b2d7c8762d69423e0fc605cd9d64cd9f85dbc.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/6c7b2d7c8762d69423e0fc605cd9d64cd9f85dbc\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/6/c/6c7b2d7c8762d69423e0fc605cd9d64cd9f85dbc_2_690x406.jpeg\" alt=\"image\" data-base62-sha1=\"ftFtnbyJu5St79vn69nUBNsCyPG\" width=\"690\" height=\"406\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/6/c/6c7b2d7c8762d69423e0fc605cd9d64cd9f85dbc_2_690x406.jpeg, https://ethresear.ch/uploads/default/optimized/3X/6/c/6c7b2d7c8762d69423e0fc605cd9d64cd9f85dbc_2_1035x609.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/6/c/6c7b2d7c8762d69423e0fc605cd9d64cd9f85dbc_2_1380x812.jpeg 2x\" data-dominant-color=\"FBFAF9\"></a></div><br>\n<em>Figure 8: Preconf Prices for Different levels of Volatility</em><p></p>\n<h2><a name=\"p-49938-refinements-market-sizing-14\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-refinements-market-sizing-14\"></a>Refinements &amp; Market Sizing</h2>\n<p>For market sizing, we look exclusively at the CEX Strangle vs Preconf on Ethereum L1.</p>\n<h3><a name=\"p-49938-consecutive-blocks-15\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-consecutive-blocks-15\"></a>Consecutive Blocks</h3>\n<p>The exercise considers buying multiple blocks, potentially up to 32 or 64 blocks depending on the lookahead window. In reality however, this is extremely difficult due to the diversity of Validators.</p>\n<p>There is a subset of Validators that, for ideological reasons or other, do not adopt MEV-Boost, and would be unlikely to adopt a framework that captures more MEV. In economic terms, they are not rational. It could be that they do not ‘believe’ in MEV, or they simply could be an at-home staker that hasn’t upgraded to MEV-Boost. Either way, these Vanilla or self-built blocks account for slightly less than 10% (and decreasing) of blocks (see realtime with ETHGas’ <a href=\"http://www.ethgas.com\">GasExplorer</a>, and research with <a href=\"https://www.blocknative.com/blog/how-self-built-blocks-unintentionally-introduce-base-fee-volatility\">Blocknative</a>).</p>\n<p>Let’s assume the other 90% are rational (i.e. they are economically motivated) and that they are somehow able to coordinate among one another through some unifying medium for the sale of consecutive blocks. In this case, we can then model the frequency of single vs consecutive blocks where about half of the time there are less than 7 consecutive blocks, and the other half have somewhere between 8 and 32 consecutive blocks.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/a/9/a96d126f31fbaa6afded0e3cdd01172eceba7b03.png\" data-download-href=\"https://ethresear.ch/uploads/default/a96d126f31fbaa6afded0e3cdd01172eceba7b03\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/a/9/a96d126f31fbaa6afded0e3cdd01172eceba7b03_2_690x401.png\" alt=\"image\" data-base62-sha1=\"oaOnrPwtQx9meBoFq2buRaOZ3Ef\" width=\"690\" height=\"401\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/a/9/a96d126f31fbaa6afded0e3cdd01172eceba7b03_2_690x401.png, https://ethresear.ch/uploads/default/optimized/3X/a/9/a96d126f31fbaa6afded0e3cdd01172eceba7b03_2_1035x601.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/a/9/a96d126f31fbaa6afded0e3cdd01172eceba7b03_2_1380x802.png 2x\" data-dominant-color=\"E2E9F9\"></a></div><br>\n<em>Figure 9: Frequency of Consecutive Blocks</em><p></p>\n<h3><a name=\"p-49938-historical-volatility-analysis-16\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-historical-volatility-analysis-16\"></a>Historical Volatility Analysis</h3>\n<p>Looking at almost 2 years of trades from 10 Sep 2022 to 10 Sep 2024 on Deribit, we uncover some fascinating dynamics for short-dated transactions.</p>\n<h4><a name=\"p-49938-h-1-hour-to-expiry-17\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-h-1-hour-to-expiry-17\"></a>1 Hour to Expiry</h4>\n<p>For those transactions with less than 1 hour to expiry, we find approx 13,500 trades over this period, a mean Vol of 107.52%, a Median of 63%, and 75th Percentile as 102%. Note that Deribit’s Vols are capped at 999 suggesting that the mean may be higher than that which is indicated.<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/a/f/af0a574ea2876081224b6e7b6ecd012ff163221a.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/af0a574ea2876081224b6e7b6ecd012ff163221a\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/a/f/af0a574ea2876081224b6e7b6ecd012ff163221a_2_655x500.jpeg\" alt=\"image\" data-base62-sha1=\"oYtIcqYEVZfXvn8QQ5AD5SnbJKG\" width=\"655\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/a/f/af0a574ea2876081224b6e7b6ecd012ff163221a_2_655x500.jpeg, https://ethresear.ch/uploads/default/optimized/3X/a/f/af0a574ea2876081224b6e7b6ecd012ff163221a_2_982x750.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/a/f/af0a574ea2876081224b6e7b6ecd012ff163221a_2_1310x1000.jpeg 2x\" data-dominant-color=\"F9FAFB\"></a></div><br>\n<em>Figure 10: Distribution of Implied Vol on ETH Options with less than 1 Hour to Expiry</em><p></p>\n<h4><a name=\"p-49938-h-12-mins-to-expiry-18\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-h-12-mins-to-expiry-18\"></a>12 Mins to Expiry</h4>\n<p>For transactions with less than 12 mins to expiry (or approx 64 blocks), we find almost 1,400 trades over this period with a mean of 273% Vol, median of 75% Vol, and 75th Percentile as 395% Vol.<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/e/deede16e86a88239a6ecc6e13c99cd93778fa614.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/deede16e86a88239a6ecc6e13c99cd93778fa614\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/e/deede16e86a88239a6ecc6e13c99cd93778fa614_2_662x500.jpeg\" alt=\"image\" data-base62-sha1=\"vO7ECOB4byhbNPJXMQHjMIko6Lq\" width=\"662\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/e/deede16e86a88239a6ecc6e13c99cd93778fa614_2_662x500.jpeg, https://ethresear.ch/uploads/default/optimized/3X/d/e/deede16e86a88239a6ecc6e13c99cd93778fa614_2_993x750.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/e/deede16e86a88239a6ecc6e13c99cd93778fa614_2_1324x1000.jpeg 2x\" data-dominant-color=\"FBFBFC\"></a></div><br>\n<em>Figure: 11: Distribution of Implied Vol on ETH Options 12 Mins to Expiry</em><p></p>\n<h4><a name=\"p-49938-h-12-minutes-to-expiry-19\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-h-12-minutes-to-expiry-19\"></a>&lt;12 Minutes to Expiry</h4>\n<p>Across these 1,400 trades, we then split them into their 1-minute buckets to view distributions across times more closely associated with Preconf Block timeframes.<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/1/4/14686bf48d5c989a80356631a03434fa70bca82f.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/14686bf48d5c989a80356631a03434fa70bca82f\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/1/4/14686bf48d5c989a80356631a03434fa70bca82f_2_690x493.jpeg\" alt=\"image\" data-base62-sha1=\"2UxgR4gfptNpbbVKcrbcKxAFbQj\" width=\"690\" height=\"493\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/1/4/14686bf48d5c989a80356631a03434fa70bca82f_2_690x493.jpeg, https://ethresear.ch/uploads/default/optimized/3X/1/4/14686bf48d5c989a80356631a03434fa70bca82f_2_1035x739.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/1/4/14686bf48d5c989a80356631a03434fa70bca82f_2_1380x986.jpeg 2x\" data-dominant-color=\"D5DAE4\"></a></div><br>\n<em>Figure 13: Distribution of ETH Implied Vol for the last 12 mins to Expiry</em><p></p>\n<p>The Vol numbers are far larger than we expected warranting further research into this area. While liquidity will need to be analyzed, we have provided some Preconf-implied Pricing given Vols of a much higher magnitude for convenience:<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/f/df84a11dc4575ba83d2836af936004045965d8a4.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/df84a11dc4575ba83d2836af936004045965d8a4\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/f/df84a11dc4575ba83d2836af936004045965d8a4_2_690x411.jpeg\" alt=\"image\" data-base62-sha1=\"vTkDfgFIzYql9DUxU424cUczNhq\" width=\"690\" height=\"411\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/f/df84a11dc4575ba83d2836af936004045965d8a4_2_690x411.jpeg, https://ethresear.ch/uploads/default/optimized/3X/d/f/df84a11dc4575ba83d2836af936004045965d8a4_2_1035x616.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/f/df84a11dc4575ba83d2836af936004045965d8a4_2_1380x822.jpeg 2x\" data-dominant-color=\"FAFAF8\"></a></div><br>\n<em>Figure 14: Preconf Implied Prices for very high levels of Volatility</em><p></p>\n<h4><a name=\"p-49938-vol-smile-20\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-vol-smile-20\"></a>Vol Smile</h4>\n<p>As you may recall, we’re not looking for at-the-money Vol (used for a Straddle) but rather for Vol as it may relate to Strangles. The Vol for out-of-the-money options is almost always higher than at-the-money options. To this effect, we have provided a heat map below providing some color on the smile accordingly.</p>\n<p><em>Figure 15: Vol Smile for 0 to 12 minutes</em></p>\n<h3><a name=\"p-49938-market-sizing-21\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-market-sizing-21\"></a>Market Sizing</h3>\n<p>Bringing the above information together, we decide to take the combined Vol set and use that as a proxy for Strangle pricing. To account for illiquidity, we then provide different scenarios at lower volatilities assuming that as we sell more Strangles, the Vol would decrease accordingly.</p>\n<p>We can now size the market considering:</p>\n<ul>\n<li>The historical mean Vol: 275%</li>\n<li>The frequency of Consecutive Blocks: Per the above</li>\n<li>The implied preconf Floor pricing as a function of Vol: Black-Scholes</li>\n<li>And, making some adjustment for Liquidity: Reducing Vol by up to 200%</li>\n</ul>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/7/b7472612ce4624f0df42973ca84c9800c70d6792.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/b7472612ce4624f0df42973ca84c9800c70d6792\" title=\"image\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/7/b7472612ce4624f0df42973ca84c9800c70d6792_2_690x369.jpeg\" alt=\"image\" data-base62-sha1=\"q9lOnmXohYiRqa5Uolei8VyqDjI\" width=\"690\" height=\"369\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/7/b7472612ce4624f0df42973ca84c9800c70d6792_2_690x369.jpeg, https://ethresear.ch/uploads/default/optimized/3X/b/7/b7472612ce4624f0df42973ca84c9800c70d6792_2_1035x553.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/7/b7472612ce4624f0df42973ca84c9800c70d6792_2_1380x738.jpeg 2x\" data-dominant-color=\"FAF9F8\"></a></div><br>\n<em>Figure 16: Preconf Pricing Based on Frequency of Consecutive Blocks, Historical Volatility and adjusted for Liquidity</em><p></p>\n<p>The annual market size for Blockspace could equal approximately 419,938 ETH per year historically (~$1bln equiv) and with approx 33 million Staked ETH, this amounts to 5.33 Gwei per block or an extra 1.25% in Validator Yields as a floor above Base Fees.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Vol</th>\n<th>275% Vol</th>\n<th>225% Vol</th>\n<th>175% Vol</th>\n<th>125% Vol</th>\n<th>75% Vol</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gwei Total</td>\n<td>282,615</td>\n<td>218,322</td>\n<td>155,081</td>\n<td>93,997</td>\n<td>38,350</td>\n</tr>\n<tr>\n<td>Gwei per Block</td>\n<td>39.25</td>\n<td>30.32</td>\n<td>21.54</td>\n<td>13.06</td>\n<td>5.33</td>\n</tr>\n<tr>\n<td>ETH Total Fees</td>\n<td>3,094,638</td>\n<td>2,390,631</td>\n<td>1,698,137</td>\n<td>1,029,270</td>\n<td>419,938</td>\n</tr>\n<tr>\n<td>Increase to APYs</td>\n<td>9.10%</td>\n<td>7.03%</td>\n<td>4.99%</td>\n<td>3.03%</td>\n<td>1.24%</td>\n</tr>\n<tr>\n<td>$ Total Fees</td>\n<td>7,736,594,273</td>\n<td>5,976,577,160</td>\n<td>4,245,342,208</td>\n<td>2,573,176,209</td>\n<td>1,049,844,310</td>\n</tr>\n</tbody>\n</table>\n</div><h2><a name=\"p-49938-other-considerations-22\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-other-considerations-22\"></a>Other Considerations</h2>\n<h3><a name=\"p-49938-liquidity-23\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-liquidity-23\"></a>Liquidity</h3>\n<p>On the CEX side, we would like to assume there is infinite liquidity but this is not realistic. In the example immediately above, we bump the Vol downward to adjust for this but in reality, we would need more order book information. Looking forward, this market could also be illiquid because there was never another market to trade it against, e.g. Preconfs. We furthermore would need to run the analysis considering tokens other than ETH.</p>\n<p>Everyday there is a 12-minute direct overlap where a set of option expiries for BTC, ETH, SOL, XRP on Deribit (and other exchanges) roughly match the time-frame for preconfs enabling one to recalibrate and reconcile any intraday Vol positions vs the actual Preconf markets with more accuracy. For the rest of the day, traders would need to run basis-risk between the Vol positions on their books, with their Preconf positions accordingly. As such, execution in the Vol markets and direct one-for-one pairs trading may be limited on a regular basis and only possible sporadically.</p>\n<p>As an alternative to directly offsetting the Short Strangle positions with Long Preconfs, a trader may approach this on a portfolio basis and trade the greeks. In this instance, a preconf buyer may consider selling longer-dated, more liquid straddles, and buying them back up to 12 mins later or whenever the preconf is exercised. The gamma profile there is much less sharp meaning any moves in Spot will have a lesser impact on option price. There is additional Vol/Vega to consider (although less impactful for a short-dated option) and the time decay (which is in the arbitrageur’s favor here as they would be Short the options and theta decays faster closer to expiry). If one could seemingly buy Vol 5-10% cheaper via Preconfs over time, then this would indeed be attractive to options traders.</p>\n<p>On the DEX side, liquidity across ETH, and other tokens is limited to about $4-5mm at the time of this article. Taking into account the total volume on major DEXs, we’d additionally expect about $200k of additional demand every block from general order flow. Although most of this typically may not be seen in the public mempool, over 32 blocks this would be $6.4mm which one could either use to estimate option expiration liquidity and/or capture via other conventional MEV approaches (i.e. front/back-runs).</p>\n<p>More research on liquidity, and execution is warranted.</p>\n<h3><a name=\"p-49938-inventory-24\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-inventory-24\"></a>Inventory</h3>\n<p>To execute trades on two different venues, traders will need to hold sufficient inventory on both locations. For this reason, an additional cost of capital is not considered in this exercise.</p>\n<p>For example, if the Call part of the Strangle ends up in-the-money (ITM), when the Preconf is exercised, the user will:</p>\n<ul>\n<li>Buy, let’s say, ETH in the DEX and sell it in the CEX. That is, the user needs USDT/C inventory onchain, and ETH inventory in the CEX, to avoid any transfer lag.</li>\n</ul>\n<p>Larger market makers should have sufficient liquidity on both sides making this lesser of an issue.</p>\n<h3><a name=\"p-49938-european-vs-american-options-25\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-european-vs-american-options-25\"></a>European vs American Options</h3>\n<p>The CEX Strangle (i.e. where the Arbitrageur is ‘Short’) is a European Option unlike the Preconfirmation (i.e. where the Arbitrageur is ‘Long’) which is more an American Option. This gives the Arbitrageur positive basis such that the instrument they are ‘Long’ has more optionality or upside built into it. If the Preconf is early exercised, the trader receives the intrinsic value while the Strangle still has some time value (although minimal), therefore, the PNL is equal to the Net Premium minus the time value difference.</p>\n<h3><a name=\"p-49938-what-about-other-mev-and-mmev-26\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-what-about-other-mev-and-mmev-26\"></a>What About Other MEV and MMEV?</h3>\n<p>While there is some intersection between conventional MEV and the Strangle strategy as highlighted above, there is still the value to the everyday deal-flow, alongside significant other forms of MEV that are not captured. Monetization of such flows would be separate to, and in addition to, that of the Floor price.</p>\n<p>The Strangle exercise above suggests that some types of single-block MEV may currently be constrained by transaction costs which would indicate a non-linear MMEV for when multi-block purchases are possible (at least within the first few blocks).</p>\n<h2><a name=\"p-49938-conclusions-27\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-conclusions-27\"></a>Conclusions</h2>\n<p>The purpose of this paper is to open up a discussion and illustrate a novel approach for the pricing of preconfs - one that importantly responds in real-time to prevailing market conditions. While the execution of such a strategy is difficult, it is not insurmountable for sophisticated players to automate.</p>\n<p>Perhaps the most important consideration is that the Price of the Preconfs is a function of the Size of the Markets. If both the Options markets on Deribit and DEX liquidity are 10x larger than they are today, the Preconf Price Floors would be 10x those indicated above. Financial markets often look for inflection points where trades that were almost-possible suddenly become mainstream. With Gas Markets opening up, Macro traders now able to hedge Vol with Preconfs, Based Rollups increasing liquidity, and a trend towards lower transaction fees, this is indeed an interesting area of research.</p>\n<p>We believe that highlighting a seemingly odd relationship between token Vol and the Ethereum Blockchain itself will help to further the study of risk-neutral block pricing and are excited to discuss and explore this, and other approaches, with any other parties who may be interested.</p>\n<h1><a name=\"p-49938-references-28\" class=\"anchor\" href=\"https://ethresear.ch#p-49938-references-28\"></a>References</h1>\n<p>[ 1 ] Pascal Stichler, <a href=\"https://ethresear.ch/t/does-multi-block-mev-exist-analysis-of-2-years-of-mev-data/20345\">Does multi-block MEV exist? Analysis of 2 years of MEV Data</a></p>\n<p>[ 2 ] Öz B, Sui D, Thiery T, Matthes F. Who Wins Ethereum Block Building Auctions and Why?. arXiv preprint arXiv:2407.13931. 2024 Jul 18.</p>\n<p>[ 3 ] Jensen JR, von Wachter V, Ross O. Multi-block MEV. arXiv preprint arXiv:2303.04430. 2023 Mar 8.</p>\n<p>[ 4 ] Christoph Rosenmayr, Mateusz Dominiak - Statistical Arbitrage on AMMs and Block Building On Ethereum - <a href=\"https://greenfield.xyz/2024/09/10/statistical-arbitrage-on-amms-and-block-building-on-ethereum-part-1/\">Part 1</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/pricing-ethereum-blocks-with-vol-markets-with-implications-for-preconfirmations/20419\">Read full topic</a></p>","link":"https://ethresear.ch/t/pricing-ethereum-blocks-with-vol-markets-with-implications-for-preconfirmations/20419","pubDate":"Thu, 12 Sep 2024 11:55:19 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20419"},"source":{"@url":"https://ethresear.ch/t/pricing-ethereum-blocks-with-vol-markets-with-implications-for-preconfirmations/20419.rss","#text":"Pricing Ethereum Blocks with Vol Markets with Implications for Preconfirmations"},"filter":false},{"title":"Resolving the Dichotomy: DeFi Compliance under Zero Knowledge","dc:creator":"Therecanbeonlyone","category":"Decentralized exchanges","description":"<p>This is a summary and enumeration of relevant research questions based on the recent <a href=\"https://entethalliance.org/2024-08-20-resolving-the-dichotomy-defi-compliance-under-zero-knowledge/\" rel=\"noopener nofollow ugc\">EEA Article by the same title as this post</a>.</p>\n<p><strong>Bulleted Summary</strong></p>\n<ul>\n<li>DeFi protocols face a compliance challenge due to the type of assets traded and their often decentralized governance.</li>\n<li>A solution is leveraging blockchain-native compliance mechanisms, specifically smart contracts, and onchain verifiable zero-knowledge proofs.</li>\n<li>This approach ensures regulatory compliance, weighted risk management, and required transaction reporting while preserving user privacy.</li>\n<li>The framework attaches Compliance-Relevant Auxiliary Information (CRAI) to onchain transactions, enabling real-time compliance monitoring/verification, in a privacy-preserving way using zero-knowledge proofs.</li>\n<li>The framework also specifies compliance-safe DeFi interaction patterns involving using smart contract wallets, DeFi compliance contracts, a compliance smart contract system, and zero-knowledge proofs to enforce compliance rules specified in the compliance smart contract system that defines compliance policies, attestation providers, and compliant assets.</li>\n<li>The framework offers benefits like regulatory compliance, risk management, privacy protection, security, versatility, transparency, and accountability.</li>\n<li>By adopting such a framework, DeFi protocols could navigate the regulatory landscape while maintaining their core principles.</li>\n<li>Some of this solution already exists (compliance smart contract system, compliant assets, etc.) and need to be further expanded (smart contract wallets, compliance wrapper contracts, DeFi-specific custom hooks, etc.)</li>\n</ul>\n<p>Below is a list of open research questions in no particular order:</p>\n<ul>\n<li>What are the potential challenges and limitations of implementing this framework in existing DeFi protocols?</li>\n<li>How can the framework’s privacy features be further enhanced to accommodate complex compliance scenarios with many compliance assertions as zkps e.g. using proof aggregation and proof recursion?</li>\n<li>How can the framework be extended to support a broader range of compliance requirements beyond KYC/AML e.g. incorporated DAOs, Power-of-Attorney?</li>\n<li>What are the potential governance challenges associated with managing and updating compliance policies within the framework?</li>\n<li>How can the framework’s transparency and accountability features be leveraged to further enhance DeFi e.g. custom hooks?</li>\n<li>How can the framework be adapted to different regulatory environments and jurisdictions?</li>\n<li>What are the economic implications of implementing this framework for DeFi users and protocols?</li>\n</ul>\n<p>Given that part of the framework already exists, this post is to stimulate further discussion on the framework itself, and its suggested open research questions.</p>\n<p>Looking forward to the feedback from the Ethereum research community.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/resolving-the-dichotomy-defi-compliance-under-zero-knowledge/20413\">Read full topic</a></p>","link":"https://ethresear.ch/t/resolving-the-dichotomy-defi-compliance-under-zero-knowledge/20413","pubDate":"Wed, 11 Sep 2024 21:51:53 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20413"},"source":{"@url":"https://ethresear.ch/t/resolving-the-dichotomy-defi-compliance-under-zero-knowledge/20413.rss","#text":"Resolving the Dichotomy: DeFi Compliance under Zero Knowledge"},"filter":false},{"title":"Lookup argument and its tweaks","dc:creator":"ETatuzova","category":"zk-s[nt]arks","description":"<p>In building the Placeholder proof system for =nil; Foundation, we use a lookup argument based on the <a href=\"https://eprint.iacr.org/2020/315.pdf\" rel=\"noopener nofollow ugc\">Plookup paper</a> by Aztec researchers. We took Plookup technique as a starting point and then made some practical improvements for writing large PLONK circuits with a complex logic.</p>\n<p>Lookup argument allows prover to prove that some table over prime field (hereafter assignment table) satisfies specific constraints: some cells computed from assignment table (lookup input) belong to list of values that is also computed from the assignment table (lookup table).</p>\n<h2><a name=\"p-49919-join-and-split-algorithm-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49919-join-and-split-algorithm-1\"></a>Join-and-split algorithm</h2>\n<p>The core of Plookup techinque is a sorting algorithm. We call it <strong>join-and-split</strong> because it includes two steps:</p>\n<ul>\n<li><strong>join</strong> — lookup table columns are joined together with input columns into single large vector using special reordering algorithm.</li>\n<li><strong>split</strong> — constructed vector is split again into original size parts.</li>\n</ul>\n<p>The case with the single lookup table and single input column is described in the Plookup paper in detail. But it wasn’t enough for our use-cases. We needed lots of efficiently packed lookup tables and lookup constraints applied to arbitrary rows and columns, and we didn’t want to repeat lookup argument for each <code>(input, table)</code> pair.</p>\n<p>So, we modified join-and-split algorithm to be able to join more than two columns. It allows us to use multiple lookup constraints even if they are applied on same rows and use a large lookup table, even if its size is greater than the whole assignment table rows amount by appending columns to assignment table instead of rows. Balance between assignment table rows and columns amounts helps to find a perfect balance for the best prover performance and verification cost.</p>\n<h2><a name=\"p-49919-selector-columns-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49919-selector-columns-2\"></a>Selector columns</h2>\n<p>Original article contains technique to lookup tuples of values that are placed in the same or neighboring rows. It constructs linear combinations of columns with a random factor. Combining this approach with polynomial expressions usage for lookup tables and input columns both we achieved selector columns full support. Circuit designer now can manage which rows exactly are constrained and what rows are reserved for lookup tables storing.</p>\n<p>Plookup paper also describes technique for multiple lookup tables support. They propose to associate each lookup table with its unique identifier and fill tag column to mark what rows contains lookup tables with which identifier. Tag column for input helps to mark what constraints are applied to marked row. Tag columns should be a part of the random linear combination constructed for the lookup table and input columns respectively. This approach is obviously limited. Sum of lookup tables sizes should be less than the whole table rows amount.</p>\n<p>We combined lookup table identifier usage with our selector columns construction and algorithms for large lookup tables. These modifications allow lookup tables to be stored and used without regard to lookup argument restrictions, but according to the best circuit design. It made our lookup argument into a universal and flexible tool.</p>\n<p>Detailed description of our modifications can be found on our <a href=\"https://hackmd.io/@nil-research/rkjJFAtiC\" rel=\"noopener nofollow ugc\">HackMD</a> page. Feel free to share your comments!</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/lookup-argument-and-its-tweaks/20409\">Read full topic</a></p>","link":"https://ethresear.ch/t/lookup-argument-and-its-tweaks/20409","pubDate":"Wed, 11 Sep 2024 15:14:26 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20409"},"source":{"@url":"https://ethresear.ch/t/lookup-argument-and-its-tweaks/20409.rss","#text":"Lookup argument and its tweaks"},"filter":false},{"title":"The Shape of Issuance Curves to Come","dc:creator":"pa7x1","category":"Economics","description":"<p>In this post we will analyze the consequences that the shape of the issuance curve has for the decentralization of the validator set.</p>\n<p>The course of action is the following:</p>\n<p>First, we will introduce the concept of effective yield as the yield observed after taking into account the dilution generated by issuance.</p>\n<p>Second, we will introduce the concept of real yield as the effective yield that a validator obtains post expenses (OpEx, CapEx, taxes…).</p>\n<p>Armed with these definitions we will be able to make some observations about how the shape of the issuance curve can result in centralization forces, as the real yield observed can push out small uncorrelated stakers at high stake rates.</p>\n<p>Then, we will propose a number of properties we would expect the issuance curve to satisfy to minimize these centralization forces. And explore some alternative issuance curves that could deal with the aforementioned issues.</p>\n<p>Finally, some heuristic arguments on how to fix a specific choice of issuance and yield curves.</p>\n<p>Source Code for all plots can be found here: <a href=\"https://github.com/pa7x1/ethereum-issuance\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - pa7x1/ethereum-issuance</a></p>\n<h2><a name=\"p-49913-effective-yield-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-effective-yield-1\"></a>Effective Yield</h2>\n<p>By effective yield we mean the yield observed by an Ethereum holder after taking into account circulating supply changes. For instance, if everyone were to be a staker, the yield observed would be <em>effectively</em> 0%. As the new issuance is split evenly among all participants, the ownership of the circulating supply experienced by each staker would not change. Pre-taxes and other associated costs this situation resembles more a token re-denomination or a fractional stock split. So we would expect the effective yield to progressively reach 0% as stake rates grow to 100%.</p>\n<p>On the other hand, non-staking holders are being diluted by the newly minted issuance. This causes holders to experience a negative effective yield due to issuance. We would expect this effect to be more and more acute as stake rates grow closer and closer to 100%.</p>\n<p>These ideas can be put very simply in math terms.</p>\n<p>Let’s call <span class=\"math\">s</span> the amount of ETH held by stakers, <span class=\"math\">h</span> the amount of ETH held by non-stakers (holders), and <span class=\"math\">t</span> the total circulating supply. Then:</p>\n<p><span class=\"math\">s + h = t</span></p>\n<p>After staking for certain period of time, we will reach a new situation <span class=\"math\">s' + h' = t'</span>. Where <span class=\"math\">s'</span> and <span class=\"math\">t'</span> have been inflated by the new issuance <span class=\"math\">i</span> are obviously related to the nominal staking yield <span class=\"math\">y_s</span>:</p>\n<p><span class=\"math\">s' = s + i = s \\cdot y_s</span></p>\n<p><span class=\"math\">h' = h</span></p>\n<p><span class=\"math\">t' = t + i = t + s \\cdot (y_s - 1)</span></p>\n<p>Now, let’s introduce the normalized quantities <span class=\"math\">s_n</span> and <span class=\"math\">h_n</span>. They simply represent the proportion of total circulating supply that each subset represents:</p>\n<p><span class=\"math\">s_n \\equiv \\frac{s}{t}</span></p>\n<p><span class=\"math\">h_n \\equiv \\frac{h}{t}</span></p>\n<p>We can do the same for <span class=\"math\">s'_n</span> and <span class=\"math\">h'_n</span>:</p>\n<p><span class=\"math\">s'_n \\equiv \\frac{s'}{t'} = \\frac{sy_s}{s(y_s - 1) +t}</span></p>\n<p><span class=\"math\">h'_n \\equiv \\frac{h'}{t'} = \\frac{t-s}{s(y_s - 1) + t}</span></p>\n<p>With these definitions we can now introduce the effective yield as the change in the proportion of the total circulating supply observed by each subset.</p>\n<p><span class=\"math\">y_s^{eff} \\equiv \\frac{s'_n}{s_n} = \\frac{y_s}{\\frac{s}{t}(y_s-1) + 1}</span></p>\n<p><span class=\"math\">y_h^{eff} \\equiv \\frac{h'_n}{h_n} = \\frac{1}{\\frac{s}{t}(y_s-1) + 1} </span></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/6/f/6f2aac4b14043e89f4a7b2722d58ad5d288fc5c4.png\" data-download-href=\"https://ethresear.ch/uploads/default/6f2aac4b14043e89f4a7b2722d58ad5d288fc5c4\" title=\"effective_yield\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/6/f/6f2aac4b14043e89f4a7b2722d58ad5d288fc5c4_2_690x414.png\" alt=\"effective_yield\" data-base62-sha1=\"fRqqoyUFmVjcoMDk2HUVMkiEgrq\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/6/f/6f2aac4b14043e89f4a7b2722d58ad5d288fc5c4_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/6/f/6f2aac4b14043e89f4a7b2722d58ad5d288fc5c4_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/6/f/6f2aac4b14043e89f4a7b2722d58ad5d288fc5c4_2_1380x828.png 2x\" data-dominant-color=\"FBFBFB\"></a></div><p></p>\n<h2><a name=\"p-49913-net-yield-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-net-yield-2\"></a>Net Yield</h2>\n<p>Staking has associated costs. A staker must acquire a consumer-grade PC, it must pay some amount (albeit small) for electricity, it must have a high-speed internet connection. And they also must put their own labor and time to maintain the system operational and secure, or must pay someone to do that job for them. Stakers also observe other forms of costs that eat away from the nominal yield they observe, e.g. taxes. We would like to model this net yield observed after all forms of costs, because it can give us valuable information on how different stakers are impacted by changes in the nominal stake yield.</p>\n<p>To model this we will introduce two types of costs; costs that scale with the nominal yield (e.g. taxes or fees charged by an LST would fit under this umbrella), and costs that do not (i.e. HW, electricity, internet, labor…).</p>\n<p>With our definitions, after staking for a reference period stakers would have earned <span class=\"math\">s' = y_s s = s + s(y_s - 1)</span></p>\n<p>But if we introduce costs that eat away from the nominal yield (let’s call them <span class=\"math\">k</span>), and costs that eat away from the principal (let’s call them <span class=\"math\">c</span>). We arrive to the following formula for the net stake:</p>\n<p><span class=\"math\">s' = s(1-c) + s(y_s - 1) - \\max(0, sk(y_s - 1))</span></p>\n<p>NOTE: The max simply prevents that a cost that scales with yield becomes a profit if yield goes negative. For instance, if yield goes negative it’s unlikely that an LST will pay the LST holders 10%. Or if yield goes negative you may not be able to recoup in taxes as if it were negative income. In those cases we set it to 0. This will become useful later on when we explore issuance curves with negative issuance regimes.</p>\n<p>This represents the net stake our stakers observe after all forms of costs have been taken into account. To be noted that this formula can be easily modified to take into account other types of effects like validator effectiveness (acts as multiplicative factor on the terms <span class=\"math\">(y_s - 1)</span>) or correlation/anti-correlation incentives (which alter <span class=\"math\">y_s</span>).</p>\n<p>To fix ideas, let’s estimate the net yield observed by 3 different types of stakers. A home staker, an LST holder, and an institutional large-scale operator. The values proposed are only orientative and should be tuned to best reflect the realities of each stakeholder.</p>\n<p>A home staker will have to pay for a PC that they amortize over 5 years and costs around 1000 USD, so 200 USD/year. Pay for Internet, 50 USD per month, for around 600 USD/year. Something extra for electricity, less than 100 USD/year for a typical NUC. Let’s assume they are a hobbyist and decide to do this with their spare time, valuing their time at 0 USD/year. This would mean that his staking operation has a cost of around 1000 USD/year for them. If they have 32 ETH, with current ETH prices we can round that at ~100K USD. This would mean that for this staker, <span class=\"math\">c = \\frac{1}{1000}</span>. As their costs represent around 1 over 1000 their stake value.</p>\n<p>Now for the costs that scale with the yield. They will have to pay taxes, these are highly dependent on their tax jurisdiction, but may vary between 20% and 50% in most developed countries. Let’s pick 35% as an intermediate value. In that case, their stake after costs looks like:</p>\n<p><span class=\"math\">s' = s\\left(1-\\frac{1}{1000}\\right) + s(1-0.35)(y_s - 1)</span></p>\n<p>We can do the same exercise for a staker using an LST. In this case, <span class=\"math\">c=0</span> and <span class=\"math\">k</span> is composed of staking fees (10-15%) and taxes (20-50%) which depend on the tax treatment. Rebasing tokens have the advantage of postponing the realization of capital gains. If we assume a 5 year holding period, equivalent to the amortization time we assumed for solo staking, it could look something like this:</p>\n<ul>\n<li>Fixed costs: 0</li>\n<li>Staking fees: 10%</li>\n<li>Capital gains tax: 20%</li>\n<li>Holding period: 5 years</li>\n</ul>\n<p><span class=\"math\">s' = s(1-0) + s(1-0.14)(y_s - 1)</span></p>\n<p>Finally, for a large scale operator. They have higher fixed costs, they will have to pay for labor, etc… But also will run much higher amount of validators. In that case, c can get much smaller as it’s a proportion of s. Perhaps 1 or 2 orders of magnitude smaller. And taxes will be typical of corporate tax rates (20-30%).</p>\n<p><span class=\"math\">s' = s\\left(1-\\frac{1}{10000}\\right) + s(1-0.25)(y_s - 1)</span></p>\n<h2><a name=\"p-49913-net-effective-yield-aka-real-yield-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-net-effective-yield-aka-real-yield-3\"></a>Net Effective Yield (a.k.a Real Yield)</h2>\n<p>Finally, we can blend the two concepts together to understand what’s the real yield a staker or holder obtains net of all forms of costs and after supply changes dilution. I would suggest calling this <em>net effective yield</em> as the <em>real yield</em>, because well, that’s the yield you are <em>really</em> getting.</p>\n<p><span class=\"math\">y_s^{real} = \\frac{(1-c) + (y_s - 1) - \\max(0,k(y_s - 1))}{\\frac{s}{t}(y_s-1)+1}</span></p>\n<p><span class=\"math\">y_h^{real} = y_h^{eff} = \\frac{1}{\\frac{s}{t}(y_s-1) + 1}</span></p>\n<p>In the second equation we are simply stating the fact that there is no cost to holding, so the real yield (after costs) of holding is the same as the effective yield of holding.</p>\n<h2><a name=\"p-49913-the-issuance-curve-and-centralization-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-the-issuance-curve-and-centralization-4\"></a>The Issuance Curve and Centralization</h2>\n<p>Up to here all the equations presented are agnostic of Ethereum’s specificities and in fact are equally applicable to any other scenario where stakeholders observe a yield but that yield is coming from new issuance.</p>\n<p>To bring this analysis back to Ethereum-land it suffices to substitute <span class=\"math\">y_s</span> by Ethereum’s issuance yield as a function of the total amount staked <span class=\"math\">s</span>. And substitute <span class=\"math\">t</span> by the total circulating supply of ETH.</p>\n<p><span class=\"math\">t \\approx 120\\cdot 10^6 \\quad \\text{ETH}</span></p>\n<p><span class=\"math\">i(s) = 2.6 \\cdot 64 \\cdot \\sqrt{s} \\quad \\text{ETH}\\cdot\\text{year}^{-1}</span></p>\n<p><span class=\"math\">y_{s}(s) = 1 + \\frac{2.6 \\cdot 64}{\\sqrt{s}} \\quad \\text{year}^{-1}</span></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/9/d91eba03c4aa2412aea2ad66fade8b7328651aa0.png\" data-download-href=\"https://ethresear.ch/uploads/default/d91eba03c4aa2412aea2ad66fade8b7328651aa0\" title=\"ethereum_issuance_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/9/d91eba03c4aa2412aea2ad66fade8b7328651aa0_2_690x414.png\" alt=\"ethereum_issuance_plot\" data-base62-sha1=\"uYJrre9lHqaC77rGLS3Ft7hiro4\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/9/d91eba03c4aa2412aea2ad66fade8b7328651aa0_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/d/9/d91eba03c4aa2412aea2ad66fade8b7328651aa0_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/9/d91eba03c4aa2412aea2ad66fade8b7328651aa0_2_1380x828.png 2x\" data-dominant-color=\"FBFBFC\"></a></div><p></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/7/c7cd4df4c27030c8209dfb921fb4deae6cd9218a.png\" data-download-href=\"https://ethresear.ch/uploads/default/c7cd4df4c27030c8209dfb921fb4deae6cd9218a\" title=\"ethereum_nominal_yield_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/7/c7cd4df4c27030c8209dfb921fb4deae6cd9218a_2_690x414.png\" alt=\"ethereum_nominal_yield_plot\" data-base62-sha1=\"svwSwRllHQ4QOSvXDydlEmlcpLk\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/7/c7cd4df4c27030c8209dfb921fb4deae6cd9218a_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/c/7/c7cd4df4c27030c8209dfb921fb4deae6cd9218a_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/7/c7cd4df4c27030c8209dfb921fb4deae6cd9218a_2_1380x828.png 2x\" data-dominant-color=\"FBFBFC\"></a></div><p></p>\n<p>We can plot the real yield for the 4 different types of ETH stakeholders we introduced above, as a way to visualize the possible centralization forces that arise due to economies scale, and exogenous factors like taxes.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/0/7/0767a5fc8d2f7667fc9050a1c7d3a9a173b72ce6.png\" data-download-href=\"https://ethresear.ch/uploads/default/0767a5fc8d2f7667fc9050a1c7d3a9a173b72ce6\" title=\"ethereum_real_yield_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/0/7/0767a5fc8d2f7667fc9050a1c7d3a9a173b72ce6_2_690x414.png\" alt=\"ethereum_real_yield_plot\" data-base62-sha1=\"13vpi5ZQ8KWhs99BRRkFP3BU1ee\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/0/7/0767a5fc8d2f7667fc9050a1c7d3a9a173b72ce6_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/0/7/0767a5fc8d2f7667fc9050a1c7d3a9a173b72ce6_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/0/7/0767a5fc8d2f7667fc9050a1c7d3a9a173b72ce6_2_1380x828.png 2x\" data-dominant-color=\"F9F9F9\"></a></div><p></p>\n<p>We can make the following observations, from which we will derive some consequences.</p>\n<h3><a name=\"p-49913-observations-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-observations-5\"></a>Observations</h3>\n<ul>\n<li>\n<p><strong>Observation 0</strong>: The economic choice to participate as a solo staker, LST holder, ETH holder or any other option is made on the gap between the real yields observed and the risks (liquidity, slashing, operational, regulatory, smart contract…) of each option. Typically higher risks demand a higher premium.</p>\n</li>\n<li>\n<p><strong>Observation 1</strong>: Holding always has a lower real yield than staking, at least for the assumptions taken above for costs. But the gap shrinks with high stake rates.</p>\n</li>\n<li>\n<p><strong>Observation 2</strong>: Different stakers cross the 0% real yield at different stake rate. Around 70M ETH staked solo validators start to earn negative real yield. At around 90M ETH institutional stakers start to earn negative real yield. At around 100M LST holders start to earn negative real yield.</p>\n</li>\n<li>\n<p><strong>Observation 3</strong>: When every staker and every ETH holder is becoming diluted (negative real yield), staking is a net cost for everyone.</p>\n</li>\n<li>\n<p><strong>Observation 4</strong>: There is quite a large gap between the stake levels where different stakers cross the 0% real yield.</p>\n</li>\n<li>\n<p><strong>Observation 5</strong>: Low nominal yields affect disproportionately home stakers over large operators. From the cost structure formula above we can see that as long as nominal yields are positive, the only term that can make the real yield negative is <span class=\"math\">c</span>. This term is affected by economies of scale, and small operators will suffer larger <span class=\"math\">c</span>.</p>\n</li>\n</ul>\n<h3><a name=\"p-49913-implications-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-implications-6\"></a>Implications</h3>\n<p><strong>Observation 0</strong> and <strong>Observation 1</strong> imply that as the gap between real yields becomes sufficiently small, participating in the network as some of those subsets may become economically irrational. For example, solo staking may be economically irrational given the operational risks, liquidity risks, slashing risks if the yield premium becomes sufficiently small vs holding. In that case solo stakers may become holders or switch to other forms of staking (e.g. LSTs) where the premium still satisfies the risk.</p>\n<p>Together with <strong>Observation 2</strong> and <strong>Observation 4</strong> implies that as stake rates become higher and higher the chain is at risk of becoming more centralized, as solo stakers (which are the most uncorrelated staking set) must continue staking when it may be economically irrational to do so. Given the above assumptions LSTs will always observe at least 1% real yield higher than holding even at extreme stake rates (~100%), this may mean that there is always an incentive to hold an LST instead of ETH. Furthermore, when solo stakers cross to negative real yield but other stakers do not, other stakers are slowly but steadily gaining greater weight.</p>\n<p>From <strong>Observation 3</strong> we know that the very high stake rate regime, where everyone is observing a negative real yield, is costly for everyone. Everyone observes dilution. The money is going to the costs that were included in the real yield calculation (tax, ISPs, HW, electricity, labor…).</p>\n<p><strong>Observation 5</strong> implies that nominal yield reductions need to be applied with care and certainly not in isolation without introducing uncorrelation incentives at the same time. As they risk penalizing home solo stakers disproportionately.</p>\n<h3><a name=\"p-49913-recommendations-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-recommendations-7\"></a>Recommendations</h3>\n<p>Given the above analysis, we can put forward a few recommended properties the yield curve (respectively the issuance curve) should have. The idea of establishing these properties is that we should be able to discuss them individually and agree or disagree on their desirability. Once agreed they constrain the set of functions we should consider. At a minimum, it will make the discussion about issuance changes more structured.</p>\n<ul>\n<li>\n<p><strong>Property 0</strong>: Although this property is already satisfied with the current issuance curve, it is worth stating explicitly. The protocol should incentivize some minimum amount of stake, to ensure the network is secure and the cost to attack much larger than the potential economic reward of doing so. This is achieved by defining a yield curve that ramps up the nominal yield as the total proportion of stake (<span class=\"math\">s_n</span>) is reduced.</p>\n</li>\n<li>\n<p><strong>Property 1</strong>: The yield curve should contain uncorrelation incentives such that stakers are incentivized to spin-up uncorrelated nodes and to stake independently, instead of joining large-scale operators. From a protocol perspective the marginal value gained from another ETH staked through a large staking operation is much smaller than if that same ETH does so through an uncorrelated node. The protocol should reward uncorrelation as that’s what allows the network to achieve the extreme levels of censorship resistance, liveness/availability and credible neutrality the protocol expects to obtain from its validator set. The economic incentives must be aligned with the expected outcomes, therefore the yield curve must contain uncorrelation incentives.</p>\n</li>\n<li>\n<p><strong>Property 2</strong>: The issuance curve (resp. yield curve) should have a regime where holding is strictly more economically beneficial than staking, at sufficiently high stake rates. This means that the real yield of holding is greater than the real yield of staking if the stake rate is sufficiently high. As explained above it’s the real yield gap the defining characteristic that establishes the economically rational choice to join one subset or another. If the holding real yield can be greater than the staking real yield at sufficiently high stake rates there is an economic incentive to hold instead of continue staking. To be noted, up to here we are not making an argument at what stake rate this should be set. It suffices to agree that 99.9% stake rate is unhealthy for the protocol (it’s a cost for everyone, LSTs will displace ETH as pristine collateral, etc…). If that’s the case, then we can prevent this outcome by setting the holding real yield to be higher than staking at that level. Unhealthy levels are likely found at much lower values of stake rate.</p>\n</li>\n<li>\n<p><strong>Property 3</strong>: To prevent centralization forces, the stake rates at which uncorrelated validators vs correlated validators cross to negative real yield should be small, as small as possible. A large gap between the thresholds to negative real yields of uncorrelated (e.g. home stakers) and correlated sets (e.g. large operators) creates a regime where the validator set can become more and more centralized. To make the case more clear, if uncorrelated validators reach 0 real yield at 30M ETH staked, while holding an LST composed of large operators (e.g. cbETH, wstETH) does so at 100M ETH. The regime where the stake ranges between 30M and 100M is such that solo stakers will tend to disappear, either quickly (they stop staking) or slowly (they become more and more diluted), the outcome in either case is a more centralized validator set.</p>\n</li>\n<li>\n<p><strong>Property 4</strong>: The yield curve should taper down relatively quick to enter the regime of negative real yields. From <strong>Property 2</strong> and <strong>Property 3</strong> we know we should build-in a regime where the real yield from issuance goes negative, but we want this regime to occur approximately at the same stake rate for the different types of stakers, to prevent centralization forces. <strong>Observation 5</strong> implies that if the slope of this nominal yield reduction is slow, stakers with different cost structures will be pushed out at much different stake rates. Hence, we need to make this yield reduction quick.</p>\n</li>\n<li>\n<p><strong>Property 5</strong>: The issuance yield curve should be continuous. It’s tempting to play with discontinuous yield curves, but yield is the main incentive to regulate the total stake of the network. We would like that the changes induced to the total stake <span class=\"math\">s</span> are continuous, therefore the economic incentive should be a continuous function.</p>\n</li>\n</ul>\n<h2><a name=\"p-49913-exploring-other-issuance-curves-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-exploring-other-issuance-curves-8\"></a>Exploring Other Issuance Curves</h2>\n<p>The desired properties can be summarized very succinctly:</p>\n<ul>\n<li>The yield curve should be continuous.</li>\n<li>The yield curve should go up as stake rate goes to 0.</li>\n<li>The yield curve should go to 0 as the stake rate goes up, crossing 0 at some point that bounds from above the desired stake rate equilibrium.</li>\n<li>The yield curve should have uncorrelation incentives such that spinning up uncorrelated validators is rewarded and incentivized over correlated validators.</li>\n<li>The real yield curves of correlated and uncorrelated stakers should become negative relatively close to each other.</li>\n</ul>\n<p>A very simple solution to meet the above is to introduce a negative term to Ethereum’s issuance yield and uncorrelation incentives.</p>\n<p>The negative term should grow faster than the issuance yield as the stake grows, so that it eventually overcompensates issuance and makes the yield go negative quickly at sufficiently high stake rates. This negative term can be thought of as a stake burn, and should be applied on a slot or epoch basis such that it’s unavoidable (thanks to A. Elowsson for this observation).</p>\n<p>Uncorrelation incentives are being explored in other posts. We will simply leave here the recommendation of adopting them as part of any issuance tweaks. Read further: <a href=\"https://ethresear.ch/t/diseconomies-of-scale-anti-correlation-penalties-eip-7716/20114/4\">Anti-Correlation Penalties by Wahrstatter et al.</a></p>\n<h3><a name=\"p-49913-ethereums-issuance-with-stake-burn-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-ethereums-issuance-with-stake-burn-9\"></a>Ethereum’s Issuance with Stake Burn</h3>\n<p>The following is an example of how such a negative term can be introduced.</p>\n<p><span class=\"math\">i(s) = 2.6 \\cdot 64 \\cdot \\sqrt{s} - 2.6 \\cdot \\frac{s \\ln s}{2048} \\quad \\text{ETH} \\cdot \\text{year}^{-1}</span></p>\n<p><span class=\"math\">y_{s}(s) = 1 + \\frac{2.6 \\cdot 64}{\\sqrt{s}} - \\frac{2.6 \\ln s}{2048} \\quad \\text{year}^{-1}</span></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/5/7/5734f552fcad604fd70816d71a7b1af07c067f7c.png\" data-download-href=\"https://ethresear.ch/uploads/default/5734f552fcad604fd70816d71a7b1af07c067f7c\" title=\"ethereum_issuance_with_burn_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/5/7/5734f552fcad604fd70816d71a7b1af07c067f7c_2_690x414.png\" alt=\"ethereum_issuance_with_burn_plot\" data-base62-sha1=\"crt09PHtWyKeX1Jc4NzCTMD7rl2\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/5/7/5734f552fcad604fd70816d71a7b1af07c067f7c_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/5/7/5734f552fcad604fd70816d71a7b1af07c067f7c_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/5/7/5734f552fcad604fd70816d71a7b1af07c067f7c_2_1380x828.png 2x\" data-dominant-color=\"FBFBFC\"></a></div><p></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/e/3/e345685acc94592ba49432571ae51c9c72286588.png\" data-download-href=\"https://ethresear.ch/uploads/default/e345685acc94592ba49432571ae51c9c72286588\" title=\"ethereum_nominal_yield_with_burn_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/e/3/e345685acc94592ba49432571ae51c9c72286588_2_690x414.png\" alt=\"ethereum_nominal_yield_with_burn_plot\" data-base62-sha1=\"wqx5DFxtMEdGnyAw0wni96Tm6tG\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/e/3/e345685acc94592ba49432571ae51c9c72286588_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/e/3/e345685acc94592ba49432571ae51c9c72286588_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/e/3/e345685acc94592ba49432571ae51c9c72286588_2_1380x828.png 2x\" data-dominant-color=\"FBFBFC\"></a></div><p></p>\n<p>The negative stake burn term eventually dominates issuance and can make it go negative. There is complete freedom deciding where this threshold occurs, by simply tweaking the constant pre-factors. In this particular case, the parameters have been chosen so they are rounded in powers of 2 and so that the negative issuance regime roughly happens around 50% stake rate.</p>\n<p>This negative issuance regime induces a positive effective yield on holders, which provides the protocol with an economic incentive to limit the stake rate. As the real yield will eventually be greater holding ETH than staking. It also serves to protect the network from overloading its consensus layer, as it provides the protocol with a mechanism to charge exogenous sources of yield that occur on top of it. If priority fees, MEV, or restaking provide additional yield that would push stake rates above the desired limit, the protocol would start charging those extra sources of yield by making issuance go negative. Hence redistributing exogenous yield onto ETH holders.</p>\n<p>To understand better the impact that this stake burn has on the different stakeholders we can plot the real yield curves.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/6/b664771684f7f8abc3d591b6b6acdaae46a63cbe.png\" data-download-href=\"https://ethresear.ch/uploads/default/b664771684f7f8abc3d591b6b6acdaae46a63cbe\" title=\"ethereum_real_yield_with_burn_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/6/b664771684f7f8abc3d591b6b6acdaae46a63cbe_2_690x414.png\" alt=\"ethereum_real_yield_with_burn_plot\" data-base62-sha1=\"q1w90vnDM666Ewbl9P2rVMRvCxg\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/6/b664771684f7f8abc3d591b6b6acdaae46a63cbe_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/b/6/b664771684f7f8abc3d591b6b6acdaae46a63cbe_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/6/b664771684f7f8abc3d591b6b6acdaae46a63cbe_2_1380x828.png 2x\" data-dominant-color=\"F9F9F9\"></a></div><p></p>\n<p>We can see how the introduction of a negative issuance yield regime has helped achieve most of the properties we desired to obtain. Particularly, we can notice the stake rates at which different stakeholders reach 0 real yield have compressed and are much closer to each other. And we can appreciate how when stake rates get close to 50% (given the choice of parameters) holders start to observe a positive real yield which disincentivizes additional staking. Holding real yields can become quite large so even large exogenous sources of yield can be overcome.</p>\n<p>Given that we haven’t touched the positive issuance term, this results in a large reduction of the staking yield. We can increase the yield trivially while respecting the same yield curve shape. Here the same curve with larger yield:</p>\n<p><span class=\"math\">i(s) = 2.6 \\cdot 128 \\cdot \\sqrt{s} - 2.6 \\cdot \\frac{s \\ln s}{1024} \\quad \\text{ETH} \\cdot \\text{year}^{-1}</span></p>\n<p><span class=\"math\">y_{s}(s) = 1 + \\frac{2.6 \\cdot 128}{\\sqrt{s}} - \\frac{2.6 \\ln s}{1024} \\quad \\text{year}^{-1}</span></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/3/b/3b1b509db61e4ede02779c912e6abaabd9f83019.png\" data-download-href=\"https://ethresear.ch/uploads/default/3b1b509db61e4ede02779c912e6abaabd9f83019\" title=\"ethereum_issuance_with_burn_plot_2\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/3/b/3b1b509db61e4ede02779c912e6abaabd9f83019_2_690x414.png\" alt=\"ethereum_issuance_with_burn_plot_2\" data-base62-sha1=\"8qSGWDxTfYQFd16CQ2BlcELHGGJ\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/3/b/3b1b509db61e4ede02779c912e6abaabd9f83019_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/3/b/3b1b509db61e4ede02779c912e6abaabd9f83019_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/3/b/3b1b509db61e4ede02779c912e6abaabd9f83019_2_1380x828.png 2x\" data-dominant-color=\"FBFBFC\"></a></div><p></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/2/b22b3240440e4855aff51d30c28097545bf16400.png\" data-download-href=\"https://ethresear.ch/uploads/default/b22b3240440e4855aff51d30c28097545bf16400\" title=\"ethereum_real_yield_with_burn_plot_2\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/2/b22b3240440e4855aff51d30c28097545bf16400_2_690x414.png\" alt=\"ethereum_real_yield_with_burn_plot_2\" data-base62-sha1=\"pq9xjEA8b99Bnsdf3Ds2rL1LM7m\" width=\"690\" height=\"414\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/2/b22b3240440e4855aff51d30c28097545bf16400_2_690x414.png, https://ethresear.ch/uploads/default/optimized/3X/b/2/b22b3240440e4855aff51d30c28097545bf16400_2_1035x621.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/2/b22b3240440e4855aff51d30c28097545bf16400_2_1380x828.png 2x\" data-dominant-color=\"F9F9F9\"></a></div><p></p>\n<p>This shows the target yield that is observed at a specific stake rate is a separate consideration to the curve shape discussion. So if you dislike this particular example because of the resulting yield at current stake rates. Fear not, that has an easy fix.</p>\n<h3><a name=\"p-49913-adding-uncorrelation-incentives-to-the-mix-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-adding-uncorrelation-incentives-to-the-mix-10\"></a>Adding Uncorrelation Incentives to the Mix</h3>\n<p>We will not cover the specifics of how uncorrelation incentives should be introduced nor how they should be sized, but we will illustrate how the introduction of a correlation penalty can help align the economic incentives with the network interest of maintaining an uncorrelated validator set.</p>\n<p>To do so we will simulate what would happen to the real yields observed by the following stakeholders:</p>\n<ul>\n<li>Home Validator (Very Uncorrelated): -0.0% subtracted to the nominal yield through correlation penalties</li>\n<li>LST Holder through a decentralized protocol (Quite Uncorrelated): -0.2% subtracted to the nominal yield through correlation penalties</li>\n<li>LST Holder through staking through large operators (Quite Correlated): -0.4% subtracted to the nominal yield through correlation penalties</li>\n<li>Large Institutional Operator (Very Correlated): -0.6% subtracted to the nominal yield through correlation penalties</li>\n</ul>\n<p>The following figure zooms in to the area where negative real yields are achieved:</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/5/c5272375fa151b1e666bb07feb5f5a9112fbc457.png\" data-download-href=\"https://ethresear.ch/uploads/default/c5272375fa151b1e666bb07feb5f5a9112fbc457\" title=\"ethereum_real_yield_with_burn_uncorrelation_plot\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/5/c5272375fa151b1e666bb07feb5f5a9112fbc457_2_690x377.png\" alt=\"ethereum_real_yield_with_burn_uncorrelation_plot\" data-base62-sha1=\"s85ULrCwW2Y5l6zaAq0MghHalrV\" width=\"690\" height=\"377\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/5/c5272375fa151b1e666bb07feb5f5a9112fbc457_2_690x377.png, https://ethresear.ch/uploads/default/optimized/3X/c/5/c5272375fa151b1e666bb07feb5f5a9112fbc457_2_1035x565.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/c/5/c5272375fa151b1e666bb07feb5f5a9112fbc457_2_1380x754.png 2x\" data-dominant-color=\"FAF9F9\"></a></div><p></p>\n<p>Important Note: The above values for correlation penalties are not based on any estimation or study. They have been chosen arbitrarily to showcase that the inclusion of uncorrelation incentives in the issuance curve can be used to disincentivize staking through large correlated operators. We refer the analysis of the right incentives to other papers.</p>\n<h2><a name=\"p-49913-fixing-the-issuance-yield-curve-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-fixing-the-issuance-yield-curve-11\"></a>Fixing the Issuance Yield Curve</h2>\n<p>Up until now the focus has been on the shape of the yield curve (respectively the issuance curve) but very little has been said about the specific yield we should target at different stake rates. As illustrated above, by simply applying a multiplicative factor we can keep the same curve shape but make yields be higher or lower as wished.</p>\n<p>In this section we will provide some heuristic properties to address this problem and be able to specify the prefactors that allow us to define a concrete yield curve.</p>\n<p>These heuristic properties are orientative. There is no hard science behind them, just some soft arguments that provide reasonable justification for these choices.</p>\n<p><strong>Heuristic 0</strong>: The nominal issuance yield should become negative at 50% stake rate or lower. Higher stake rates start to become problematic, above those levels the majority of circulating supply is staking. In case of supermajority bug the majority of ETH holders could be incentivized to break the consensus rules. The negative yield regime can be seen as a protection mechanism from the protocol to prevent this type of situations from happening, it sets an economic incentive to align the social layer with the protocol interests.</p>\n<p><strong>Heuristic 1</strong>: Target 3% yield at 25% stake rate. When PoS was released there was no idea what would be the expected staking yield the market would consider appetizing. Would 5% be enough? Or 3%?</p>\n<p>Now we have data points, current staking yield is 3% as measured by <a href=\"https://beaconcha.in\" rel=\"noopener nofollow ugc\">https://beaconcha.in</a> (issuance, MEV, and priority fees included). So we know the market certainly has appetite for ETH yield at 3%. There is also some soft-arguments by V. Buterin, J. Drake et al. that 25% stake rate should provide enough security.</p>\n<p>And finally, the current issuance curve happens to provide 3% yield at 25% stake rate. So by fixing the new curve to meet that same yield at 25% we anchor the same yield (and issuance) at the target rate. But any extra amount of stake will be met with a reduction in yield and issuance that makes it go to 0 before hitting 50%.</p>\n<p>As current stake rate is a tad over 25% the proposed change to the issuance curve would imply a bit of issuance reduction, nothing very significant. But most importantly it avoids the ever growing issuance increase as stake rates become higher.</p>\n<p>In conjunction with well designed uncorrelation incentives it could help the protocol ensure it does not overpay for security, stake rates are self-limiting, and the validator set very uncorrelated.</p>\n<h2><a name=\"p-49913-final-words-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49913-final-words-12\"></a>Final Words</h2>\n<p>The analytic form of the yield curve or the issuance curve matter much less than we may think. It might be tempting to spend time tinkering with its concrete analytic form but for all it matters it could be equally defined with a piece-wise continuous function.</p>\n<p>Its purpose is to provide an economic incentive to get stake rates where the protocol needs them to be (not too high, not too low) and maintaining a large uncorrelated validator set.</p>\n<p>This post is an invitation to steer the discussion towards said properties instead of getting lost with the fine details. If we nail down the properties we will constrain the solution space enough so that almost any function we choose will do the job.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/the-shape-of-issuance-curves-to-come/20405\">Read full topic</a></p>","link":"https://ethresear.ch/t/the-shape-of-issuance-curves-to-come/20405","pubDate":"Tue, 10 Sep 2024 21:11:48 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20405"},"source":{"@url":"https://ethresear.ch/t/the-shape-of-issuance-curves-to-come/20405.rss","#text":"The Shape of Issuance Curves to Come"},"filter":false},{"title":"Introducing CCTP Express: a faster and cheaper way to use CCTP","dc:creator":"0xwels","category":"Applications","description":"<p>By <a href=\"https://twitter.com/wels_eth\" rel=\"noopener nofollow ugc\">Wel</a> and <a href=\"https://twitter.com/alau1218\" rel=\"noopener nofollow ugc\">Alan</a> on behalf of CCTP Express<br>\n<em>For most recent information about CCTP Express, please visit <a href=\"https://twitter.com/cctpexpress\" rel=\"noopener nofollow ugc\">our X</a>.</em></p>\n<h1><a name=\"p-49895-motivation-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-motivation-1\"></a>Motivation</h1>\n<p>We recognize the vital role stablecoins play in the Web3 ecosystem, especially within DeFi. Among them, USDC stands out for its high transparency and regulatory compliance. Circle, the issuer of USDC, introduced the Cross-Chain Transfer Protocol (CCTP) to securely transfer USDC across chains using a native burn-and-mint mechanism.</p>\n<p>CCTP is a game-changing tool that drives USDC adoption in the multichain world, allowing developers to create applications that offer secure, 1:1 USDC transfers across blockchains. This eliminates the added risks of using bridges.</p>\n<p>However, CCTP has a key limitation: wait time. Its off-chain attestation service requires block confirmations on the source chain to ensure finality before minting USDC on the destination chain. This process can take anywhere from 20 seconds to 13 minutes, which is not ideal for users needing instant transfers. To address this, CCTP Express was designed to provide instant USDC bridging while leveraging CCTP. We position CCTP Express as a booster tool of CCTP, enabling users to benefit from faster and cheaper transactions.</p>\n<p>We believe CCTP Express is an essential tool to achieve chain abstraction by providing an instant USDC bridging experience.</p>\n<h1><a name=\"p-49895-tldr-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-tldr-2\"></a>TL;DR</h1>\n<ul>\n<li>CCTP Express is positioned as a booster tool to use CCTP, where users enjoys a faster and cheaper experience;</li>\n<li>It is an intent-base bridging system built upon CCTP, instant USDC bridging is enabled by the “Filler-Pay-First” mechanism;</li>\n<li>CCTP Express is a trustless design, allowing anyone to participate as a filler or datadaemon without permission;</li>\n<li>To mitigate the reorg risk exposed to the fillers, CCTP Express introduces an insurance fee that varies based on the user-defined initiateDeadline.;</li>\n<li>In order to lower the transaction costs, repayment and rebalancing transactions are bundled, cross-chain messages are transmitted as hashes to reduce data size.</li>\n</ul>\n<h1><a name=\"p-49895-primary-principles-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-primary-principles-3\"></a>Primary principles</h1>\n<p><strong>1. CCTP Dependency</strong><br>\nCCTP Express is specifically designed to enhance CCTP. All fund rebalancing must be done exclusively through CCTP to avoid exposure to potential risks associated with other bridges.</p>\n<p><strong>2. Decentralization</strong><br>\nThe system must be trustless to ensure maximum protection for everyone’s assets. Players in the system, including Fillers and Datamaemon, are permissionless.</p>\n<p><strong>3. Win-Win-Win</strong><br>\nThe design should benefit all stakeholders — users, fillers, and CCTP. Users gain a faster and more cost-effective experience, fillers receive satisfactory rewards while their funds are safeguarded, and CCTP grows stronger through the support of CCTP Express.</p>\n<h1><a name=\"p-49895-key-concepts-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-key-concepts-4\"></a>Key concepts</h1>\n<p>CCTP Express is an intent based cross-chain bridging system built upon CCTP. The key to speed up the transaction is the adoption of the “Filler-pay-first” mechanism.</p>\n<p>When a user submits a bridging intent, fillers initiate an order on the origin chain, then immediately call a fillOrder on the destination chain and transfer funds to the user accordingly.</p>\n<p>The system periodically validates the payments and repays to fillers in batches. Rebalancing across domains is done across CCTP if needed. This settlement process is out of the scene of the users, the repayments and rebalancing are bundled to save costs.</p>\n<h1><a name=\"p-49895-dive-deeper-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-dive-deeper-5\"></a>Dive Deeper</h1>\n<p>CCTP Express adopts a Hub-and-Spoke architecture, it can be broken down into a 3-layered system: a request for quote mechanism to obtain users’ bridging intent, enabling a filler network to claim and fill those orders, and lastly a settlement layer periodically repay fillers through CCTP and utilizing attestation service from Iris (Circle’s off-chain attestation service).</p>\n<p>Our design adheres to ERC-7683, emphasizing the importance of aligning with industry standards. This ensures that cross-chain intent systems can interoperate and share infrastructure like order dissemination services and filler networks. By fostering this interoperability, we enhance the end-user experience by increasing competition for fulfilling user intents. Below is a diagram of the architecture of CCTP Express:</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/0/3/037c645827e04b44e5ed2f79fedaddff4f92eab3.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/037c645827e04b44e5ed2f79fedaddff4f92eab3\" title=\"Architecture of CCTP Express\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/0/3/037c645827e04b44e5ed2f79fedaddff4f92eab3_2_690x451.jpeg\" alt=\"Architecture of CCTP Express\" data-base62-sha1=\"uPWl7t566CJPaVuOQdAqXPfgQ3\" width=\"690\" height=\"451\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/0/3/037c645827e04b44e5ed2f79fedaddff4f92eab3_2_690x451.jpeg, https://ethresear.ch/uploads/default/optimized/3X/0/3/037c645827e04b44e5ed2f79fedaddff4f92eab3_2_1035x676.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/0/3/037c645827e04b44e5ed2f79fedaddff4f92eab3_2_1380x902.jpeg 2x\" data-dominant-color=\"E6F4EC\"></a></div><p></p>\n<p><strong>Order initiation</strong></p>\n<ol>\n<li>User signs an off-chain message defining the parameters of an order:</li>\n</ol>\n<pre><code class=\"lang-auto\"> function deposit(\n        bytes32 recipient,\n        bytes32 inputToken,\n        bytes32 outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint32 destinationDomainId,        \n        bytes32 exclusiveFiller,\n        uint32 exclusivityDeadline,\n        uint32 initiateDeadline,\n        uint32 fillDeadline,\n        bytes calldata message\n    ) external;\n</code></pre>\n<ol start=\"2\">\n<li>The order is disseminated to Fillers. The Filler calls <code>initiate</code> on the origin chain SpokePool. A <code>CrossChainOrder</code> will be created and the user’s funds are transferred to the SpokePool for escrow.</li>\n<li>The SpokePool on origin chain submits a <code>Deposit</code> message to Circle’s off-chain attestation service, Iris, for attestation and subsequently a <code>DepositAttestation</code> will be generated.</li>\n</ol>\n<p><strong>Filler Network Fills Order</strong></p>\n<ol start=\"4\">\n<li>\n<p>Fillers call <code>fillOrder</code> on the destination SpokePool with their own assets which are then transferred to the user from the SpokePool.</p>\n</li>\n<li>\n<p>The SpokePool on destination chain submits a <code>Fill</code> message to Iris and a <code>FillAttestation</code> will be generated.</p>\n</li>\n</ol>\n<p><strong>Settlement</strong></p>\n<ol start=\"6\">\n<li>\n<p>A permissionless Datadaemon retrieves the <code>DepositAttestation</code> and <code>FillAttestation</code> and relays to the Hub Pool on the Settlement Chain.</p>\n</li>\n<li>\n<p>Periodically, the Datadaemon calls <code>repayFunds</code> and <code>rebalanceFunds</code> at the Hub Pool, which would collect all the attestations and perform the following steps:</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>Iterate through a list of attestations, a valid filled order is supported by both <code>Deposit</code> and <code>Fill</code> attestation.</p>\n</li>\n<li>\n<p>Determine the aggregate settlement sum from all valid fills for each filler.</p>\n</li>\n<li>\n<p>If there is sufficient funds on SpokePool to repay filler, a <code>repayFunds</code> message in the form of merkle root hash is sent to Iris.</p>\n</li>\n<li>\n<p>For the remaining outstanding payment, the Hub Pool will send a <code>rebalanceFunds</code> message in the form of merkle root hash to Iris, which indicates how much a SpokePool with surplus funds would send to another pool in deficit to fulfill the need for repayment.</p>\n</li>\n</ul>\n<ol start=\"8\">\n<li>\n<p>Once the <code>repayFunds</code> and <code>rebalanceFunds</code> messages get attested by Iris, they are sent to respective SpokePools. Datamaemon will call <code>repayFunds</code> and <code>rebalanceFunds</code> on SpokePools with merkle root hash and their respective transaction details. Accordingly, funds would be repaid to fillers and sent to other SpokePools to ensure sufficient funds for handling repayments.</p>\n</li>\n<li>\n<p>Repay funds to fillers from the SpokePool on destination chain, and rebalance funds across SpokePools on different chains via CCTP.</p>\n</li>\n</ol>\n<p><strong>Cctp Fill Settlement</strong></p>\n<ol start=\"10\">\n<li>\n<p>In case of an order initiated by Fillers not being filled, anyone can call <code>cctpFill</code> and mark the order status on destination chain SpokePool to <code>RequestCctpFill</code> and block any filler from filling it. At the same time, the SpokePool will emit a <code>CctpFill</code> message to Iris for attestation.</p>\n</li>\n<li>\n<p>The <code>CctpFillAttestation</code> will be used to replace the <code>FillAttestation</code> mentioned in 5. and allow the user fund to be transferred via the CCTP route.</p>\n</li>\n</ol>\n<h1><a name=\"p-49895-risk-and-solutions-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-risk-and-solutions-6\"></a>Risk and solutions</h1>\n<p><strong>Reorg risk</strong><br>\nThe reorg risk is uniquely borne by fillers. If the filler fills the intent too fast without waiting for the finality on the source chain, the source chain may reorg and cause a loss to the filler since the intent has been filled on the destination chain and the filler would end up in empty hand.</p>\n<p>The reorg risk is effectively mitigated by the <strong>Insurance Fee</strong>, which varies based on the <code>initiateDeadline</code> specified by the user. If the <code>initiateDeadline</code> is sufficiently long, the filler can reinitiate the <code>CrossChainOrder</code> on the origin chain in the event of a reorg, ensuring the user’s funds are transferred again. The insurance fee is calculated using below formula:</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/8/f/8f2626d45b13f0ec864c696fa581f0af9f7491b6.png\" alt=\"Formula of Insurance Fee\" data-base62-sha1=\"kqm16Gbo8AMcgEmDkpqHrZAM1hQ\" width=\"244\" height=\"96\"></p>\n<p>Where:<br>\n<em>f(t)</em> is the insurance fee which is a function varies with <em>t</em><br>\n<em>V</em> is the trading volume, representing the maximum insurance fee<br>\n<em>e</em> is the base of the natural logarithm<br>\n<em>k</em> is a constant that control the descending rate of the fee<br>\n<em>t</em> is the time between order creation time and the initiateDeadline<br>\n<em>T</em> is the time required for finality on the origin chain</p>\n<p>The insurance fee varies with the <code>initiateDeadline</code>- it decreases with the increment of time between the order creation time and the <code>initiateDeadline</code>:</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/1/6/1626648dc74ed8b71e5d3e7f66c0b1d9731baba1.png\" data-download-href=\"https://ethresear.ch/uploads/default/1626648dc74ed8b71e5d3e7f66c0b1d9731baba1\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/1/6/1626648dc74ed8b71e5d3e7f66c0b1d9731baba1_2_321x250.png\" alt=\"\" data-base62-sha1=\"39WL9r77jU6FzR8aXfcwxvDkyRj\" width=\"321\" height=\"250\" role=\"presentation\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/1/6/1626648dc74ed8b71e5d3e7f66c0b1d9731baba1_2_321x250.png, https://ethresear.ch/uploads/default/optimized/3X/1/6/1626648dc74ed8b71e5d3e7f66c0b1d9731baba1_2_481x375.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/1/6/1626648dc74ed8b71e5d3e7f66c0b1d9731baba1_2_642x500.png 2x\" data-dominant-color=\"FDFAFA\"></a></div><p></p>\n<p>Since the insurance fee decreases significantly when the <code>initiateDeadline</code> is long (it drops to nearly zero if it is 2x of the time needed for finality on the origin chain), a normal user is likely to set a long initiateDeadline to avoid paying the fee, minimizing the reorg risk for the filler.</p>\n<p><strong>High system costs</strong><br>\nThe complexity of the design apparently implies higher costs compared to bridging directly using CCTP. To align with our goal of providing a faster and cheaper way to use CCTP, we mitigate costs through two key strategies: <em><strong>transaction bundling</strong></em> and <em><strong>data compression</strong></em>.</p>\n<p>Transactions bundling-</p>\n<p>Datadaemon works periodically to call repayment and rebalancing on the hub pool. This interval is adjustable to make sure a sufficient number of transactions are processed in each batch.</p>\n<p>In this architecture design, gas costs are primarily incurred in rebalancing via CCTP and fund transfers. By processing rebalancing in batches and handling repayments in aggregate sums to the fillers, these costs are distributed across multiple transactions, reducing the costs on any single transaction.</p>\n<p>Data Compression-</p>\n<p>Cross-chain messages are transmitted between spoke pools and the hub pool via Iris, Circle’s off-chain attestation service. To minimize data size and reduce gas costs, these messages are sent in the form of a hash.</p>\n<p>For a detailed comparison of gas consumption between CCTP and CCTP Express, check out <a href=\"https://medium.com/@cctpexpress/cctp-express-is-cheaper-than-cctp-2c527e0afa62\" rel=\"noopener nofollow ugc\">this article</a>.</p>\n<h1><a name=\"p-49895-faq-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-faq-7\"></a>FAQ</h1>\n<p><strong>1. What does it mean to the end user?</strong><br>\nWhen using CCTP Express’s front end or applications integrated with CCTP Express, users benefit from a significantly faster and cheaper way to bridge USDC across chains. By leveraging CCTP as the underlying asset bridge, the system enhances user experience while maintaining robust security.</p>\n<p><strong>2. What are the possible use cases?</strong><br>\nWe believe CCTP Express is essential to achieve chain abstraction by providing an instant USDC bridging experience. Possible use cases included-</p>\n<p><em>USDC-denominated dApps</em><br>\nUSDC is widely adopted in various dApps, e.g. dYdX and Polymarket. dApps can integrate CCTP Express SDK to offer their users instant transfer in and out from all CCTP supported chains without the usual waiting time.</p>\n<p><em>Payment Network</em><br>\nCCTP Express can offer instant settled transaction experience for users across chains, enabling them to pay their USDC for a coffee from any CCTP supported chain.</p>\n<p><em>Money Lego</em><br>\nArbitragers and Solvers can utilize CCTP Express to be the backbone of their cross chain actions. It’s highly undesirable for arbitragers or solvers to wait for long in the high speed crypto world, CCTP Express can offer them superior speed without worrying about security as CCTP Express is using CCTP as the underlying bridge.</p>\n<p><strong>3. With a similar idea of providing cross chain bridging powered by off chain agents, how is CCTP Express different from other intent-based bridges, say Across?</strong></p>\n<p>The primary distinction between CCTP Express and Across are: positioning and settlement mechanism.</p>\n<p><em>Positioning -</em></p>\n<p>While both protocols are intent-based bridges powered by fillers/relayers, CCTP Express is positioned to be a booster tool to use CCTP.</p>\n<p>Given this focus, CCTP Express is closely integrated with CCTP and evolves in tandem with it. For instance, if CCTP supports EURC, CCTP Express will promptly support it as well.</p>\n<p>And this alignment also applies to the choice of picking which chain CCTP Express supports. CCTP Express aims to cover all EVM and non-EVM chains CCTP operates. And like<a href=\"https://developers.circle.com/stablecoins/docs/message-format#message-header\" rel=\"noopener nofollow ugc\"> CCTP</a>, CCTP Express adopts the bytes32 address format, instead of the 20 byte address used in EVM, to handle 32 byte addresses in many non-EVM chains.</p>\n<p>In contrast, Across is limited to EVM chains only, as it has a<a href=\"https://docs.across.to/resources/new-chain-requests\" rel=\"noopener nofollow ugc\"> hard requirement</a> to support EVM- chains only.</p>\n<p><em>Settlement mechanism -</em></p>\n<p>In CCTP Express, the Hub Pool smart contract utilizes the Iris attestation service used in CCTP to relay and verify messages. Deposit and Filled messages from various Spoke Pools are sent to Iris for attestation and then collected in the Hub Pool, which processes repayments on-chain.</p>\n<p>In contrast, Across uses canonical bridges to relay messages and utilizes<a href=\"https://docs.across.to/use-cases/settle-cross-chain-intents\" rel=\"noopener nofollow ugc\"> UMA</a> to optimistically verify fill events off-chain. Since UMA works off-chain, an interval is needed as a dispute window.</p>\n<h1><a name=\"p-49895-discuss-with-us-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49895-discuss-with-us-8\"></a>Discuss with Us</h1>\n<p>To shape a better product, we are keen to discuss with users, fillers and dApp teams who need instant USDC bridging. If anyone is interested in CCTP Express, we have a public telegram group here to discuss about it: <a href=\"https://t.me/cctpexpress\" rel=\"noopener nofollow ugc\">Join Group Chat</a></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/introducing-cctp-express-a-faster-and-cheaper-way-to-use-cctp/20396\">Read full topic</a></p>","link":"https://ethresear.ch/t/introducing-cctp-express-a-faster-and-cheaper-way-to-use-cctp/20396","pubDate":"Tue, 10 Sep 2024 00:14:12 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20396"},"source":{"@url":"https://ethresear.ch/t/introducing-cctp-express-a-faster-and-cheaper-way-to-use-cctp/20396.rss","#text":"Introducing CCTP Express: a faster and cheaper way to use CCTP"},"filter":false},{"title":"Fake GLV: You don't need an efficient endomorphism to implement GLV-like scalar multiplication in SNARK circuits","dc:creator":"yelhousni","category":"zk-s[nt]arks","description":"<pre><code class=\"lang-auto\"> _____     _           ____ _ __     __\n|  ___|_ _| | _____   / ___| |\\ \\   / /\n| |_ / _` | |/ / _ \\ | |  _| | \\ \\ / /  \n|  _| (_| |   &lt;  __/ | |_| | |__\\ V /   \n|_|  \\__,_|_|\\_\\___|  \\____|_____\\_/   \n</code></pre>\n<h1><a name=\"p-49892-you-dont-need-an-efficient-endomorphism-to-implement-glv-like-scalar-multiplication-in-snark-circuits-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-you-dont-need-an-efficient-endomorphism-to-implement-glv-like-scalar-multiplication-in-snark-circuits-1\"></a>You don’t need an efficient endomorphism to implement GLV-like scalar multiplication in SNARK circuits</h1>\n<ul>\n<li><a href=\"https://ethresear.ch#Introduction\">Introduction</a>\n<ul>\n<li><a href=\"https://ethresear.ch#Other-applications\">Other applications</a></li>\n</ul>\n</li>\n<li><a href=\"https://ethresear.ch#Background\">Background</a></li>\n<li><a href=\"https://ethresear.ch#The-fake-GLV-trick6\">The fake GLV trick</a>\n<ul>\n<li><a href=\"https://ethresear.ch#Implementation7\">Implementation</a>\n<ul>\n<li><a href=\"https://ethresear.ch#Benchmark\">Benchmark</a></li>\n<li><a href=\"https://ethresear.ch#Comparison\">Comparison</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-49892-introduction-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-introduction-2\"></a>Introduction</h2>\n<p>P-256, also known as secp256r1 and prime256v1, is a 256-bit prime field Weierstrass curve standardized by the NIST. It is widely adopted in internet systems, which explains its myriad use cases in platforms such as TLS, DNSSEC, Apple’s Secure Enclave, Passkeys, Android Keystore, and Yubikey. The key operation in elliptic curves based cryptography is the scalar multiplication. When the curve is equipped with an efficient endomorphism it is possible to speed up this operation through the well-known <a href=\"https://www.iacr.org/archive/crypto2001/21390189.pdf\" rel=\"noopener nofollow ugc\">GLV</a> algorithm. P-256 does unfortunately not have an efficient endomorphism (see <a href=\"https://neuromancer.sk/std/nist/P-256#\" rel=\"noopener nofollow ugc\">parameters</a>) to enjoy this speedup.</p>\n<p>Verifying ECDSA signatures on Ethereum through precompiled contracts, i.e. smart contracts built into the Ethereum protocol (there are only 9) is only possible with the <em>secp256k1</em> curve and not the P-256.<br>\nVerifying ECDSA signatures on P-256 requires computing scalar multiplications in Solidity and is especially useful for smart-contract wallets, enabling hardware-based signing keys and safer, easier self-custody. Different solutions can bring P-256 signatures on-chain. There are primarily three interesting approaches: (zk)-SNARK based verifiers, smart contract verifiers (e.g. <a href=\"https://eprint.iacr.org/2023/939.pdf\" rel=\"noopener nofollow ugc\">[Dubois23]</a>, <a>Ledger/FCL</a> (deprecated), <a href=\"https://github.com/get-smooth/crypto-lib\" rel=\"noopener nofollow ugc\">smoo.th/SCL</a> and <a href=\"https://daimo.com/blog/p256verifier\" rel=\"noopener nofollow ugc\">daimo/p256verifier</a>), and native protocol precompiles (<a href=\"https://github.com/ethereum/RIPs/blob/196f28d2164f30333b503481e7da954d4bf32ea3/RIPS/rip-7212.md\" rel=\"noopener nofollow ugc\">EIP/RIP 7212</a>).</p>\n<p>Using SNARK (succinctness) properties, provides a great way to reduce gas cost for computation on Ethereum (e.g. ~232k gas for <a href=\"https://eprint.iacr.org/2016/260.pdf\" rel=\"noopener nofollow ugc\">Groth16</a>, ~285k gas for <a href=\"https://eprint.iacr.org/2019/953.pdf\" rel=\"noopener nofollow ugc\">PLONK</a> and ~185k gas for <a href=\"https://eprint.iacr.org/2021/1167\" rel=\"noopener nofollow ugc\">FFLONK</a>). This is very competitive with (and sometimes better that) the currently gas-optimal smart contract verifier. Moreover one can batch many ECDSA verifications in a single proof, amortizing thus the gas cost. However verifying P-256 signatures in a SNARK circuit can be very expensive i.e. long proving time. This is because the field where the points on the P-256 curve lie is different than the field where the SNARK computation is usually expressed. To be able to verify the proof onchain through the procompile the SNARK field needs to be the <a href=\"https://hackmd.io/@jpw/bn254\" rel=\"noopener nofollow ugc\">BN254</a> scalar field. Different teams tried to implement the ECDSA verification on P-256 in a BN254 SNARK circuit efficiently. Among these: <a href=\"https://github.com/zkwebauthn/webauthn-halo2\" rel=\"noopener nofollow ugc\">zkwebauthn/webauthn-halo2</a>, <a href=\"https://github.com/zkwebauthn/webauthn-circom\" rel=\"noopener nofollow ugc\">https://github.com/zkwebauthn/webauthn-circom</a> and <a href=\"https://github.com/privacy-scaling-explorations/circom-ecdsa-p256\" rel=\"noopener nofollow ugc\">PSE/circom-ecdsa-p256</a>.</p>\n<p><em>If P-256 had an efficient endomorphism we could have optimized the proving time a great deal!</em></p>\n<p>In this note we show a way to implement a GLV-like scalar multiplications in-circuit without having an efficient endomorphism.</p>\n<h3><a name=\"p-49892-other-applications-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-other-applications-3\"></a>Other applications</h3>\n<ul>\n<li>This technique can be applied to any elliptic curve without an efficient endomorphism (e.g. <a href=\"https://en.wikipedia.org/wiki/Curve25519\" rel=\"noopener nofollow ugc\">Curve25519</a>, <a href=\"https://en.wikipedia.org/wiki/P-384\" rel=\"noopener nofollow ugc\">P-384</a>, MNT-753 (<a href=\"https://coinlist.co/build/coda/pages/MNT4753\" rel=\"noopener nofollow ugc\">k=4</a>, <a href=\"https://coinlist.co/build/coda/pages/MNT6753\" rel=\"noopener nofollow ugc\">k=6</a>), <a href=\"https://docs.starknet.io/architecture-and-concepts/cryptography/stark-curve/\" rel=\"noopener nofollow ugc\">STARK curve</a>, <a href=\"https://eprint.iacr.org/2024/869\" rel=\"noopener nofollow ugc\"><span class=\"math\">\\mathcal{B}</span> of “cycle5”</a>, …). See this <a href=\"https://neuromancer.sk/std/\" rel=\"noopener nofollow ugc\">database</a> for other curves.</li>\n<li>This would question the choice of <a href=\"https://eprint.iacr.org/2021/1152\" rel=\"noopener nofollow ugc\">Bandersnatch</a> (<em>an embedded endomorphism-equipped curve over BLS12-381</em>) over <a href=\"https://github.com/zkcrypto/jubjub\" rel=\"noopener nofollow ugc\">Jubjub</a> (<em>an embedded curve over BLS12-381 without endomorphism</em>) for <a href=\"https://verkle.info/\" rel=\"noopener nofollow ugc\">Ethereum Verkle trees</a>.</li>\n<li>This can speedup ECDSA verification in <a href=\"https://docs.cairo-lang.org/hello_starknet/signature_verification.html\" rel=\"noopener nofollow ugc\">Starknet</a> and <a href=\"https://www.cairo-lang.org/\" rel=\"noopener nofollow ugc\">Cairo</a> (through the <a href=\"https://docs.starknet.io/architecture-and-concepts/cryptography/stark-curve/\" rel=\"noopener nofollow ugc\">STARK curve</a>).</li>\n<li>This can speedup natively the folding step (à la Nova) of Ed25519 signatures through the 2-cycles proposed <a href=\"https://moderncrypto.org/mail-archive/curves/2024/001050.html\" rel=\"noopener nofollow ugc\">here</a> by Aurore Guillevic.</li>\n</ul>\n<h2><a name=\"p-49892-background-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-background-4\"></a>Background</h2>\n<h3><a name=\"p-49892-standard-scalar-multiplication-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-standard-scalar-multiplication-5\"></a>Standard scalar multiplication</h3>\n<p>Let <span class=\"math\">E</span> be an elliptic curve defined over the prime field <span class=\"math\">\\mathbb{F}_p</span> and let <span class=\"math\">r</span> be a prime divisor of the curve order <span class=\"math\">\\#E(\\mathbb{F}_p)</span> (i.e. the number of points).<br>\nLet <span class=\"math\">s \\in \\mathbb{F}_r</span> and <span class=\"math\">P(x,y) \\in E(\\mathbb{F}_p)</span>, we are interested in proving scalar multiplication <span class=\"math\">s\\cdot P</span> over the <span class=\"math\">r</span>-torsion subgroup of <span class=\"math\">E</span>, denoted <span class=\"math\">E[r]</span> (i.e. the subset of points of order <span class=\"math\">r</span>).</p>\n<p>The simplest algorithm is the standard left-to-right <em>double-and-add</em>:</p>\n<pre><code class=\"lang-auto\">INPUT: s = (s_{t−1},..., s_1, s_0), P ∈ E(Fp).\nOUTPUT: sP.\n1. Q ← ∞.\n2. For i from t−1 downto 0 do\n    2.1 Q ← 2Q.\n    2.2 If s_i = 1 then Q ← Q + P.\n3. Return(Q).\n</code></pre>\n<p>If/else branching is not possible in SNARK circuits so this is replaced by constant window table lookups inside the circuit. This can be achieved using polynomials which vanish at the constants that aren’t being selected, i.e. a 1-bit table lookup <code>Q ← s_i * Q + (1 - s_i) * (Q+P)</code>. Hence this double-and-add algorithm requires <span class=\"math\">t</span> doublings, <span class=\"math\">t</span> additions and <span class=\"math\">t</span> 1-bit table lookup.<br>\nThis can be extended to <em>windowed</em> double-and-add, i.e. scanning more than a bit per iteration using larger window tables, but the multiplicative depth of the evaluation increases exponentially. We use affine coordinates for doubling/adding points because inverses cost as much as multiplications, i.e. instead of checking that <span class=\"math\">1/x</span> is <span class=\"math\">y</span> we provide <span class=\"math\">y</span> out-circuit and check in-circuit that <span class=\"math\">x\\cdot y = 1</span>. However since we start with <span class=\"math\">Q ← ∞</span> it is infeasible to avoid conditional branching since affine formulas are incomplete. Instead, we scan the bits right-to-left and assume that the first bit <code>s_0</code> is 1 (so that we start at <code>Q ← P</code>), we double the input point <code>P</code> instead of the accumulator <code>Q</code> in this algorithm and finally conditionally subtract (using the 1-bit lookup) <code>P</code> if <code>s_0</code> was 0.</p>\n<pre><code class=\"lang-auto\">INPUT: s = (s_{t−1},..., s_1, s_0), P ∈ E(Fp).\nOUTPUT: sP.\n1. Q ← P.\n2. For i from 1 to t−1 do\n    2.1 If s_i = 1 then Q ← Q + P.\n    2.2 P ← 2P.\n3. if s_0 = 0 then Q ← Q - P\n4. Return(Q).\n</code></pre>\n<h3><a name=\"p-49892-glv-scalar-multiplication-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-glv-scalar-multiplication-6\"></a>GLV scalar multiplication</h3>\n<p>However it is well known that if the curve is equipped with an efficient endomorphism then there exists a faster algorithm known as <a href=\"https://www.iacr.org/archive/crypto2001/21390189.pdf\" rel=\"noopener nofollow ugc\">[GLV]</a>.</p>\n<p><strong>Example 1 :</strong> suppose that <span class=\"math\">E</span> has Complex Multiplication (CM) with discrimant <span class=\"math\">-D=-3</span>, i.e. <span class=\"math\">E</span> is of the form <span class=\"math\">y^2=x^3+b</span>, with <span class=\"math\">b \\in \\mathbb{F}_p</span>. This is the case of <code>BN254</code>, <code>BLS12-381</code> and <code>secp256k1</code> elliptic curves used in Ethereum. There is an efficient endomorphism <span class=\"math\">\\phi: E \\rightarrow E</span> defined by <span class=\"math\">(x,y)\\mapsto (\\omega x,y)</span> (and <span class=\"math\">\\mathcal{O} \\mapsto \\mathcal{O}</span>) that acts on <span class=\"math\">P \\in E[r]</span> as <span class=\"math\">\\phi(P)=\\lambda \\cdot P</span>. Both <span class=\"math\">\\omega</span> and <span class=\"math\">\\lambda</span> are cube roots of unity in <span class=\"math\">\\mathbb{F}_p</span> and <span class=\"math\">\\mathbb{F}_r</span> respectively, i.e. <span class=\"math\">\\omega^2+\\omega+1 \\equiv 0 \\pmod p</span> and <span class=\"math\">\\lambda^2+\\lambda+1 \\equiv 0 \\pmod r</span>.</p>\n<p><strong>Example 2 :</strong> suppose that <span class=\"math\">E</span> has Complex Multiplication (CM) with discrimant <span class=\"math\">-D=-8</span>, meaning that the endomorphism ring is <span class=\"math\">\\mathbf{Z}[\\sqrt{−2}]</span>. This is the case of the <code>Bandersnatch</code> elliptic curves specified in Ethereum Verkle trie. There is an efficient endomorphism <span class=\"math\">\\phi: E \\rightarrow E</span> whose kernel is generated by a 2-torsion point. The map can be found by looking at 2-isogeneous curves and applying Vélu’s formulas. For Bandersnatch it is defined by <span class=\"math\">(x,y)\\mapsto (u^2\\cdot \\frac{x^2+wx+t}{x+w},u^3\\cdot y\\cdot \\frac{x^2+2wx+v}{(x+w)^2})</span> for some constants <span class=\"math\">u,v,w,t</span> (and <span class=\"math\">\\mathcal{O} \\mapsto \\mathcal{O}</span>) that acts on <span class=\"math\">P \\in E[r]</span> as <span class=\"math\">\\phi(P)=\\lambda \\cdot P</span> where <span class=\"math\">\\lambda^2+2 \\equiv 0 \\pmod r</span>.</p>\n<p>The GLV algorithm starts by decomposing <span class=\"math\">s</span> as <span class=\"math\">s = s_0 + \\lambda s_1</span> and then replacing the scalar multiplication <span class=\"math\">s \\cdot P</span> by <span class=\"math\">s_0 \\cdot P + s_1 \\cdot \\phi(P)</span>. Because <span class=\"math\">s_0</span> and <span class=\"math\">s_1</span> are guaranteed to be <span class=\"math\">\\leq \\sqrt{r}</span> (see Sec.4 of <a href=\"https://www.iacr.org/archive/crypto2001/21390189.pdf\" rel=\"noopener nofollow ugc\">[GLV]</a> and Sec.4 of <a href=\"https://eprint.iacr.org/2015/565.pdf\" rel=\"noopener nofollow ugc\">[FourQ]</a> for an optimization trick), we can halve the size of the for loop in the double-and-add algorithm. We can then scan simultaenously the bits of <span class=\"math\">s_0</span> and <span class=\"math\">s_1</span> and apply the <a href=\"https://crypto.stackexchange.com/questions/99975/strauss-shamir-trick-on-ec-multiplication-by-scalar\" rel=\"noopener nofollow ugc\">Strauss-Shamir trick</a>. This results in a significant speed up but only when an endomorphism is available. For example the left-to-right double-and-add would become:</p>\n<pre><code class=\"lang-auto\">INPUT: s and P ∈ E(Fp).\nOUTPUT: sP.\n1. Find s1 and s2 s.t. s = s1 + 𝜆 * s2 mod r \n    1.1 let s1 = (s1_{t−1},..., s1_1, s1_0) \n    1.2 and s2 = = (s2_{t−1},..., s2_1, s2_0)\n2. P1 ← P, P2 ← 𝜙(P) and Q ← ∞.\n3. For i from t−1 downto 0 do\n    3.1 Q ← 2Q.\n    3.2 If s1_i = 0 and s2_i = 0 then Q ← Q.\n    3.3 If s1_i = 1 and s2_i = 0 then Q ← Q + P1.\n    3.4 If s1_i = 0 and s2_i = 1 then Q ← Q + P2.\n    3.5 If s1_i = 1 and s2_i = 1 then Q ← Q + P1 + P2.\n4. Return(Q).\n</code></pre>\n<p>Using the efficient endomorphism in-circuit is also possible (see <a href=\"https://eprint.iacr.org/2019/1021.pdf\" rel=\"noopener nofollow ugc\">[Halo, Sec. 6.2 and Appendix C]</a> or <a href=\"https://github.com/Consensys/gnark/blob/ea53f373f45d2f9ad9cc1639c34359a35f771191/std/algebra/emulated/sw_emulated/point.go#L530\" rel=\"noopener nofollow ugc\">[gnark implementation]</a> for short Weierstrass curves and <a href=\"https://github.com/zhenfeizhang/bandersnatch-glv\" rel=\"noopener nofollow ugc\">[arkworks]</a> and <a href=\"https://github.com/Consensys/gnark/blob/dc04a1d3b221dbe7571b5a8394b55d02c2872700/std/algebra/native/twistededwards/scalarmul_glv.go\" rel=\"noopener nofollow ugc\">[gnark]</a> implementations for twisted Edwards). But one should be careful about some extra checks of the decomposition <span class=\"math\">s = s_0 + \\lambda s_1 \\mod r</span> (not the SNARK modulus). The integers <span class=\"math\">s_0, s_1</span> can possibly be negative in which case they will be reduced in-circuit modulo the SNARK field and not <span class=\"math\">r</span>.</p>\n<h2><a name=\"p-49892-the-fake-glv-trick-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-the-fake-glv-trick-7\"></a>The fake GLV trick</h2>\n<p>Remember that we are proving that <span class=\"math\">s\\cdot P = Q</span> and not computing it. We can “hint” the result <span class=\"math\">Q</span> and check in-circuit that <span class=\"math\">s\\cdot P - Q = \\mathcal{O}</span>. Now, if we can find <span class=\"math\">u,v \\leq \\sqrt{r}</span> such that <span class=\"math\">v\\cdot s = u \\pmod r</span> then we can check instead that</p>\n<p><span class=\"math\">(v\\cdot s)\\cdot P - v\\cdot Q = \\mathcal{O}</span></p>\n<p>which is equivalent to</p>\n<p><span class=\"math\"> u\\cdot P - v\\cdot Q = \\mathcal{O}</span></p>\n<p>The thing now is that <span class=\"math\">u</span> and <span class=\"math\">v</span> are “small” and we can, similarly to the GLV algorithm, halve the size of the double-and-add loop and apply the Strauss-Shamir trick.</p>\n<p><strong>Solution</strong>: running the half-GCD algorithm (i.e. running GCD half-way) is sufficient to find <span class=\"math\">u</span> and <span class=\"math\">v</span>. We can apply the exact same trick for finding the lattice basis as in the GLV paper (Sec. 4). For completeness we recall the algorithm hereafter.<br>\nWe apply the extended Euclidean algorithm to find the greatest common divisor of <span class=\"math\">r</span> and <span class=\"math\">s</span> (This gcd is 1 since <span class=\"math\">r</span> is prime.) The algorithm produces a sequence of equations</p>\n<p><span class=\"math\">w_i \\cdot r + v_i \\cdot s = u_i</span></p>\n<p>for <span class=\"math\">i = 0, 1, 2, \\dots</span>  where <span class=\"math\">w_0 = 1, v_0 = 0, u_0 = r, w_1 = 0, v_1 = 1, u_1 = s</span>, and <span class=\"math\">u_i \\geq 0</span> for all <span class=\"math\">i</span>. We stop at the index <span class=\"math\">m</span> for which <span class=\"math\">u_m \\geq \\sqrt{r}</span> and take <span class=\"math\">u = u_{m+1}</span> and <span class=\"math\">v = -v_{m+1}</span>.<br>\n<em>Note:</em> By construction <span class=\"math\">u</span> is guaranteed to be a positive integer but <span class=\"math\">v</span> can be negative, in which case it would be reduced in-circuit modulo the SNARK modulus and not <span class=\"math\">r</span>. To circumvent this we return in the hint <span class=\"math\">u</span>, <span class=\"math\">v</span> and a <span class=\"math\">\\texttt{b}=1</span> if <span class=\"math\">v</span> is negative and <span class=\"math\">\\texttt{b}=0</span> otherwise. In-circuit we negate <span class=\"math\">Q</span> instead when <span class=\"math\">\\texttt{b}=1</span>.</p>\n<h3><a name=\"p-49892-implementation-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-implementation-8\"></a>Implementation</h3>\n<p>A generic implementation in the gnark library is available at <a href=\"https://github.com/Consensys/gnark/feat/fake-GLV\" rel=\"noopener nofollow ugc\">gnark.io (feat/fake-GLV branch)</a>. For Short Weierstrass (e.g. P256) look at the <code>scalarMulFakeGLV</code> <a href=\"https://github.com/Consensys/gnark/blob/62c89cb10cff1413e9d68cce054c7e711d04c726/std/algebra/emulated/sw_emulated/point.go#L1263\" rel=\"noopener nofollow ugc\">method</a> in the emulated package and for twisted Edwards (e.g. Bandersnatch/Jubjub) look at the <code>scalarMulFakeGLV</code> <a href=\"https://github.com/Consensys/gnark/blob/62c89cb10cff1413e9d68cce054c7e711d04c726/std/algebra/native/twistededwards/point.go#L261\" rel=\"noopener nofollow ugc\">method</a> in the native package.</p>\n<h4><a name=\"p-49892-benchmark-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-benchmark-9\"></a>Benchmark</h4>\n<p>The best algorithm to implement scalar multiplication in a non-native circuit (i.e. circuit field ≠ curve field) when an efficient endomorphism is <em>not</em> available is an adaptation of <a href=\"https://www.iacr.org/archive/ches2007/47270135/47270135.pdf\" rel=\"noopener nofollow ugc\">[Joye07]</a> (implemented in <a href=\"https://github.com/Consensys/gnark/blob/fdb2b0de422b1c4fc5c6d08e81e788095ac818a6/std/algebra/emulated/sw_emulated/point.go#L748\" rel=\"noopener nofollow ugc\">gnark here</a>).<br>\nNext we compare this scalar multiplication with our fake GLV in a PLONKish vanilla (i.e. no custom gates) circuit (scs) over the BN254 curve (Ethereum compatible). We also give benchmarks in R1CS.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">P-256</th>\n<th style=\"text-align:center\">Old (Joye07)</th>\n<th style=\"text-align:right\">New (fake GLV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"math\">[s]P</span></td>\n<td style=\"text-align:center\">738,031 scs <br> 186,466 r1cs</td>\n<td style=\"text-align:right\">385,412 scs <br> 100,914 r1cs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ECDSA verification</td>\n<td style=\"text-align:center\">1,135,876 scs <br> 293,814 r1cs</td>\n<td style=\"text-align:right\">742,541 scs <br> 195,266 r1cs</td>\n</tr>\n</tbody>\n</table>\n</div><blockquote>\n<p>Note here that the old ECDSA verification uses Strauss-Shamir trick for computing <span class=\"math\">[s]P+[t]Q</span> while the new version is merely two fake GLV multiplications and an addition.</p>\n</blockquote>\n<h4><a name=\"p-49892-comparison-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-comparison-10\"></a>Comparison</h4>\n<p><a href=\"https://www.p256wallet.org/\" rel=\"noopener nofollow ugc\">p256wallet.org</a> is an ERC-4337 smart contract wallet that leverages zk-SNARKs for WebAuthn and P-256 signature verification. It uses <a href=\"https://github.com/privacy-scaling-explorations/circom-ecdsa-p256\" rel=\"noopener nofollow ugc\">PSE/circom-ecdsa-p256</a> to generate the webAuthn proof, and underneath <a href=\"https://github.com/privacy-scaling-explorations/circom-ecdsa-p256\" rel=\"noopener nofollow ugc\">PSE/circom-ecdsa-p256</a> to generate the ECDSA proof on P-256 curve. The github README reports <code>1,972,905 R1CS</code>. Compiling our circuit in R1CS results in <strong><code>195,266 R1CS</code></strong>. This is more than a <strong>10x</strong> reduction, which is not only due to the fake GLV algorithm but also to optimized non-native field arithmetic in gnark.</p>\n<h4><a name=\"p-49892-other-curves-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-other-curves-11\"></a>Other curves</h4>\n<p>Similar results are noticed for other curves in short Weirstrass, e.g. P-384 and STARK curve:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">P-384</th>\n<th style=\"text-align:center\">Old (Joye07)</th>\n<th style=\"text-align:right\">New (fake GLV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"math\">[s]P</span></td>\n<td style=\"text-align:center\">1,438,071 scs</td>\n<td style=\"text-align:right\">782,674 scs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ECDSA verification</td>\n<td style=\"text-align:center\">2,174,027 scs</td>\n<td style=\"text-align:right\">1,419,929 scs</td>\n</tr>\n</tbody>\n</table>\n</div><div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">STARK curve</th>\n<th style=\"text-align:center\">Old (Joye07)</th>\n<th style=\"text-align:right\">New (fake GLV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"math\">[s]P</span></td>\n<td style=\"text-align:center\">727,033 scs</td>\n<td style=\"text-align:right\">380,210 scs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ECDSA verification</td>\n<td style=\"text-align:center\">1,137,459 scs</td>\n<td style=\"text-align:right\">732,131 scs</td>\n</tr>\n</tbody>\n</table>\n</div><p>and also in twisted Edwards e.g. Jubjub vs. Bandersnatch:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Jubjub</th>\n<th style=\"text-align:center\">Old (2-bit double-and-add)</th>\n<th style=\"text-align:right\">New (fake GLV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"math\">[s]P</span></td>\n<td style=\"text-align:center\">5,863 scs <br> 3,314 r1cs</td>\n<td style=\"text-align:right\">4,549  scs <br> 2,401 r1cs</td>\n</tr>\n</tbody>\n</table>\n</div><div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Bandersnatch</th>\n<th style=\"text-align:center\">Old (GLV)</th>\n<th style=\"text-align:right\">New (fake GLV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"math\">[s]P</span></td>\n<td style=\"text-align:center\">4,781 scs <br>  2,455 r1cs</td>\n<td style=\"text-align:right\">4,712 scs <br> 2,420 r1cs</td>\n</tr>\n</tbody>\n</table>\n</div><hr>\n<p><em>EDIT: Thanks to <a href=\"https://www.lix.polytechnique.fr/~smith/\" rel=\"noopener nofollow ugc\">Ben Smith</a> for reporting that a similar idea was proposed in <a href=\"https://cacr.uwaterloo.ca/techreports/2005/cacr2005-28.pdf\" rel=\"noopener nofollow ugc\">[SAC05:ABGL+]</a> for ECDSA verification. We note that, in our context, the trick applies to a single scalar multiplication and that the half GCD is free through the hint.</em></p>\n<h2><a name=\"p-49892-acknowledgement-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49892-acknowledgement-12\"></a>Acknowledgement</h2>\n<p>I would like to thank Arnau Cube, Aard Vark, Holden Mui, Olivier Bégassat, Thomas Piellard and Ben Smith for fruitful discussions.</p>\n            <p><small>6 posts - 3 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/fake-glv-you-dont-need-an-efficient-endomorphism-to-implement-glv-like-scalar-multiplication-in-snark-circuits/20394\">Read full topic</a></p>","link":"https://ethresear.ch/t/fake-glv-you-dont-need-an-efficient-endomorphism-to-implement-glv-like-scalar-multiplication-in-snark-circuits/20394","pubDate":"Mon, 09 Sep 2024 19:48:29 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20394"},"source":{"@url":"https://ethresear.ch/t/fake-glv-you-dont-need-an-efficient-endomorphism-to-implement-glv-like-scalar-multiplication-in-snark-circuits/20394.rss","#text":"Fake GLV: You don't need an efficient endomorphism to implement GLV-like scalar multiplication in SNARK circuits"},"filter":false},{"title":"Embedded fee markets and ERC-4337 (part 2)","dc:creator":"DavideRezzoli","category":"Economics","description":"<p>by: Davide Rezzoli (<a class=\"mention\" href=\"https://ethresear.ch/u/daviderezzoli\">@DavideRezzoli</a>) and Barnabé Monnot (<a class=\"mention\" href=\"https://ethresear.ch/u/barnabe\">@barnabe</a>)</p>\n<p>Many thanks to Yoav Weiss (<a class=\"mention\" href=\"https://ethresear.ch/u/yoavw\">@yoavw</a>) for introducing us to the problem, Dror Tirosh (<a class=\"mention\" href=\"https://ethresear.ch/u/drortirosh\">@drortirosh</a>) for helpful comments on the draft, and the 4337 team for their support. Reviews ≠ endorsements; all errors are the authors’ own.</p>\n<p>This work was done for <a href=\"https://efdn.notion.site/ROP-7-Economic-models-of-signature-aggregation-in-account-abstraction-ec5390efab864ed49a8535e8bdfff182\" rel=\"noopener nofollow ugc\">ROP-7</a>.</p>\n<hr>\n<h3><a name=\"p-49870-introduction-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-introduction-1\"></a>Introduction</h3>\n<p>In our previous <a href=\"https://ethresear.ch/t/embedded-fee-markets-and-erc-4337-part-1/19542\">post</a>, we introduced the ERC-4337 model. This model outlines the fee market structure for bundlers and details the cost function related to the on-chain publishing cost and the off-chain (aggregation costs) of a bundle.</p>\n<p>We also introduced the concept of the “<em>Bundler Game</em>”. This game will be the primary focus of the second part. Given a set of transactions, a bundler can choose which transactions to include in their bundle. This creates an asymmetry of information between the bundlers and the user, as the user doesn’t know how many transactions will be included in the bundle. This leads to a zero-sum game where the user is at a clear disadvantage.</p>\n<p>This research aims to explore methods to improve the UX by ensuring that users do not need to overpay for inclusion in the next bundle. Instead, users should be able to pay a fee based on the actual market demand for inclusion.</p>\n<h2><a name=\"p-49870-current-state-of-erc-4337-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-current-state-of-erc-4337-2\"></a>Current state of ERC-4337</h2>\n<p>In today’s market, the P2P mempool is not live on mainnet and it’s being tested on the Sepolia testnet. Companies building on ERC-4337 are currently operating in a private mode, the users connect via an RPC to a private bundler which will than work with a buidler to publish onchain your useroperation. <a href=\"https://www.bundlebear.com/overview/all\" rel=\"noopener nofollow ugc\">Bundle Bear app</a>, developed by Kofi, provides some intriguing statistics on the current state of ERC-4337.</p>\n<p>In the <a href=\"https://www.bundlebear.com/bundlers/all\" rel=\"noopener nofollow ugc\">Weekly % Multi-UserOp Bundles</a> metric, we observe the percentage of bundlers creating bundles that include multiple userops. From the beginning of 2024 to June 2024, this percentage has not exceeded 6.6%. This data becomes even more interesting when considering that many bundlers run their own paymasters, entities that sponsor transactions on behalf of users. Notably, the two largest bundlers who also operate as a paymaster, in terms of user operations published, <a href=\"https://www.bundlebear.com/paymasters/all\" rel=\"noopener nofollow ugc\">sponsored 97%</a> of the user operations using their services. The paymaster pays for some parts of the useroperation and the rest is paid by the dapps or other <a href=\"https://www.coinbase.com/en-de/developer-platform/solutions/account-abstraction-kit\" rel=\"noopener nofollow ugc\">entity</a>.</p>\n<p>The question that arises is why paymasters, dApps, etc., are paying for the user operations. Will the user pay them back in the future? We can’t be sure what will happen, but my personal guess is that currently, dApps are covering the fees to increase usage and adoption of their apps. Once adoption is high, users will likely have to pay for the transactions themselves. It’s worth mentioning that for the user to pay for a user operation with the current model is not the best option, since a basic ERC-4337 operation costs ~42,000 gas, while a normal transaction costs ~21,000 gas.</p>\n<h2><a name=\"p-49870-variations-on-erc-4337-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-variations-on-erc-4337-3\"></a>Variations on ERC-4337</h2>\n<h3><a name=\"p-49870-overview-of-erc-4337-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-overview-of-erc-4337-4\"></a>Overview of ERC-4337</h3>\n<p>The mempool is still in a testing phase on Sepolia and is not live on the mainnet. Without the mempool, users have limited options for using account abstraction. Users interact with an RPC, which may be offered by a bundler that bundles UserOps, or with an RPC service that doesn’t bundle, similar to services like Alchemy or Infura, which receive and propagate transactions to other bundlers.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/5/c/5cfa750fc581f313b031ca060a05d21cc3379214.jpeg\" alt=\"High level of a transaction in ERC-4337 without the mempool\" data-base62-sha1=\"dgwwPrr5FpfQXtBASfeKFOe2axu\" width=\"497\" height=\"111\"></p>\n<p>Once the mempool is live, the transaction flow will resemble the diagram below, which is similar to the current transaction flow. A mempool enhances censorship resistance for users because, unlike the RPC model, it reduces the chances of a transaction being excluded. However, even with a mempool, there is still a risk that an RPC provider might not forward the transaction, but the mempool model is particularly beneficial for users who prefer to run their own nodes, as it mitigates this risk.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/7/7/779c484a5068fcd2a4df86e24c5ede85cb6af781.png\" alt=\"High level of a normal transaction using an EOA\" data-base62-sha1=\"h47Es0l8Qd2k5fWqkt78p0R1QSl\" width=\"631\" height=\"136\"></p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/f/9/f9ab02c182e4af4e72324eddfc31b93c5555f115.jpeg\" alt=\"High level of an userop type of transaction\" data-base62-sha1=\"zCFhixsTDhXkA8qiud2kSbXHce9\" width=\"621\" height=\"126\"></p>\n<p>While bundlers have the potential to act as builders, we prefer to keep the roles separate due to the competitive landscape. Bundlers would face significant competition from existing, sophisticated builders, making building less attractive and potentially less profitable. As a result, bundlers are more incentivized to collaborate with established builders rather than building independently and risking losses.</p>\n<p>Combining the roles of bundler and builder into a single entity implies significant changes to the current system. Bundlers would need to compete with existing <a href=\"https://etherscan.io/dashboards/block-producers\" rel=\"noopener nofollow ugc\">sophisticated builders</a>, or alternatively, current builders will need to horizontally integrate and assume the bundler role as well. The latter scenario, while more plausible, raises concerns about market concentration and the potential negative impact on censorship resistance.</p>\n<h3><a name=\"p-49870-bundlers-and-builders-as-two-different-entities-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-bundlers-and-builders-as-two-different-entities-5\"></a>Bundlers and builders as two different entities</h3>\n<p>With the users connecting directly to an RPC, everything runs in a more private environment, which doesn’t help with market competition. In the near future the mempool will be on the mainnet increasing competition.</p>\n<p>Using a mempool, in which userops are public to different bundlers increases competition, in the case of non native account abstraction having a separation between bundler and builder is needed, in the case of native account abstraction the separation might not be needed since the builder can interpret the userops as normal transactions.</p>\n<p>For our model we believe that having a separation between the bundler and the builder also offers some advantages, especially in terms of competition and censorship resistance. Imagine a scenario where all the bundlers are offering a cost <span class=\"math\">\\textbf{v}</span> for getting included in their bundle. There will be a bundler who wants to attract more users to achieve higher profits, so they will offer a cost <span class=\"math\">\\textbf{v’}</span>  where <span class=\"math\">\\textbf{v’} &lt; \\textbf{v}</span>  with enough competition among bundlers, <span class=\"math\">\\textbf{v'}</span> will get close to <span class=\"math\">\\omega</span>, the aggregation cost for the bundle. In this case, the bundlers who can search more efficiently and have better hardware to include more transactions in a bundle will earn higher fees and in return makes the useroperation for the user cheaper.</p>\n<p>This could lead to the following outcome: In a <strong>competitive environment</strong>, bundlers will lower their prices to be selected by users, who will, in turn, seek the lowest price for the inclusion of their user operation in a bundle. This competition will create a system where the bundler who offers the best price will be selected more often than the bundler who is only trying to maximize their profit by creating smaller bundles. Separating the roles of the bundler and builder can also enhance censorship resistance. A bundler can create a bundle of aggregated user operations and send it to different builders. If the bundle includes operations that could be censored, a non-censoring builder can accept it and proceed with construction. However, it’s worth noting that from a user’s perspective, this setup could increase costs, as the introduction of a bundler adds an additional party, leading to higher expenses.</p>\n<h3><a name=\"p-49870-rip-7560-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-rip-7560-6\"></a>RIP-7560</h3>\n<p>Native account abstraction isn’t a novel concept; it’s been under research for years. While ERC-4337 is gaining traction, its implementation outside the protocol offers distinct advantages alongside trade-offs. Notably, existing EOAs can’t seamlessly transition to SCWs, and various types of censorship-resistant lists are harder to utilize. As previously mentioned, the gas overhead of a userOp cost escalates significantly compared to a normal transaction. <a href=\"https://github.com/ethereum/RIPs/blob/196f28d2164f30333b503481e7da954d4bf32ea3/RIPS/rip-7560.md\" rel=\"noopener nofollow ugc\">RIP-7560</a> won’t inherently resolve the ongoing issue concerning off-chain costs, but it substantially reduce transaction expenses. From the initial ~42000 gas, it’s possible to reduce the cost by <a href=\"https://youtu.be/sZ1UO4VN1GI?si=x7Tu22Oqxr7x-KAb&amp;t=554\" rel=\"noopener nofollow ugc\">~20000 gas</a>.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/f/a/fadf929aca9a2378a70f5456501dedf5da00358b.jpeg\" alt=\"High level of a type4 transaction with RIP-7560\" data-base62-sha1=\"zNkmVJxsXQbEGsZrX0lP1xZskI3\" width=\"491\" height=\"136\"></p>\n<h3><a name=\"p-49870-layer2s-account-abstraction-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-layer2s-account-abstraction-7\"></a>Layer2s Account Abstraction</h3>\n<p>Account abstraction can be utilized in Layer 2 (L2) solutions. Some L2s already implement it natively, while others follow the L1 approach and are waiting for a new proposal similar to RIP-7560. In L2, the L1 is used for data availability to inherit security, while most of the computation occurs off-chain on the L2, providing cheaper transactions and scalability.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/b/2/b2a8d1ebfceef37ab62f0db834e7ee6135441741.jpeg\" alt=\"High level of Account abstraction in Layer 2\" data-base62-sha1=\"puuGsTGTMlLuTCy4cbcIUrqc9hv\" width=\"611\" height=\"136\"></p>\n<p>In scenarios where computation on L2 is significantly cheaper than the cost of calldata for data availability (DA) on the mainchain, the use of signature aggregation proves highly beneficial. For instance, pairing for BLS on the mainnet is facilitated by the <a href=\"https://www.evm.codes/precompiled\" rel=\"noopener nofollow ugc\"><em>0x08</em></a> precompile from the EVM, which costs approximately ~45000k gas. Consequently, using BLS on L1 is more expensive than traditional transactions.</p>\n<p>Compression techniques on L2s are already being used, such as 0-byte compression, which reduces the cost from ~188 bytes to ~154 bytes for an ERC20 transfer. With signature aggregation, the compression efficiency can be further enhanced by using a single signature, reducing the size to ~128 bytes.</p>\n<p>In Layer 2s, signature aggregation is a crucial innovation that enhances both transaction efficiency and cost-effectiveness. By combining multiple signatures into a single one, the overall data payload is significantly reduced, which lowers the costs associated with data availability on Layer 1. This advancement not only improves scalability but also reduces transaction costs for users, making the system more economical and efficient.</p>\n<h2><a name=\"p-49870-signature-aggregation-economics-in-layer2s-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-signature-aggregation-economics-in-layer2s-8\"></a>Signature Aggregation economics in Layer2s</h2>\n<p>When using an L2 service, the user incurs several costs, including a fee for the L2 operator, a cost based on network congestion, and the cost of data availability on L1.</p>\n<p>From a previous research on ”<a href=\"https://barnabe.substack.com/p/understanding-rollup-economics-from#footnote-3-48535841\" rel=\"noopener nofollow ugc\"><strong>Understanding rollup economics from first principles</strong></a>”, we can outline the costs a user faces when using L2 services as follows:</p>\n<p>When a user interatcs with a layer 2 he has some costs that we can define as follow:</p>\n<ul>\n<li><strong>User fee</strong> = L1 data publication fee + L2 operator fee + L2 congestion fee</li>\n<li><strong>Operator cost</strong> = L2 operator cost + L1 data publication cost</li>\n<li><strong>Operator revenue =</strong> User fees + MEV</li>\n<li><strong>Operator profit = Operator revenue - Operator cost</strong> = L2 congestion fee + MEV</li>\n</ul>\n<p>In the case of non-native account abstraction, an additional entity, the bundler, may introduce a fee for creating bundles of userops.</p>\n<p>Considering the bundler, the costs and profits are extended as follows:</p>\n<ul>\n<li><strong>User fee</strong> = L1 data publication fee + L2 operator fee + L2 congestion fee + Bundler Fee</li>\n<li><strong>Bundler Cost</strong> = Quoted(L1 data publication fee + L2 operator fee + L2 congestion fee)</li>\n<li><strong>Bundler Revenue</strong> = User fee</li>\n<li><strong>Bundler profit</strong> = Bundler Revenue - Bundler cost = Difference between L1 and L2 costs and quoted prices from the bundler + Bundler fee</li>\n<li><strong>Operator Cost</strong> = L1 data publication fee + L2 operator fee</li>\n<li><strong>Operator profit = Operator revenue - Operator cost</strong> = L2 congestion fee + MEV</li>\n</ul>\n<p>The bundler earns its fee from the user for their services, while the remainder of the user’s payment covers the L2 operator’s costs. If the user is unaware of the bundle size, estimating the actual cost of sending userops becomes challenging, potentially leading to the bundler charging higher fees than the one necessary to cover the operator cost.</p>\n<h3><a name=\"p-49870-incentive-alignment-in-l2-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-incentive-alignment-in-l2-9\"></a>Incentive Alignment in L2</h3>\n<p>The interaction between the bundler and L2 helps address this issue, as L2s are incentivized to keep user costs low due to competition. Overcharging users can drive them to switch to other L2s offering fairer prices.</p>\n<p>Let’s redefine our model by introducing the operator. The user bids to the bundler for inclusion in the next L2 block by bidding a value <span class=\"math\">V</span>. The user aims to minimize the data publication fee, while the bundler seeks to maximize their fee or gain a surplus from L2 interaction costs and user fees.</p>\n<p>The costs associated with creating a bundle and publishing it on-chain can be divided into two parts:</p>\n<p><strong>On-chain cost function:</strong> A bundler issuing bundle <span class=\"math\">\\mathbf{B}</span> when the base fee is <span class=\"math\">r</span> expends a cost:</p>\n<div class=\"math\">\nC_\\text{on-chain}(\\mathbf{B}, r) = F \\times r + n \\times S \\times r\n</div>\n<p><strong>Aggregated cost function:</strong> The bundler has a cost function for aggregating <span class=\"math\">n</span> transactions in a single bundle <strong><span class=\"math\">\\mathbf{B}</span></strong> with base fee of <span class=\"math\">r</span>:</p>\n<div class=\"math\">\nC_\\text{agg}(\\mathbf{B}, r) = F' \\times r + n \\times S' \\times r + n \\times \\omega\n</div>\n<p>with  <span class=\"math\">S' &lt; S</span> the reduced size of a transaction and the pre-verification gas use <span class=\"math\">F' &gt; F</span>, which contains the publication and verification of the single on-chain aggregated signature.</p>\n<p>If the user can obtain a reliable estimate for <span class=\"math\">n</span>, they can calculate their cost using the <code>estimateGas</code> function, available in most L2 solutions. Having a good estimation can make the user bid accordingly without having to overestimate their bid for inclusion. This function determines the necessary cost to ensure inclusion. Having a good estimate for <span class=\"math\">n</span> and the <code>estimateGas</code> function can avoid the user to pay for a higher <code>preVerificationGas</code>. In the next section, we will explore various mechanisms to ensure a reliable estimation of <span class=\"math\">n</span>.</p>\n<h3><a name=\"p-49870-layer2s-operate-an-oracle-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-layer2s-operate-an-oracle-10\"></a>Layer2s operate an oracle</h3>\n<p>The oracle’s role is to monitor the mempool and estimate the number of transactions present. The process works as follows: the Layer 2 deploys an oracle to check the mempool and then informs the user about the number of transactions in the mempool. This enables the user to estimate their bid for inclusion in a bundle. The Layer 2 can request the bundler to include at least a specified number of transactions (<span class=\"math\">n</span>) in a bundle, or else the bundle will be rejected. Once the bundler gathers enough transactions to form a bundle, it sends the bundle to the Layer 2, which then forwards it to the mainnet as calldata for data availability.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/1/5/155c138c7fac1f1d415836ca20e488c9ad49fa73.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/155c138c7fac1f1d415836ca20e488c9ad49fa73\" title=\"Watcher proposal\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/1/5/155c138c7fac1f1d415836ca20e488c9ad49fa73_2_538x500.jpeg\" alt=\"Watcher proposal\" data-base62-sha1=\"32Xizzsy0ZzVewMufn4YRBDB2ev\" width=\"538\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/1/5/155c138c7fac1f1d415836ca20e488c9ad49fa73_2_538x500.jpeg, https://ethresear.ch/uploads/default/original/3X/1/5/155c138c7fac1f1d415836ca20e488c9ad49fa73.jpeg 1.5x, https://ethresear.ch/uploads/default/original/3X/1/5/155c138c7fac1f1d415836ca20e488c9ad49fa73.jpeg 2x\" data-dominant-color=\"F8F8F7\"></a></div><p></p>\n<h3><a name=\"p-49870-layer2s-with-shared-sequencer-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-layer2s-with-shared-sequencer-11\"></a>Layer2s with shared sequencer</h3>\n<p>An interesting approach is to have multiple Layer 2 (L2) networks running a shared sequencer. This setup can provide a more accurate estimate of the mempool, as the sequencer reaches an agreement through consensus facilitated by the shared sequencer.</p>\n<p>In this configuration, different L2 networks operate independently but share a common sequencer. At regular intervals, these networks check the number of user operations (userops) in the shared mempool. The shared sequencer helps synchronize and aggregate data from these networks. Once they reach an agreement, the information is communicated to the user, allowing them to bid based on the number of userops present.</p>\n<p>This approach offers several advantages. Firstly, it provides a decentralized method to determine the number of userops in the mempool, enhancing resistance to collusion. Secondly, it eliminates the single point of failure that could occur if only one system were managing the communication between the user and the mempool. Thirdly, the shared sequencer ensures consistency and reduces discrepancies between the different L2 solutions.</p>\n<p>By leveraging the shared sequencer, this method ensures a robust and reliable system for estimating and communicating the state of the mempool to users, thus improving the overall efficiency and security of the process.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/6/d6c85557ef46c934ff99f11c86e081107333e050.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/d6c85557ef46c934ff99f11c86e081107333e050\" title=\"Shared Sequencer\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/6/d6c85557ef46c934ff99f11c86e081107333e050_2_486x500.jpeg\" alt=\"Shared Sequencer\" data-base62-sha1=\"uE3oeNVshrRSnAtr3GyJ0ipu8hO\" width=\"486\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/6/d6c85557ef46c934ff99f11c86e081107333e050_2_486x500.jpeg, https://ethresear.ch/uploads/default/optimized/3X/d/6/d6c85557ef46c934ff99f11c86e081107333e050_2_729x750.jpeg 1.5x, https://ethresear.ch/uploads/default/original/3X/d/6/d6c85557ef46c934ff99f11c86e081107333e050.jpeg 2x\" data-dominant-color=\"F7F7F8\"></a></div><p></p>\n<p>In the two explained approaches by using an oracle, there is a potential attack vector where an adversary could generate multiple user operations in the mempool, knowing that they will revert if aggregated together. As a result, the oracle sees that there are <span class=\"math\">n</span>  transactions and requires a large bundle, but the bundler cannot create the bundle. This issue could stall the network for many blocks.</p>\n<h3><a name=\"p-49870-layer2s-operate-their-own-bundler-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-layer2s-operate-their-own-bundler-12\"></a>Layer2s operate their own bundler</h3>\n<p>In this proposal, the Layer 2 itself assumes the role of the bundler, while another entity handles the aggregation of signatures (this could be current bundler services). The process works as follows: the Layer 2 operates its own bundler, and users send their operations (userops) to the mempool. The Layer 2 selects some of these userops from the mempool and sends them “raw” to the aggregator, compensating the aggregator for aggregating the signatures. Once the aggregator produces the bundle, it sends it to the bundler, which then forwards it to the mainnet as calldata for data availability.</p>\n<p>The main idea is that the Layer 2 handles the collection of userops and then outsources the aggregation to another entity. The Layer 2 pays for the aggregation and charges the user a fee for the service.</p>\n<p>There are two different options:</p>\n<ol>\n<li>\n<p><strong>Flat Fee Model:</strong> The bundler (Sequencer) selects some transactions and charges the user a flat fee. This flat fee is calculated similarly to current Layer 2 transactions, predicting the future cost of L1 data publication. Alternatively, the Layer 2 could charge the user a flat fee based on the cost of bundling <span class=\"math\">n</span>  aggregated userops,  the layer 2 still have to predict how many transactions will be present in the bundle he will contruct to correctly quote the user, this can be made in the same way is now where the . As it is now where the l2 charge the best comeptitive price to the user that it is in the Layer 2’s best interest to keep the prices as competitive as possible for the user.<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/2/a/2ad21c4d7917c11d2c90e9f0f2b4e027466730f7.png\" data-download-href=\"https://ethresear.ch/uploads/default/2ad21c4d7917c11d2c90e9f0f2b4e027466730f7\" title=\"Flat Fee\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/2/a/2ad21c4d7917c11d2c90e9f0f2b4e027466730f7_2_477x500.png\" alt=\"Flat Fee\" data-base62-sha1=\"66OdeThE4zY7h1nzrYachShaaY7\" width=\"477\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/2/a/2ad21c4d7917c11d2c90e9f0f2b4e027466730f7_2_477x500.png, https://ethresear.ch/uploads/default/original/3X/2/a/2ad21c4d7917c11d2c90e9f0f2b4e027466730f7.png 1.5x, https://ethresear.ch/uploads/default/original/3X/2/a/2ad21c4d7917c11d2c90e9f0f2b4e027466730f7.png 2x\" data-dominant-color=\"F9F8F8\"></a></div><p></p>\n</li>\n<li>\n<p><strong>Requesting Refunds:</strong> If the Layer 2 wants to enhance its credibility, it could enable automatic refunds. This would involve a mechanism that checks how many userops are published in a single block and whether the transactions could have been aggregated. If a userop that could have been aggregated wasn’t, and no automatic refund was issued, the user can request a refund. In this scenario, the Layer 2 could stake some assets, and if the refund isn’t provided, the user could enforce the refund, ensuring fairness and accountability.<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/2/8/28b9021118bfcafbcc024f1efe0dcd3c1184c5de.png\" data-download-href=\"https://ethresear.ch/uploads/default/28b9021118bfcafbcc024f1efe0dcd3c1184c5de\" title=\"Request Refund\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/2/8/28b9021118bfcafbcc024f1efe0dcd3c1184c5de_2_477x500.png\" alt=\"Request Refund\" data-base62-sha1=\"5OftyLIgt4MizMREnBOSP1AZs1U\" width=\"477\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/2/8/28b9021118bfcafbcc024f1efe0dcd3c1184c5de_2_477x500.png, https://ethresear.ch/uploads/default/original/3X/2/8/28b9021118bfcafbcc024f1efe0dcd3c1184c5de.png 1.5x, https://ethresear.ch/uploads/default/original/3X/2/8/28b9021118bfcafbcc024f1efe0dcd3c1184c5de.png 2x\" data-dominant-color=\"F9F8F7\"></a></div><p></p>\n</li>\n</ol>\n<h2><a name=\"p-49870-conclusion-13\" class=\"anchor\" href=\"https://ethresear.ch#p-49870-conclusion-13\"></a>Conclusion</h2>\n<p>In these two different posts, we outline the difficulties users experience when bidding to be included in the next bundle. In the first part, we presented the ERC-4337 model, explaining the costs a bundler incurs when posting a bundle on-chain and the associated off-chain costs. We also outlined the fee markets for bundlers and began discussing the issue of formatting the bundler. Users experience difficulties with bidding due to a lack of knowledge about the number of transactions present in the mempool at the time of bundling.</p>\n<p>In the second part, we explained ERC-4337 and RIP-7560. We then discussed why signature aggregation is more likely to occur on Layer 2 solutions rather than directly on Layer 1. We demonstrated how Layer 2 solutions could address the asymmetric knowledge that users experience in different ways. The first one is to use oracles to signal to the user how many transactions are present in the mempool, with this approach the users knows how much they should bid and can force the bundler to make larger bundles. The third approach which is the simplest is that the L2 acts as a bundler and outsources the aggregation to a third party and lets the users pay a fee for it.</p>\n            <p><small>2 posts - 2 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/embedded-fee-markets-and-erc-4337-part-2/20384\">Read full topic</a></p>","link":"https://ethresear.ch/t/embedded-fee-markets-and-erc-4337-part-2/20384","pubDate":"Thu, 05 Sep 2024 10:23:10 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20384"},"source":{"@url":"https://ethresear.ch/t/embedded-fee-markets-and-erc-4337-part-2/20384.rss","#text":"Embedded fee markets and ERC-4337 (part 2)"},"filter":false},{"title":"Timestamp Ordering in MCP for Timing Games","dc:creator":"saguillo2000","category":"Block proposer","description":"<blockquote>\n<p>Thanks to <a class=\"mention\" href=\"https://ethresear.ch/u/julian\">@Julian</a> and <a href=\"https://twitter.com/_ddiaconescu_\" rel=\"noopener nofollow ugc\">@denisa</a> for the corrections, suggestions and discussions!</p>\n</blockquote>\n<p>Multiple Concurrent Proposers (MCP) has recently become a significant topic of discussion within the community, particularly following the introduction of the <a href=\"https://x.com/danrobinson/status/1820506643739615624\" rel=\"noopener nofollow ugc\">BRAID protocol</a> and the rise of DAG consensus. Max’s argument in favor of MCP for Ethereum centers on the monopoly created by leader-based <a href=\"https://ethresear.ch/t/execution-consensus-separation/19964\">consensus mechanisms</a>, where the leader for a given slot is granted substantial monopolistic power. This concentration of power leads to issues such as short censorship for some transactions.</p>\n<p>In leader-based consensus, the designated leader for each slot has the exclusive authority to propose blocks, which allows them to exploit their position for profit maximization, such as through transaction reordering or frontrunning. MCP aims to mitigate these issues by decentralizing the block proposal process, reducing the influence any single proposer can exert over the network during a given slot.</p>\n<h1><a name=\"p-49846-multiple-concurrent-proposers-economic-order-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49846-multiple-concurrent-proposers-economic-order-1\"></a>Multiple Concurrent Proposers Economic Order</h1>\n<p>Let <span class=\"math\">n</span> represent the number of validators in the network. A subset of validators maintains a local chain, denoted by <span class=\"math\"> k &lt; n</span>. The protocol at some step will need to pick the union of all local blockchains at slot <span class=\"math\">i</span> and an ordering rule must be applied between transactions of each local chain.</p>\n<p><strong>Deterministic Block Ordering</strong>: A deterministic rule is applied to order the blocks and its transactions. In the context of <a href=\"https://www.youtube.com/live/PhsJnEnsLN4?si=_Wd_RzjXLzgdyeaZ\" rel=\"noopener nofollow ugc\">MEV-SBC ‘24</a> event, <a href=\"https://www.youtube.com/watch?v=SBOGdofF4u8\" rel=\"noopener nofollow ugc\">Max proposes</a> two approaches:</p>\n<ol>\n<li><strong>Sorting by Priority Fee</strong>: Blocks are sorted based on the priority fee of transactions. MEV (Maximal Extractable Value) taxes can be applied, where a percentage of the priority fee is extracted and redistributed by the application. This approach is detailed in the proposal <a href=\"https://www.paradigm.xyz/2024/06/priority-is-all-you-need\" rel=\"noopener nofollow ugc\">“Priority is All You Need”</a>.</li>\n<li><strong>Execution Flags</strong>: Transactions can set an “execution flag” that indicates specific actions, such as interacting with a particular liquidity pool (e.g., trading ETH/USDC in the UNIv5 pool). When the block ordering rule encounters a transaction with such a flag, it pulls all flagged transactions attempting to interact with that pool and executes them as a batch.</li>\n</ol>\n<h1><a name=\"p-49846-timing-games-with-frontrunning-incentive-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49846-timing-games-with-frontrunning-incentive-2\"></a>Timing Games with Frontrunning Incentive</h1>\n<p>Let <span class=\"math\">p</span> be a proposer participating in the MCP protocol, who is responsible for proposing a block in their local chain during slot <span class=\"math\">i</span>. We acknowledge that there exists an inherent delay and processing time required to propose this block. Specifically, the protocol permits a maximum allowable delay of <span class=\"math\">\\Delta</span> time units before <span class=\"math\">p</span> incurs penalties.</p>\n<p><span class=\"math\">p</span> may strategically opt to delay their block proposal until <span class=\"math\">\\Delta - \\epsilon</span> (where <span class=\"math\">\\epsilon &gt; 0 </span>) time units. This delay enables <span class=\"math\">p</span> to potentially exploit a frontrunning opportunity by observing and computing a partial order of transactions submitted by other proposers. By strategically placing their block proposal just before the misslot penalty (no block has been proposed and it’s no going to be accepted for slot <span class=\"math\">i</span>), <span class=\"math\">p</span> could include transactions with higher gas fees, a situation that provides a clear incentive for engaging in frontrunning behavior and the main incentive for playing timing games in this post.</p>\n<p>Under the current deterministic protocol rules, such a timing strategy is incentivized as it allows proposers to maximize their rewards through manipulation of transaction order. This situation underscores the need for an effective mechanism. However, a more robust solution may involve revisiting the transaction ordering rules to eliminate this concrete incentive for timing games that lead to such exploitative behaviors, thereby ensuring a fairer and more secure protocol.</p>\n<h1><a name=\"p-49846-partially-ordered-dataset-pod-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49846-partially-ordered-dataset-pod-3\"></a>Partially Ordered Dataset (POD)</h1>\n<p>One of the main concerns regarding MCP is the absence of a clearly defined method for determining the order of transactions. It remains uncertain how the sequence and the underlying criteria for ordering will be established, as well as how the influence of clients will be exercised—whether through mechanisms such as auctions, latency considerations, or the risk of spam attacks, as highlighted by <a href=\"https://www.youtube.com/watch?v=SBOGdofF4u8\" rel=\"noopener nofollow ugc\">Phil at SBC '24</a>.</p>\n<p>The team of Common Prefix has conducted a thorough <a href=\"https://www.commonprefix.com/static/clients/flashbots/flashbots_report.pdf\" rel=\"noopener nofollow ugc\">analysis of various consensus protocols</a>, including leader-based, inclusion list, and leaderless consensus models, with a focus on their resistance to censorship. As a result of their research, they developed the concept of a Partially Ordered Dataset. In this model, the order of transactions is determined by the timestamps recorded by the clients, which may lead to a lack of strict ordering when two transactions are recorded simultaneously. The implications of relinquishing strict ordering in transaction processing have not been extensively explored in the existing literature, or at least, I am not aware of any comprehensive studies on the matter.</p>\n<p>A POD is a finite sequence of pair <span class=\"math\">\\{(r, T), …, (r’, T’)\\}</span> s.t. <span class=\"math\">r</span> is round (slot) and <span class=\"math\">T</span> a set of transactions.</p>\n<p>A round is perfect <span class=\"math\">r_{perf}</span> if no new transactions can appear with recorded round <span class=\"math\">r_{rec} \\leq r_{perf}</span>, which means there is no conflict in the ordering before <span class=\"math\">r_{perf}</span>.</p>\n<p>A <strong>POD protocol</strong> exposes the following methods.</p>\n<ul>\n<li>input event <code>write(tx)</code> : Clients call <code>write(tx)</code> to write a transaction <code>tx</code> .</li>\n<li>output event <code>write_return(tx, π)</code> : after <code>write(tx)</code> the protocol outputs <code>write_return(tx, π)</code>, where <code>π</code> is a record certificate.</li>\n<li>input event <code>read_perfect()</code>: Clients call <code>read_perfect()</code> to read the transactions in the bulletin.</li>\n<li>output event <code>read_perfect_return(r, D, Π)</code> : after <code>read_perfect()</code> protocol outputs <code>read_perfect_return(r, D, Π)</code>, where <code>r</code> is a round, called the past perfect round, <code>L</code> is a set of transactions, <code>D</code> is a POD, and <code>Π</code> is a past-perfect certificate. For each entry <code>(r', T)</code> in <code>D</code>, we say that transactions in <code>T</code> became finalized at round <code>r'</code>.</li>\n<li>input event <code>read_all()</code> : returns all transactions up to the current round without past-perfection guarantees, hence it can return faster than <code>read_perfect()</code>.</li>\n<li>output event <code>read_all_return(D, Π)</code></li>\n<li><code>identify(π, Π) → P' ⊆ P</code> : Clients call <code>identify(π, Π) → P' ⊆ P</code> to identify the set <code>P'</code> of parties who vouched for the finalization of a transaction, where <code>Π</code> is a POD and <code>π</code> is the certificate returned by <code>write_return(tx, π)</code>.</li>\n</ul>\n<p>The properties of Liveness and Security are detailed in the original work, and the following will be utilized in subsequent arguments:</p>\n<p>Fair punishment: No honest replica gets punished as a result of malicious operation. If <code>identify(π, Π) → P'</code>, where <code>π</code> is a record certificate for transaction <code>tx</code> and <code>Π</code> is a past-perfect certificate for a POD <code>D</code>, can only be created if all parties in <code>P'</code> sign <code>tx</code> and <code>D</code>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/7/4/74ea9a2fbbcf46cdb5da2f6898d698da4c404c6a.png\" data-download-href=\"https://ethresear.ch/uploads/default/74ea9a2fbbcf46cdb5da2f6898d698da4c404c6a\" title=\"Construction of Partially Ordered Datasets\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/7/4/74ea9a2fbbcf46cdb5da2f6898d698da4c404c6a_2_690x330.png\" alt=\"Construction of Partially Ordered Datasets\" data-base62-sha1=\"gGi1dA2hMncltonTsgQ9hF3wIoq\" width=\"690\" height=\"330\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/7/4/74ea9a2fbbcf46cdb5da2f6898d698da4c404c6a_2_690x330.png, https://ethresear.ch/uploads/default/optimized/3X/7/4/74ea9a2fbbcf46cdb5da2f6898d698da4c404c6a_2_1035x495.png 1.5x, https://ethresear.ch/uploads/default/original/3X/7/4/74ea9a2fbbcf46cdb5da2f6898d698da4c404c6a.png 2x\" data-dominant-color=\"F2F2F2\"></a></div><p></p>\n<p>The construction of the POD is as follows: The client will send a transaction to all the validators in the network and will have to wait for <span class=\"math\">n - f</span> signatures to confirm his transaction has been received by the network, where <span class=\"math\">f</span> is the amount of allowed byzantine validators. Once the client received the signature he will record the median of all the signatures he has received, as there is going to be some latency and difference between the validators when they received the transaction.</p>\n<p>For the reading set of transactions for some round the client will have two options:</p>\n<ul>\n<li>Believe in synchrony on the txs received: Request all the recorded transactions from the validators for some specific round <span class=\"math\">r</span>. Once obtains the  <span class=\"math\">n- f</span> signatures of all the transactions computes the median of the set of transactions based on their timestamps.</li>\n<li>Past-perfect guarantees, no-synchrony believer: Assume <span class=\"math\">r_{perf}</span> to be the minimum of the received <span class=\"math\">r</span> values, then we will not have any transaction with lower timestamp. Now takes the union of all the upcoming transactions. Now the client will have to wait some <span class=\"math\">\\delta</span> time to ensure through the gossip mechanism there is no lower <span class=\"math\">r_{perf}</span> and no more transaction for the upcoming round.</li>\n</ul>\n<h1><a name=\"p-49846-pods-mitigating-mev-in-mcp-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49846-pods-mitigating-mev-in-mcp-4\"></a>PODs mitigating MEV in MCP</h1>\n<p>Adopting Partially Ordered Datasets (PODs) as the primary data structure for MCP introduces a novel approach that hasn’t been extensively studied, particularly regarding its potential to mitigate the types of MEV games previously described.</p>\n<p>In PODs, transactions are ordered deterministically based on their timestamps. While this approach necessitates handling cases where multiple transactions share the same timestamp—or evaluating the likelihood of such occurrences—it fundamentally alters the dynamics of the fronturunning incentive of timing games previously described against other proposers block transactions.</p>\n<p>Consider a scenario in slot <span class=\"math\">m</span> where a malicious proposer attempts to front-run or sandwich another transaction. Under the previous deterministic ordering, which was based on auctions and priority fees, such attacks were feasible because proposers could manipulate their position in the ordering by outbidding others or exploiting latency. However, with timestamp-based ordering as implemented in PODs, this strategy changes significantly. An open question is still to know which strategies can be applied with PODs or timestamp ordering to extract MEV and if they are worse in wellfare of the network compared with the described game.</p>\n<p>In this new setup, being the last proposer in a slot would actually place that proposer in the final position within the transaction order, limiting their ability to engage in front-running or sandwiching assuming honesty in all nodes. Instead, they would only be able to perform back-running, which is generally considered less harmful than front-running or sandwiching. This shift in ordering strategy could effectively reduce the risk of these more dangerous forms of MEV exploitation.</p>\n<p>If a malicious validator attempts to manipulate the order of transactions by bribing proposers, slashing should be applied to the validator. By imposing such penalties, the protocol discourages malicious behavior and ensures that the integrity of the transaction ordering process is maintained. One of the future next questions it’s how can we detect a bad behaviour in the transaction record, maybe applying Turkey’s Method it’s a posible option and assume that outliers are malicious records.</p>\n<p>However, the situation is more complex than it appears. The shift to a new game for validators, where transaction ordering is influenced by latency, introduces additional challenges. Validators may now engage in latency games, where geographical proximity to other validators or network nodes becomes a crucial factor in gaining an advantage. To mitigate this, it is essential to ensure that validators are well decentralized across different regions.</p>\n<p>Decentralizing validators geographically helps reduce the impact of latency-based advantages. Validators clustered in the same location could lead to centralization risks, where a few validators might dominate the network due to their low-latency connections. This centralization could undermine the fairness of transaction ordering and potentially reintroduce the risk of censorship.</p>\n<p>Moreover, validators are incentivized to avoid sharing the same location because doing so decreases the uniqueness of the transactions they can access for a possible backrunning and taking such opportunities. The more validators operate from the same region, the fewer unique transactions each can capture, leading to lower profits from transaction fees, as these would have to be split among more validators. This dynamic encourages validators to spread out, fostering a more decentralized and resilient network that is better protected against latency-based games and the centralization of power. However, the current incentive is still weak and future work will reside in how to provide better incentives for non-centralization.</p>\n            <p><small>3 posts - 2 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/timestamp-ordering-in-mcp-for-timing-games/20372\">Read full topic</a></p>","link":"https://ethresear.ch/t/timestamp-ordering-in-mcp-for-timing-games/20372","pubDate":"Tue, 03 Sep 2024 08:17:06 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20372"},"source":{"@url":"https://ethresear.ch/t/timestamp-ordering-in-mcp-for-timing-games/20372.rss","#text":"Timestamp Ordering in MCP for Timing Games"},"filter":false},{"title":"Interpreting MPT branch node values","dc:creator":"josephjohnston","category":"Data Structure","description":"<p>Consider a branch node for an MPT.<br>\nSuppose the 17’th item in the branch node list is supposed to be NULL, because the branch node is not a “terminator” node. Ethereum documentation says NULL is encoded as the empty string.<br>\nSuppose the 17’th item in the list is supposed to be a value because the branch node is a terminator node. Suppose this value happens to be the empty string.<br>\nHow to distinguish these two cases?<br>\nNote this question should be independent of RLP encoding, which only concerns how we encode the list. I’m asking what’s in the list itself, before considering how the list is subsequently encoded.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/interpreting-mpt-branch-node-values/20368\">Read full topic</a></p>","link":"https://ethresear.ch/t/interpreting-mpt-branch-node-values/20368","pubDate":"Sat, 31 Aug 2024 14:57:04 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20368"},"source":{"@url":"https://ethresear.ch/t/interpreting-mpt-branch-node-values/20368.rss","#text":"Interpreting MPT branch node values"},"filter":false},{"title":"Exploring Verifiable Continuous Sequencing with Delay Functions","dc:creator":"thedevbirb","category":"Layer 2","description":"<p><em>Thanks to Conor, Lin and Swapnil from the Switchboard team, Cecilia and Brecht from the Taiko team, Alex Obadia, Justin Drake, Artem Kotelskiy and the Chainbound team for review.</em></p>\n<h2><a name=\"p-49826-abstract-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-abstract-1\"></a>Abstract</h2>\n<p>Agreeing on time in a decentralized setting can be challenging: wall clocks may drift between machines, agents can lie about their local times, and it is generally hard to distinguish between malicious intent and just unsynchronized clocks or network latencies.</p>\n<p>Ethereum can be thought of as a global clock that ticks at a rate of 1 tick per ~12 seconds. This tick rate is soft-enforced by the consensus protocol: blocks and attestations produced too early or too late will not be considered valid. But what should we do in order to achieve a granularity lower than 12 seconds? Do we always require a consensus protocol to keep track of time?</p>\n<p>We want to explore these questions in the context of untrusted L2 sequencers, who don’t have any incentive to follow the L2 block schedule that is currently maintained by trusted L2 sequencers, and will likely play various forms of timing games in order to maximize their revenue.</p>\n<p>In this article, we introduce mechanisms to enforce the timeliness, safety and non-extractive ordering of sequencers in a decentralized rollup featuring a <strong>rotating leader mechanism</strong>, without relying on additional consensus, honest majority assumptions or altruism. To do so, we use three key primitives:</p>\n<ol>\n<li>Client-side ordering preferences,</li>\n<li>Ethereum as a global 12s-tick clock,</li>\n<li>Verifiable Delay Functions.</li>\n</ol>\n<p>Lastly, we show the case study of MR-MEV-Boost, a modification of MEV-Boost that enables a variation of based preconfirmations, where the same construction explored can be applied to reduce the timing games of the proposer.</p>\n<h2><a name=\"p-49826-rationale-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-rationale-2\"></a>Rationale</h2>\n<p>Rollup sequencers are entities responsible for ordering (and in most cases, executing) L2 transactions and occasionally updating the L2 state root on the L1. Currently, centralized sequencers benefit from the reputational collateral of the teams building them to maintain five properties:</p>\n<ul>\n<li><strong>Responsiveness</strong>: responding to user transactions with soft commitments / preconfirmations in a <em>timely</em> manner. We want to highlight that this definition includes the timely broadcast of unsafe heads on the rollup peer-to-peer network.</li>\n<li><strong>Non-equivocation (safety)</strong>: adhering to preconfirmation promises when submitting the ordered batch on the L1, which is what will ultimately determine the total ordering of transactions.</li>\n<li><strong>Non-extractive ordering</strong>: not extracting MEV from users by front-running or sandwiching, or by accepting bribes for front-running privileges.</li>\n<li><strong>Liveness</strong>: posting batches to L1 and updating the canonical rollup state regularly.</li>\n<li><strong>Censorship-resistance:</strong> ensuring that no valid transactions are deliberately excluded by the sequencer regardless of the sender, content, or any external factors.</li>\n</ul>\n<p>In this piece we are concerned with how the first four properties can be maintained in a permissionless, untrusted setting. Note that censorship-resistance is ensured by construction: by introducing multiple organizationally distinct sequencers in different geographies and jurisdictions we have a strong guarantee that any transaction will be accepted eventually.</p>\n<p>Consider a decentralized sequencer set <span class=\"math\">S := \\{S_1,\\dots,S_n\\}</span>  with a predictable leader rotation mechanism and a sequencing window corresponding to a known amount of L1 slots. For simplicity, let’s assume <span class=\"math\">S_{i}</span> is the current leader and <span class=\"math\">S_{i+1}</span> is the next one. At any point in time, only one sequencer is active and has a lock over the rollup state.</p>\n<p>Here are two strategies that sequencer <span class=\"math\">S_i</span> can explore to maximize its expected value:</p>\n<p><strong>1. Delaying the inclusion of transactions</strong></p>\n<p>Suppose a user sends a transaction to <span class=\"math\">S_i</span> at a certain L2 slot. Then, the sequencer could wait some time before inserting the transaction into a block in order to extract more MEV with sandwich attacks in collaboration with searchers or by directly front-running the user. In particular, <a href=\"https://www.youtube.com/watch?v=01dnINiLhAk&amp;t=287s\" rel=\"noopener nofollow ugc\">since MEV grows superlinearly with time</a>, it’s not in the sequencer’s best interest to commit early to a transaction. The worst case scenario would be the sequencer delaying inclusion until the sequencer rotation <span class=\"math\">^1</span>.</p>\n<p><strong>2. Not publishing unsafe heads in the rollup peer-to-peer network</strong></p>\n<p>In this setting the sequencer has low incentives to publish the unsafe heads in the rollup network: since L2 blocks are signed by the sequencer (e.g. in <a href=\"https://docs.optimism.io/builders/node-operators/configuration/consensus-config#p2psequencerkey\" rel=\"noopener nofollow ugc\">Optimism</a>), they act as a binding commitment which can be used by users to slash it in case of equivocations.</p>\n<p>This has a major downstream consequence on the UX of the rollup: both the next sequencer and users need to wait until a batch is included to see the latest transactions. For users it means they won’t know the status of their transactions in a timely manner, while the next sequencers risks building blocks on invalid state.</p>\n<p>We will now explore mechanisms to mitigate these behaviours and introduce slashing conditions for sequencers.</p>\n<h2><a name=\"p-49826-primitive-1-transaction-deadlines-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-primitive-1-transaction-deadlines-3\"></a>Primitive 1: Transaction Deadlines</h2>\n<p>We introduce a new EIP-2718 transaction type with an additional field:</p>\n<ul>\n<li><code>deadline</code> - <code>uint256</code> indicating the last L2 block number for which the transaction is considered valid.</li>\n</ul>\n<p>This idea is not entirely new. For instance, the <a href=\"https://limechain.tech/\" rel=\"noopener nofollow ugc\">LimeChain</a> team has explored this in their <a href=\"https://github.com/LimeChain/based-preconfirmations-research/blob/cfc3830c685965fad5e5843533c5586dcb92e873/docs/preconfirmations-for-vanilla-based-rollups.md#preconfirmation-deadline\" rel=\"noopener nofollow ugc\">Vanilla Based Sequencing</a> article. However, in our variant the <code>deadline</code> field is signed as part of the transaction payload and it is not expressed in L1 slots.</p>\n<p>The reasoning behind it is that the sequencer cannot tamper with either the <code>deadline</code> field or <code>block.number</code> (because it is a monotonically increasing counter), and therefore it is easy to modify the L2 derivation pipeline to attribute a fault in case the sequencer inserts the user transaction in a block where <code>block.number &gt; deadline</code>.</p>\n<p>This approach mitigates problem <span class=\"hashtag-raw\">#1</span>. However, it does not in any way solve the <em>responsiveness</em> issue, since sequencers can still delay proposing the block in order to extract more MEV.</p>\n<h2><a name=\"p-49826-primitive-2-ethereum-as-a-global-clock-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-primitive-2-ethereum-as-a-global-clock-4\"></a>Primitive 2: Ethereum as a Global Clock</h2>\n<p>A simple rotating sequencer design would be one where <span class=\"math\">S_i</span> loses the power to settle batches after the end of its sequencing window <span class=\"math\">W_i</span>, which is dictated by an L1 smart contract. However, the sequencer still needs some time to post the batch with the latest L2 blocks. We therefore introduce an <em>inclusion window</em> that is shifted <span class=\"math\">n \\geq 1</span> slots ahead of <span class=\"math\">W_i</span>, where <span class=\"math\">S_i</span> still has time to land rollup batches on L1 with the last L2 blocks, even if the responsibility of sequencing has shifted to <span class=\"math\">S_{i+1}</span>.</p>\n<p>In case of any safety fault, the sequencer should be slashed. If the sequencer has not managed to post all their assigned L2 blocks by the end of its inclusion window, it will forego all associated rewards. Optionally, there could also be penalties for liveness faults. This also helps with the problem of collaboration with the next sequencer, by ensuring that the latest blocks will be known to it within <span class=\"math\">n\\cdot12</span> seconds. Ideally, we’d like to keep <span class=\"math\">n</span> as small as possible with a value of <span class=\"math\">1</span>.</p>\n<p>There are still some potential issues here: getting a transaction included on Ethereum is probabilistic, meaning that you can’t be sure that a transaction you send will actually be included in time. In this context it means that the last batch sent by an honest leader may not be included in the L1 by the end of its inclusion window. This can be helped with two approaches:</p>\n<ul>\n<li>A “based” setup, where the sequencer is also the L1 block proposer and can include any transactions right up to the point they have to propose, or</li>\n<li>Using proposer commitments with a protocol like <a href=\"https://boltprotocol.xyz\" rel=\"noopener nofollow ugc\">Bolt</a>. We expand more on this in the <em>”Further work”</em> section below.</li>\n</ul>\n<p>Note that we assume there is a registry smart contract that can be consulted for the currently active sequencer, i.e. it implements some leader election mechanism and takes care of sequencer bonds along with rewards and penalties. It is up to the rollup governance to decide whether the registry can be fully permissionless or if it should use an allowlist. In case of any misbehaviour, governance would be used to temporarily or permanently remove the sequencer from the allowlist.</p>\n<h2><a name=\"p-49826-primitive-3-verifiable-delay-functions-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-primitive-3-verifiable-delay-functions-5\"></a>Primitive 3: Verifiable Delay Functions</h2>\n<p><a href=\"https://medium.com/iovlabs-innovation-stories/verifiable-delay-functions-8eb6390c5f4\" rel=\"noopener nofollow ugc\">Verifiable Delay Functions</a> (VDFs henceforth) are a cryptographic primitive that allows a prover to show a verifier that a certain amount of time was spent running a function, and do it in a way that the verifier can check the result quickly.</p>\n<p>For instance, consider a cryptographic hash function <span class=\"math\">h</span> and define the application</p>\n<div class=\"math\">\nH(n,s) := (h \\circ \\underset{n\\ times}\\dots \\circ h)(s),\n</div>\n<p>where <span class=\"math\">s</span> is a byte array an <span class=\"math\">n</span> is a natural number.</p>\n<p>Composing (or chaining) hash functions like SHA-256 cannot be trivially sped up using parallel computations, but the solution lacks efficient verification <span class=\"math\">^2</span> as the only way to verify the result is to recompute the composition of functions. This solution appeared as a naïve VDF in <a href=\"https://eprint.iacr.org/2018/601.pdf\" rel=\"noopener nofollow ugc\">Boneh’s paper</a>, and for this reason it is referred to as <em>weak</em>.</p>\n<p>Another example of VDF is <a href=\"https://people.csail.mit.edu/rivest/pubs/RSW96.pdf\" rel=\"noopener nofollow ugc\">iterated squaring over a group of hidden order</a>, with which it is possible to construct time-lock puzzles. We’ll explore the usage of the latter in the next sections.</p>\n<h3><a name=\"p-49826-why-vdfs-tho-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-why-vdfs-tho-6\"></a>Why VDFs tho?</h3>\n<p>VDFs are very useful in the context of sequencing because they can act as a <em>proof of elapsed time</em> for the duration of the block (specifically <code>block_time</code> / <code>max_adversary_speedup</code>, see <em>“Security Considerations”</em>). Consider the following algorithm for the block production pipeline:</p>\n<ol>\n<li>At the beginning of L2 block <span class=\"math\">N</span>, the sequencer starts computing a VDF that takes an L2 block time (or slightly less) to compute for honest players, using the previous block hash as its input.</li>\n<li>After the end of the L2 slot the sequencer builds a block <span class=\"math\">B_N</span> where the header contains the result of the VDF, denoted <span class=\"math\">V_N</span>. We call this <em>sealing</em> a block. This means the block hash digest contains <span class=\"math\">V_N</span>.</li>\n</ol>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/6/8/6802ae3a20554489b1de7ccb7a9ecda502a79c39.png\" data-download-href=\"https://ethresear.ch/uploads/default/6802ae3a20554489b1de7ccb7a9ecda502a79c39\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/6/8/6802ae3a20554489b1de7ccb7a9ecda502a79c39_2_690x317.png\" alt=\"\" data-base62-sha1=\"eQ7oNIzFfBcY49ZF4Xxt37sIgtP\" width=\"690\" height=\"317\" role=\"presentation\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/6/8/6802ae3a20554489b1de7ccb7a9ecda502a79c39_2_690x317.png, https://ethresear.ch/uploads/default/optimized/3X/6/8/6802ae3a20554489b1de7ccb7a9ecda502a79c39_2_1035x475.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/6/8/6802ae3a20554489b1de7ccb7a9ecda502a79c39_2_1380x634.png 2x\" data-dominant-color=\"EFF2F1\"></a></div><p></p>\n<p>This algorithm has the nice property of creating a chain of VDF computations, in some sense analogous to <a href=\"https://solana.com/news/proof-of-history\" rel=\"noopener nofollow ugc\">Solana’s Proof of History</a> from which we inherit the security guarantees. What does this give us in the sequencer context? If we remember that a sequencer has a certain deadline by which it has to post batches set by the L1 slot schedule, we can have the L1 enforce that <em>at least</em> some number of L2 blocks need to be settled. This has two downstream results:</p>\n<ul>\n<li>The sequencer <em>must</em> start producing and sealing blocks as soon as their sequencing window starts. Pairing this with the transaction deadline property results in an upper bound of time for when a transaction can be confirmed. If they don’t follow the block schedule set by the VDF and the L1, they risk not being able to post <em>any</em> batch.</li>\n<li>We mitigate problem <span class=\"hashtag-raw\">#2</span> by taking away the incentive to withhold data (not considering pure griefing attacks): this is because the sequencer cannot tamper with an existing VDF chain, which would require recomputing all the subsequent VDFs and result in an invalid batch.</li>\n</ul>\n<p>In general, for the sake of this post we will consider a generic VDF, provided as a “black box” while keeping the hash chain example in mind which currently has stronger guarantees against ad-hoc hardware such ASICs. See <em>“Security Considerations”</em> below for more insights.</p>\n<h3><a name=\"p-49826-proving-correct-vdfs-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-proving-correct-vdfs-7\"></a>Proving correct VDFs</h3>\n<p>If a sequencer provides an invalid VDF in an L2 block header it should be slashed, and ideally we’d like to ensure this at settlement time. However, recalculating a long hash chain on the EVM is simply unfeasible due to gas costs.</p>\n<p>How to show then that the number of iterations of the VDF is invalid? One way could be to enforce it optimistically (or at settlement, in case of ZK-rollups) by requiring a valid VDF chain output in the derivation pipeline of the rollup. In case of equivocation in an optimistic rollup the sequencer can be challenged using fraud proofs.</p>\n<h3><a name=\"p-49826-hardware-requirements-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-hardware-requirements-8\"></a>Hardware requirements</h3>\n<p>Since by definition VDFs cannot be sped up using parallelism, it follows that computing a VDF can be done by only using a single core of a CPU, and so it does in our block production algorithm.</p>\n<p>This makes it different and way more lightweight compared to most Proof-of-Work consensus algorithms such as Bitcoin’s which requires scanning for a value such that, when hashed with SHA-256, the hash begins with a certain number of zero bits.</p>\n<p>It’s also worth to note that modern CPUs are optimized to compute the SHA-256 hash function. Since 2016 Intel, starting with the <em>Goldmount</em> family of chips, is offering <a href=\"https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sha-extensions.html\" rel=\"noopener nofollow ugc\">SHA Extensions</a> in the <em>Core</em> and <em>Xeon</em> line-ups on selected models which introduces three new instructions specialized in computing different steps of the hash function algorithm more efficiently.</p>\n<p>Lastly, <a href=\"https://www.man.com/single-core-stagnation-and-the-cloud\" rel=\"noopener nofollow ugc\">single-core performance has stagnated over the years</a> indicating that there is a minor benefit in investing in the latest generation of CPUs, thus lowering down the requirements of the system.</p>\n<h2><a name=\"p-49826-case-study-mr-mev-boost-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-case-study-mr-mev-boost-9\"></a>Case Study: MR-MEV-Boost</h2>\n<p><a href=\"https://ethresear.ch/t/based-preconfirmations-with-multi-round-mev-boost/20091\">Multi-Round-MEV-Boost</a>, is a modification of MEV-Boost that enables based preconfirmations by running multiple rounds of MEV-Boost auctions within a single L1 slot. The usage of this primitive is to output after each round a based rollup block built by L2 block builders. As shown in the article, this approach inherits the L1 PBS pipeline and mitigates some of the negative externalities of based preconfirmations as a result.</p>\n<p>Like MEV-Boost, this fork relies on the opted-in proposer to be an auctioneer which ends the sealed auction by calling the <code>getHeader</code> (<a href=\"https://ethereum.github.io/builder-specs/#/Builder/getHeader\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Builder-API</a>) endpoint of the relays. After having signed the sealed bid, the <code>getPayload</code> (<a href=\"https://ethereum.github.io/builder-specs/#/Builder/submitBlindedBlock\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Builder-API</a>) is called by the proposer to receive the actual content of the winning bid and to publish the block in the based rollup network.</p>\n<p>In the original protocol, the end of the auction usually coincides with the end of the L1 slot (more precisely, <a href=\"https://mevboost.pics/\" rel=\"noopener nofollow ugc\">near one second after it</a>); delaying it results in a high risk of not being able to broadcast the block in time to gather all the needed attestation and forgo all its associated rewards. As such, a block time is proposed every twelve seconds with consistency, enforced by Ethereum consensus.</p>\n<p>In contrast, given it consists of multiple rounds happening <em>during</em> the slot, in MR-MEV-Boost an <em>untrusted proposer is incentivized to end the auction seconds later or earlier <span class=\"math\">^{3}</span> according to the incoming bids,</em> in order to extract more more MEV. In the worst case, MR-MEV-Boost will reflect L1 block times. Another consequence of this is an inconsistent slot time for the based rollup. This can be seen as a much more serious form of timing games.</p>\n<p>In the article, the discussed possible solutions to this problem are the following:</p>\n<ol>\n<li>Introduce user incentives: if users determine that a proposer is misbehaving, they stop sending transactions to said proposer.</li>\n<li>Introduce a committee (consensus) to attest to timeliness and maintain slot durations.</li>\n</ol>\n<p>We now argue that a trustless solution that strongly limits the proposer without requiring actions from the user does exist, and it leverages the same construction we used for the VDF-powered block production algorithm in the context of decentralized sequencing.</p>\n<p>The construction is fairly simple and consists of computing a VDF that lasts <span class=\"math\">x := 12/r</span> seconds, where <span class=\"math\">r</span> is the number of rounds in an L1 slot (the L2 block time). The proposer must calculate this VDF using the previous based rollup block hash as public input and, at the end of the round, sending it along with the body of a modified <code>getPayload</code> call. The output of the VDF is then stored in the rollup block header and if invalid can result in slashing the proposer after a successful fraud proof.</p>\n<p>With this approach the amount of time a proposer can delay the end of a round is limited: for instance if the first auction ended one second later then during the last round it won’t be able to provide three seconds of computation for the VDF but two, resulting in an invalid block and consequent slashing <span class=\"math\">^4</span>. This is because in order to start computing a valid VDF, it requires the previous block hash as its input, implying a sealed block.</p>\n<h2><a name=\"p-49826-security-considerations-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-security-considerations-10\"></a>Security Considerations</h2>\n<p><strong>Are VDFs really safe for this purpose?</strong><br>\nSuppose an adversary owns hardware which is capable of computing the VDF faster compared to the baseline of honest players <em>without getting noticed</em> (otherwise the number of iterations for the VDF is adjusted by the protocol). Then, the faster the attacker (<code>max_adversary_speedup</code>), the less our construction would constrain the space of its possible actions. In particular, the sequencer would be able to commit a bit later to blocks and be able to re-organize some of them for extracting more value.</p>\n<p>However, given we don’t need the “fast proving” property, hash-chains have proven to be robust with Solana’s Proof of History and will continue to be at least in the short-term. Also, our security requirements will not be as strict as something that <a href=\"https://ethresear.ch/t/statement-regarding-the-public-report-on-the-analysis-of-minroot/16670\">needs to be enshrined in Ethereum</a> forever.</p>\n<p>Some solutions and directions to get stronger safety guarantees can be found in the <em>”Further work”</em> section below.</p>\n<h2><a name=\"p-49826-current-limitations-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-current-limitations-11\"></a>Current limitations</h2>\n<p><strong>Sequencer credibility</strong></p>\n<p>As with many new services which leverage (re)staking, the credibility of the sequencer has an upper bound which is the amount it has staked: if a MEV opportunity exceeds that, then a rational untrusted actor would prefer to get slashed and take the MEV reward.</p>\n<p><strong>Leader rotation can be a critical moment</strong></p>\n<p>As discussed in the batcher and registry smart contract section, the inclusion window is shifted of one slot forward at minimum compared to the sequencing window. This is needed because of the time required to settle the last batch before rotating leader, but leaves an additional slot time of at least 12 seconds in which the sequencer has room to re-organize the last L2 blocks before publishing them on the rollup peer-to-peer network. As a consequence, liveness is harmed temporarily because <span class=\"math\">S_{i+1}</span> might be building blocks on invalid state if it starts to sequence immediately.</p>\n<p>Lastly, one additional slot might not be enough to settle a batch according to recent data on <a href=\"https://ethresear.ch/t/slot-inclusion-rates-and-blob-market-combinatorics/19817\">slot inclusion rates for blobs</a>. This can be mitigated by leveraging new inclusion preconfirmation protocols, as explained below.</p>\n<p><strong>Sequencer last-look</strong></p>\n<p>Our construction makes very difficult for a sequencer to reorg a block after it has been committed to, however it doesn’t solve front-running in its entirety. In particular, the sequencer may extract value from users transactions while building the block with associated <code>deadline</code> field. A possible solution along with its limitations is explored in the section below.</p>\n<h2><a name=\"p-49826-conclusion-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-conclusion-12\"></a>Conclusion</h2>\n<p>In this article, we explored mechanisms to enforce the timeliness, safety, and non-extractive ordering of untrusted L2 sequencers in a decentralized rollup environment.<br>\nThe primitives discussed ensure that sequencers can act more predictably and fairly, mitigating issues such as transaction delays and data withholding. Moreover, these techniques can reduce trust assumptions for existing single-sequencer rollups, aligning with the concept of rollups functioning as <a href=\"https://vitalik.eth.limo/general/2024/06/30/epochslot.html#what-should-l2s-do\" rel=\"noopener nofollow ugc\">“servers with blockchain scaffolding”</a>. These findings provide a robust framework for the future development of decentralized, secure rollup architectures.</p>\n<h2><a name=\"p-49826-further-work-13\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-further-work-13\"></a>Further work</h2>\n<p><strong>Trusted Execution Environments (TEEs) to ensure the sequencer is not running an ASIC</strong></p>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Trusted_execution_environment\" rel=\"noopener nofollow ugc\">Trusted Execution Environment</a> is a secure area of a CPU, often called <em>enclave</em>, that helps the code and data loaded inside it be protected with respect to confidentiality and integrity.<br>\nIts usage in blockchain protocols is an active area of research, with the main concerns being trusting the hardware manufacturer and the <a href=\"https://en.wikipedia.org/wiki/Software_Guard_Extensions\" rel=\"noopener nofollow ugc\">various vulnerabilities found in the past</a> of some implementations (here’s the <a href=\"https://x.com/_markel___/status/1828112469010596347\" rel=\"noopener nofollow ugc\">latest</a>).<br>\nDepending on the use case these trust assumptions and vulnerabilities might be a deal-breaker. However, in our setting we just need a guarantee that the sequencer is not using specialized hardware for computing the VDF, without caring about possible leakage of confidential data from the enclave or manipulation of the wall clock / monotonic clock.</p>\n<p><strong>Adapt existing anti-ASICs Proof-of-Work algorithms</strong></p>\n<p>The <a href=\"https://www.getmonero.org/resources/about/\" rel=\"noopener nofollow ugc\">Monero</a> blockchain, launched in 2014 as a privacy and untraceable-focused alternative to Bitcoin, uses an ASIC-resistant Proof-of-Work algorithm called <a href=\"https://github.com/tevador/RandomX\" rel=\"noopener nofollow ugc\">RandomX</a>. Quoting their <code>README</code>:</p>\n<blockquote>\n<p>RandomX is a proof-of-work (PoW) algorithm that is optimized for general-purpose CPUs. RandomX uses random code execution (hence the name) together with several memory-hard techniques to minimize the efficiency advantage of specialized hardware.</p>\n</blockquote>\n<p>The algorithm however leverages <a href=\"https://github.com/tevador/RandomX/blob/102f8acf90a7649ada410de5499a7ec62e49e1da/README.md#cpu-performance\" rel=\"noopener nofollow ugc\">some degree of parallelism</a>; it is an interesting research direction whether it can adapted into a single-core version, leading to a new weak-VDF.<br>\nThis approach, while orthogonal to using a TEE, can potentially achieve the same result which is having a guarantee that the sequencer is not using sophisticated hardware.</p>\n<p><strong>Time-lock puzzles to prevent front-running</strong></p>\n<p>As mentioned in the <em>“Current limitations”</em> section, our construction doesn’t limit the problem of sequencer front-running the users. Luckily, this can be solved by requiring users to encrypt sensitive transactions using <a href=\"https://people.csail.mit.edu/rivest/pubs/RSW96.pdf\" rel=\"noopener nofollow ugc\">time-lock puzzles</a>, as we will show in more detail in a separate piece. However, this solution doesn’t come free: encrypted transactions or encrypted mempools can incentive spamming and statistical arbitrage, <a href=\"https://collective.flashbots.net/t/it-s-time-to-talk-about-l2-mev/3593\" rel=\"noopener nofollow ugc\">especially when the protocol fees are not very high</a>.</p>\n<p><strong>Inclusion Preconfirmations and Data Availability layers</strong></p>\n<p>Batch submissions to an L1 contract could be made more efficient by leveraging some of the new preconfirmations protocol like <a href=\"https://boltprotocol.xyz\" rel=\"noopener nofollow ugc\">Bolt</a> by Chainbound or <a href=\"https://docs.primev.xyz/concepts/what-is-mev-commit\" rel=\"noopener nofollow ugc\">MEV-Commit</a> by Primev to have guaranteed inclusion in the same slot. In particular, sequencing windows should end precisely in the slot before one where the proposer is running the aforementioned protocols in order to leverage inclusion commitments.</p>\n<p>Additionally, the batch could be posted into an efficient and lightweight Data Availability layer run by proposers to enforce a deadline of a configurable amount of seconds in the beginning of the slot, otherwise the sequencer would be slashed.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/b/e/bed5956f14947f6e30a081e3064cd2a196897c95.png\" alt=\"\" data-base62-sha1=\"recjREgksTDOyP0hRd7Jx5a9rUx\" width=\"328\" height=\"190\" role=\"presentation\"></p>\n<hr>\n<h2><a name=\"p-49826-footnotes-14\" class=\"anchor\" href=\"https://ethresear.ch#p-49826-footnotes-14\"></a>Footnotes</h2>\n<ol>\n<li>More precisely, if an operator controls multiple subsequent sequencers it could delay inclusion until the last sequencer rotation.</li>\n<li>In Solana, the verification of a SHA-256 chain is actually parallelised but requires dividing a block associated to a ~400ms computation into 32 shreds which are forwarded to the rest of the validators as soon as they’re computed. As such, verification is sped up by computing the intermediate steps of the hash chain in parallel.</li>\n<li>In general, the proposer will end some rounds earlier as a side effect of delaying other rounds. For example, it could force a longer last round to leverage possible L1 &lt;&gt; L2 arbitrage opportunities.</li>\n<li>There is an edge case where the proposer might not be able to compute all the VDFs even if honest, and it is due to the rotation mechanism: since the public input of the VDF must be the previous rollup block hash, during rotation the next leader will need some time before hearing the block from the rollup network, potentially more than 1s. This could lead the next proposer to be late in computing the VDFs.<br>\nTo reduce this risk, the next proposer could rely on various parties to receive this information such as streaming services and/or trusted relays.</li>\n</ol>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/exploring-verifiable-continuous-sequencing-with-delay-functions/20362\">Read full topic</a></p>","link":"https://ethresear.ch/t/exploring-verifiable-continuous-sequencing-with-delay-functions/20362","pubDate":"Fri, 30 Aug 2024 14:29:49 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20362"},"source":{"@url":"https://ethresear.ch/t/exploring-verifiable-continuous-sequencing-with-delay-functions/20362.rss","#text":"Exploring Verifiable Continuous Sequencing with Delay Functions"},"filter":false},{"title":"PeerDas Documentation","dc:creator":"arantxazapico","category":"Sharding","description":"<p>Joint work with <a class=\"mention\" href=\"https://ethresear.ch/u/b-wagn\">@b-wagn</a>, <a href=\"https://eprint.iacr.org/2024/1362.pdf\" rel=\"noopener nofollow ugc\">A Documentation of Ethereum’s PeerDAS</a></p>\n<p>The long-term vision of the Ethereum community includes a comprehensive data availability protocol using polynomial commitments and tensor codes. As the next step towards this vision, an intermediate solution called PeerDAS is about to integrated, to bridge the way to the full protocol. With PeerDAS soon becoming an integral part of Ethereum’s consensus layer, understanding its security guarantees is essential.</p>\n<p>The linked document aims to describe the cryptography used in PeerDAS in a manner accessible to the cryptographic community, encouraging innovation and improvements, and to explicitly state the security guarantees of PeerDAS. We focus on PeerDAS as described in Ethereum’s consensus specifications [<a href=\"https://github.com/ethereum/consensus-specs/commit/54093964c95fbd2e48be5de672e3baae8531a964\" rel=\"noopener nofollow ugc\">Eth24a</a>, <a href=\"https://github.com/ethereum/consensus-specs/tree/dev/specs/_features/eip7594\" rel=\"noopener nofollow ugc\">Eth24b</a>].</p>\n<p>Our intention is two-fold: first, we aim to provide a description of the cryptography used in PeerDAS that is accessible to the cryptographic community, potentially leading to new ideas and<br>\nimprovements that can be incorporated in the future. Second, we want to explicitly state the security and efficiency guarantees of PeerDAS. In terms of security, this document justifies the following claim:<br>\n<strong>Theorem 1</strong> (Main Theorem, Informal): <em>Assuming plausible cryptographic hardness assumptions, PeerDAS is a secure data availability sampling scheme in the algebraic group model, according to the definition in [<a href=\"https://eprint.iacr.org/2023/1079\" rel=\"noopener nofollow ugc\">HASW23</a>].</em></p>\n<p>We hope to receive feedback from the community to make further improvements to this document</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/peerdas-documentation/20361\">Read full topic</a></p>","link":"https://ethresear.ch/t/peerdas-documentation/20361","pubDate":"Fri, 30 Aug 2024 12:56:35 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20361"},"source":{"@url":"https://ethresear.ch/t/peerdas-documentation/20361.rss","#text":"PeerDas Documentation"},"filter":false},{"title":"Accessible Encryption for Ethereum Rollups with Fairomon","dc:creator":"shakeshack","category":"Layer 2","description":"<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/5/f/5fa5f78d2b4b44708e03133cf29d1de097113e36.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/5fa5f78d2b4b44708e03133cf29d1de097113e36\" title=\"690x435\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/5/f/5fa5f78d2b4b44708e03133cf29d1de097113e36_2_690x435.jpeg\" alt=\"690x435\" data-base62-sha1=\"dE8WqnkBYhOZifIQKA4YkTkYm1w\" width=\"690\" height=\"435\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/5/f/5fa5f78d2b4b44708e03133cf29d1de097113e36_2_690x435.jpeg, https://ethresear.ch/uploads/default/optimized/3X/5/f/5fa5f78d2b4b44708e03133cf29d1de097113e36_2_1035x652.jpeg 1.5x, https://ethresear.ch/uploads/default/original/3X/5/f/5fa5f78d2b4b44708e03133cf29d1de097113e36.jpeg 2x\" data-dominant-color=\"B5B5B8\"></a></div><p></p>\n<p>Co-authored by <a class=\"mention\" href=\"https://ethresear.ch/u/pememoni\">@pememoni</a> and <a class=\"mention\" href=\"https://ethresear.ch/u/shakeshack\">@shakeshack</a>. With special thanks to the rest of the Fairblock team!</p>\n<p>Fairomon is a special fairy type pokemon that combines the work of Fairblock and Monomer - a framework that enables builders to create Ethereum rollups with built-in encryption with minimal lift.</p>\n<h1><a name=\"p-49798-background-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49798-background-1\"></a>Background</h1>\n<p>Monomer is a rollup framework that enables Cosmos SDK app chains to be deployed as rollups on Ethereum. Internally, Monomer is built on top of the OP stack relying on it for chain derivation and settlement while supporting an ABCI interface for a Cosmos SDK app chain to be deployed on top. Fairblock provides threshold MPC encryption that can be utilized in Monomer rollups through a module built for Cosmos SDK chains.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/2/3/2311821ac2a3b134e2df081bbf12f2d71f2c31cc.png\" data-download-href=\"https://ethresear.ch/uploads/default/2311821ac2a3b134e2df081bbf12f2d71f2c31cc\" title=\"451x500\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/2/3/2311821ac2a3b134e2df081bbf12f2d71f2c31cc_2_451x500.png\" alt=\"451x500\" data-base62-sha1=\"50edNT7A2IU2M9DMxkY6SJ1Swxe\" width=\"451\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/2/3/2311821ac2a3b134e2df081bbf12f2d71f2c31cc_2_451x500.png, https://ethresear.ch/uploads/default/optimized/3X/2/3/2311821ac2a3b134e2df081bbf12f2d71f2c31cc_2_676x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/2/3/2311821ac2a3b134e2df081bbf12f2d71f2c31cc_2_902x1000.png 2x\" data-dominant-color=\"F8F8F8\"></a></div><p></p>\n<p>Fairblock enables blockchain developers to integrate pre-execution encryption. This pre-execution encryption is made possible through their threshold MPC network that delivers identity-based encryption (IBE), and soon custom encryption schemes, to partner chains. Fairblock’s MPC network, called Fairyring, generates threshold encryption and decryption keys for each supported Monomer rollup, while the rollups themselves receive and process encrypted transactions natively.</p>\n<h1><a name=\"p-49798-how-it-works-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49798-how-it-works-2\"></a>How it Works</h1>\n<p>FairyRing uses decentralized key generation to issue a master secret key (MSK) for each epoch (every 100 blocks). From each MSK, a master public key (MPK) can be derived. Once the MPK is derived, it is relayed to a Monomer chain where it will be used to encrypt each requested transaction. In parallel, the MSK is split into equal shares for the amount of FairyRing validators participating in the network. For each request for decryption, FairyRing validators use their share of the MSK to collectively derive the associated private keys.</p>\n<p>In threshold IBE, users or developers can program the decryption conditions for transactions. Onchain conditions that could trigger decryption could be a block height, the price of an asset, a smart contract call, verification of a ZK proof, or the end of a governance poll, for example. Identity-based encryption allows for the programmability of decryption and allows for decryption to be triggered by “IDs,” which can be either onchain conditions or on/offchain identifiers or attributes that certain wallets prove ownership of.</p>\n<h1><a name=\"p-49798-whats-possible-with-fairomon-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49798-whats-possible-with-fairomon-3\"></a>What’s Possible with Fairomon</h1>\n<p>MPC encryption can make a number of previously inaccessible applications possible within rollups, most notably encrypted mempools, censorship-resistant sequencing, and DeFi and gaming apps such as encrypted orders, leaderless NFT auctions, ID-gated content, and highest-hand-wins card games like blackjack.</p>\n<p>The transaction flow for an application is as follows:</p>\n<ul>\n<li>User submits an encrypted tx and decryption condition (e.g. target height) to an app</li>\n<li>Chain receives encrypted txs in mempool</li>\n<li>Encrypted txs are sorted by target heights and ordering within a block is committed to inside of the integrated x/pep module</li>\n<li>When target height or decryption condition is reached, the app chain receives decryption key from the Fairyring chain</li>\n<li>Encrypted txs are decrypted and executed inside the BeginBlock method of the x/pep module</li>\n</ul>\n<p>See the architecture diagram below for a detailed description of how Fairyring integrates with a Monomer appchain.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/7/2/723cc342b05947059263449d26d5e63a0010c14a.png\" data-download-href=\"https://ethresear.ch/uploads/default/723cc342b05947059263449d26d5e63a0010c14a\" title=\"690x147\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/7/2/723cc342b05947059263449d26d5e63a0010c14a_2_690x147.png\" alt=\"690x147\" data-base62-sha1=\"giAC8NOqAwl6za4KBt4x9f9JiJk\" width=\"690\" height=\"147\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/7/2/723cc342b05947059263449d26d5e63a0010c14a_2_690x147.png, https://ethresear.ch/uploads/default/optimized/3X/7/2/723cc342b05947059263449d26d5e63a0010c14a_2_1035x220.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/7/2/723cc342b05947059263449d26d5e63a0010c14a_2_1380x294.png 2x\" data-dominant-color=\"F3F2EF\"></a></div><p></p>\n<p>Monomer links:</p>\n<ul>\n<li><a href=\"https://github.com/polymerdao/monomer\" rel=\"noopener nofollow ugc\">Github</a></li>\n<li><a href=\"https://github.com/polymerdao/monomer/tree/main/doc\" rel=\"noopener nofollow ugc\">Docs</a></li>\n</ul>\n<p>Fairblock links:</p>\n<ul>\n<li>\n<p><a href=\"https://www.fairblock.network/\" rel=\"noopener nofollow ugc\">Website</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/Fairblock\" rel=\"noopener nofollow ugc\">Github</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.fairblock.network/docs/basics/overview\" rel=\"noopener nofollow ugc\">Docs</a></p>\n</li>\n</ul>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/accessible-encryption-for-ethereum-rollups-with-fairomon/20349\">Read full topic</a></p>","link":"https://ethresear.ch/t/accessible-encryption-for-ethereum-rollups-with-fairomon/20349","pubDate":"Wed, 28 Aug 2024 15:45:36 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20349"},"source":{"@url":"https://ethresear.ch/t/accessible-encryption-for-ethereum-rollups-with-fairomon/20349.rss","#text":"Accessible Encryption for Ethereum Rollups with Fairomon"},"filter":false},{"title":"Outdated encryption stored on blockchain","dc:creator":"knev","category":"Security","description":"<p>Please pardon my ignorance. I’ve read several publications related to blockchain being used in healthcare, construction and the like. Many of these publications state that blockchain allows the storage of secured data.</p>\n<p>My question is this: If data is “securely” stored on blockchain (I assume encrypted) and the encryption algorithm LATER (after long-term usage) is proven to be “cryptographically broken” (e.g., SHA-1) …</p>\n<ul>\n<li>does this not mean all “secured” data on the blockchain using that algorithm is suddenly public?</li>\n<li>are there steps that can be taken to re-encrypt the data to avoid the massive leak of data?</li>\n</ul>\n<p>Kind regards.</p>\n            <p><small>7 posts - 4 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/outdated-encryption-stored-on-blockchain/20346\">Read full topic</a></p>","link":"https://ethresear.ch/t/outdated-encryption-stored-on-blockchain/20346","pubDate":"Wed, 28 Aug 2024 12:21:08 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20346"},"source":{"@url":"https://ethresear.ch/t/outdated-encryption-stored-on-blockchain/20346.rss","#text":"Outdated encryption stored on blockchain"},"filter":false},{"title":"Does multi-block MEV exist? Analysis of 2 years of MEV Data","dc:creator":"pascalst","category":"Economics","description":"<h1><a name=\"p-49786-does-multi-block-mev-exist-analysis-of-2-years-of-mev-data-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-does-multi-block-mev-exist-analysis-of-2-years-of-mev-data-1\"></a>Does multi-block MEV exist? Analysis of 2 years of MEV Data</h1>\n<p><em>by <a href=\"https://x.com/pascalstichler\" rel=\"noopener nofollow ugc\">Pascal Stichler</a> (<a href=\"https://www.ephema.io/\" rel=\"noopener nofollow ugc\">ephema labs</a>)</em></p>\n<p><em>Many thanks to <a href=\"https://x.com/nero_eth\" rel=\"noopener nofollow ugc\">Toni</a>, <a href=\"https://x.com/_julianma\" rel=\"noopener nofollow ugc\">Julian</a>, <a href=\"https://x.com/sui414\" rel=\"noopener nofollow ugc\">Danning</a>, <a href=\"https://x.com/cshg0x\" rel=\"noopener nofollow ugc\">Chris</a> and <a href=\"https://x.com/marc_nitzsche\" rel=\"noopener nofollow ugc\">Marc</a> for feedback and especially to <a href=\"https://x.com/barnabemonnot\" rel=\"noopener nofollow ugc\">Barnabé</a> for nudging the research in the first place and continuous feedback.</em></p>\n<h2><a name=\"p-49786-tldr-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-tldr-2\"></a><em>TL;DR</em></h2>\n<ul>\n<li>We looked at proposer-builder data and MEV-Boost payment data since the merge (September 2022) to identify patterns of multi-block MEV.</li>\n<li>We observe fewer multi-slot sequences of builders than a random Monte Carlo simulation would predict. The longest observed multi-slot sequence is 25 slots.</li>\n<li>Average MEV-Boost payments increase for longer consecutive sequences by the same builder from ~0.05 ETH for single slots to ~0.08 ETH for nine consecutive slots.</li>\n<li>In longer sequences, the payment per slot increases slightly with later slots. This indicates that builders bid higher to get longer sequences or the first slot after a longer sequence.</li>\n<li>There is a weak positive autocorrelation between subsequent MEV-Boost payments. This contradicts the hypothesis that there are generally periods of low and high MEV.</li>\n<li>Comparing builders with periods of low and high base fee volatility shows a low correlation. This indicates that no builder specialization based on base fee volatility has developed yet.</li>\n</ul>\n<p><em>The detailed results can be found in the Jupyter notebook on <a href=\"https://github.com/ephema/MEVBoost-Analysis/blob/762b7626c57cc6a1c350059b41e272a70cda49cf/%5Bephema%5D_MEV_Boost_Multi_Slot_MEV_Analysis.ipynb\" rel=\"noopener nofollow ugc\">Github </a>or <a href=\"https://colab.research.google.com/drive/1kKM-da6xP7St8puzPuyn1Ndag6a6wsg3?usp=sharing\" rel=\"noopener nofollow ugc\">Google Colab</a>.</em></p>\n<h2><a name=\"p-49786-background-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-background-3\"></a>Background</h2>\n<p>Multi-block Maximal Extractable Value (MMEV) occurs when one party controls more than one consecutive block. It was first introduced in 2021 by [<a href=\"https://arxiv.org/pdf/2109.04347\" rel=\"noopener nofollow ugc\">1</a>] as k-MEV and further elaborated by [<a href=\"https://eprint.iacr.org/2022/445.pdf\" rel=\"noopener nofollow ugc\">2</a>]. It is commonly assumed that controlling multiple slots in a sequence allows to capture significantly more MEV than controlling them individually. This derives from MEV accruing superlinearly over time. The <a href=\"https://collective.flashbots.net/t/multi-block-mev/457\" rel=\"noopener nofollow ugc\">most discussed</a> multi-block MEV strategies include <a href=\"https://eprint.iacr.org/2022/445.pdf\" rel=\"noopener nofollow ugc\">TWAP oracle manipulation attacks</a> on DEXes and producing forced liquidations by price manipulation.</p>\n<p>After the merge, [<a href=\"https://arxiv.org/pdf/2303.04430\" rel=\"noopener nofollow ugc\">3</a>] have looked into the first four months of data on multi-block MEV and summarized it as <em>“preliminary and non-conclusive results, indicating [that] builders employ super-linear bidding strategies to secure consecutive block space\"</em>.</p>\n<p>With the recent Attester-Proposer-Separation (APS) and pre-confirmation discussions, multi-block MEV has become more of a pressing issue again as it might be prohibitive for some of the proposed designs (For a more in-depth overview, we’ve created a <a href=\"https://miro.com/app/board/uXjVK07aBCU=/?share_link_id=220296247588\" rel=\"noopener nofollow ugc\">diagram of recently proposed mechanism designs</a> and also <a href=\"https://x.com/mikeneuder\" rel=\"noopener nofollow ugc\">Mike Neuder</a> lately gave a <a href=\"https://www.youtube.com/watch?v=ToVi-zsiE4M\" rel=\"noopener nofollow ugc\">comprehensive overview</a>).</p>\n<h2><a name=\"p-49786-methodology-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-methodology-4\"></a>Methodology</h2>\n<p>In order to get a better understanding of the historical prevalence of multi-block MEV, we decided to look at all slots from the Merge in September ‘22 until May ‘24 (totalling roughly 4.3 million slots) and analyze the corresponding data on validators and builders and on MEV-boost payments (if applicable). The scope was to identify patterns of unusual consecutive slot sequences and accompanying MEV values. <a href=\"https://mevboost.pics/data.html\" rel=\"noopener nofollow ugc\">The data</a> has been kindly provided by Toni Wahrstätter and contains information per slot on relay, builder pubkey, proposer pubkey and MEV-Boost value as well as a builder pubkey and validator pubkey mapping. In the labeling of validators for our purposes staking pool providers such as Lido or Rocket Pool are treated as one entity.</p>\n<p>MEV-Boost payments are used as a proxy for the MEV per block. We acknowledge that this is only a non-perfect approximation. The ascending MEV-Boost first-price auction by its nature of being public essentially functions like a second price + 1 wei auction (thanks to Julian for pointing this out!). Hence, we strictly speaking only get an estimate of the intrinsic value of the second highest bidder. However, as [<a href=\"https://arxiv.org/pdf/2405.01329\" rel=\"noopener nofollow ugc\">4</a>] have observed more than 88% of MEV-Boost auctions were competitive and [<a href=\"https://arxiv.org/pdf/2407.13931\" rel=\"noopener nofollow ugc\">5</a>] concluded that the average profit margin per top three builder is between 1% and 5.4%, further indicating a competitive market between the top builders. Based on this, despite the limitations we deem it feasible to use the MEV-Boost payments as an approximation for the generated MEV per block.</p>\n<p>To establish a baseline of expected multi-slot sequences, a Monte Carlo simulation was conducted. In this simulation, builders were randomly assigned to each slot within the specified time period, based on their observed daily market share during that period. The frequency of consecutive slots, ranging in length from 1 to 25 (the longest observed sequence in the empirical data), was recorded. This procedure was repeated 100 times, and the average was taken. We decided to use daily market shares for the main analysis as in the investigated time period market shares have strongly shifted [4]. For comparison we also ran the analysis on monthly and overall market shares.</p>\n<p>Further, base fee volatility data has been included to cross-check effects of low and high-volatility periods. Previous research (e.g. [<a href=\"https://arxiv.org/pdf/2305.19150\" rel=\"noopener nofollow ugc\">6</a>] &amp; [<a href=\"https://arxiv.org/pdf/2401.01622\" rel=\"noopener nofollow ugc\">7</a>]) has focused on token price volatility effects based on CEX-prices. As we are interested in low- and high-MEV environments, we deem base fee volatility for our use case more fitting, as it is driven by empty or full blocks which are at least partially a result of the prevalence of MEV opportunities.</p>\n<h2><a name=\"p-49786-empirical-findings-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-empirical-findings-5\"></a>Empirical Findings</h2>\n<h3><a name=\"p-49786-finding-1-fewer-multi-slot-sequences-exist-than-assumed-by-random-distribution-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-finding-1-fewer-multi-slot-sequences-exist-than-assumed-by-random-distribution-6\"></a>Finding 1: Fewer multi-slot sequences exist than assumed by random distribution</h3>\n<p><strong></strong></p><div class=\"lightbox-wrapper\"><strong><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/6/b6ab4921507e70c619d5121b5abf611e67e2138f.png\" data-download-href=\"https://ethresear.ch/uploads/default/b6ab4921507e70c619d5121b5abf611e67e2138f\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/6/b6ab4921507e70c619d5121b5abf611e67e2138f_2_533x426.png\" alt=\"\" data-base62-sha1=\"q3XSoYCSA2iCGImNM9PoiLu7vfF\" width=\"533\" height=\"426\" role=\"presentation\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/6/b6ab4921507e70c619d5121b5abf611e67e2138f_2_533x426.png, https://ethresear.ch/uploads/default/optimized/3X/b/6/b6ab4921507e70c619d5121b5abf611e67e2138f_2_799x639.png 1.5x, https://ethresear.ch/uploads/default/original/3X/b/6/b6ab4921507e70c619d5121b5abf611e67e2138f.png 2x\" data-dominant-color=\"EFEEED\"></a></strong></div><br>\n<em>Figure 1: Comparison of statistically expected vs. observed multi-slot sequences (note that slots &gt; 25 have been summarized in slot 25 for brevity)</em><p></p>\n<p>Firstly, the prevalence of multi-slot sequences with the same builder proposing the block was investigated to determine if they are more common than would be expected by chance.</p>\n<p>Comparing the results of the Monte Carlo simulation as a baseline in expected distribution (blue) with the observed distribution (orange), it can be seen that significantly fewer multi-slot sequences occur than expected (Figure 1). The longest observed sequence was 25 slots and the longest sequence with the same validator (Lido) and builder (BeaverBuild) was 11 consecutive slots on March 4th, 2024 (more details with descriptive statistics in the <a href=\"https://colab.research.google.com/drive/1kKM-da6xP7St8puzPuyn1Ndag6a6wsg3#scrollTo=5bje4mIWzELq\" rel=\"noopener nofollow ugc\">notebook</a>). Running the same simulation on monthly or total market shares in the time period, the observation shifts to having more longer sequences than expected, however we attribute this to the statistical effect of changing market shares. A detailed analysis can be run in the <a href=\"https://colab.research.google.com/drive/1kKM-da6xP7St8puzPuyn1Ndag6a6wsg3#scrollTo=mz4CTqCQInTv\" rel=\"noopener nofollow ugc\">notebook</a> or be provided upon request.</p>\n<p>In the next step, to understand this in a more-fine-grained manner, the values are compared for each of the top 10 builders based on market shares. Therefore, for each builder, the difference between expected and observed occurrences of multi-slot sequences are plotted with the size of the bubble indicating the delta in Figure 2. The expected occurrences are based on the results of the Monte Carlo simulation. Red bubbles indicate a positive deviation (more observed slots than expected), while blue indicates a negative deviation. Green dots indicate values in line with the expectation. In Figure 2 it is shown in absolute numbers, in the <a href=\"https://colab.research.google.com/drive/1kKM-da6xP7St8puzPuyn1Ndag6a6wsg3#scrollTo=cd07f078-f646-450c-b610-9e91012111f2&amp;line=3&amp;uniqifier=1\" rel=\"noopener nofollow ugc\">notebook</a> it can also be seen on a relative scale.</p>\n<p><strong></strong></p><div class=\"lightbox-wrapper\"><strong><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/e/9/e94454973c4bf844c96e0a1735409a130a0983dd.png\" data-download-href=\"https://ethresear.ch/uploads/default/e94454973c4bf844c96e0a1735409a130a0983dd\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/e/9/e94454973c4bf844c96e0a1735409a130a0983dd_2_628x419.png\" alt=\"\" data-base62-sha1=\"xhzEauFL5pYwNguH7QOHbym4ba5\" width=\"628\" height=\"419\" role=\"presentation\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/e/9/e94454973c4bf844c96e0a1735409a130a0983dd_2_628x419.png, https://ethresear.ch/uploads/default/optimized/3X/e/9/e94454973c4bf844c96e0a1735409a130a0983dd_2_942x628.png 1.5x, https://ethresear.ch/uploads/default/original/3X/e/9/e94454973c4bf844c96e0a1735409a130a0983dd.png 2x\" data-dominant-color=\"F0F2F1\"></a></strong></div><br>\n<em>Image 2: Deviations between expected (Monte Carlo simulation) and observed multi-slot frequencies per builder</em><p></p>\n<p>It can be observed in the relative as well as in the absolute deviation that for the top builders there are more single slot sequences than expected with the exception of ETH-Builder, f1b and Blocknative. For multi-slot sequences with two or more slots, almost all top 10 builders have less than expected. This shows that the trend is not limited to singular entities but derives more from the general market structure.</p>\n<h3><a name=\"p-49786-finding-2-payments-for-multi-slot-sequences-are-higher-on-average-than-for-single-slots-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-finding-2-payments-for-multi-slot-sequences-are-higher-on-average-than-for-single-slots-7\"></a>Finding 2: Payments for multi-slot sequences are higher on average than for single slots</h3>\n<p>To understand if multi-slot sequences are valuable, we looked into MEV-Boost payments and compared single-slot to multi-slot sequences (Figure 3).</p>\n<p><strong><img src=\"https://ethresear.ch/uploads/default/original/3X/b/5/b570ac276a9b9dc76883e6e89489c8792b0186e3.png\" alt=\"\" data-base62-sha1=\"pT5OX4pSyEtnUEhV9xaSdpAtBo7\" width=\"467\" height=\"342\" role=\"presentation\"></strong><br>\n<em>Figure 3: Average MEV-Boost payments per Sequence Length</em></p>\n<p>It can be observed that in accordance with previous work of [3], we observe higher average MEV payouts for longer consecutive sequences (from about 0.05 ETH for single slot sequences to around 0.08 ETH for sequences with nine consecutive slots). Note that the gray numbers in Figure 3 provide the sample size for each slot length. So it can be observed that the longer the sequence, almost linearly the average MEV-boost payment per slot in the sequence rises. At this stage of the research we can only speculate why this is the case. It could be driven by a higher value in longer consecutive sequences, but also by alternative effects. For example, Julian rightfully pointed out it could also be driven by an increasing intrinsic value for the second highest-bidder due to accumulating MEV in private order flow and the intrinsic valuation of the winning bidder remains constant. Or as Danning suggested, it might be driven by certain types of proprietary order flow (e.g. CEX-DEX arbitrage) being more valuable in certain time periods (e.g. volatile periods) leading to more consecutive sequences as well as higher MEV-Boost payments on average. For a more comprehensive answer and a more in-depth understanding, an analysis on the true block value (builder profits plus proposer payments) and potentially on individual tx level is necessary. We leave this open for future research.</p>\n<p>This trend also holds when plotting the average payments for each individual builder. The results on this are shown in the <a href=\"https://colab.research.google.com/drive/1kKM-da6xP7St8puzPuyn1Ndag6a6wsg3#scrollTo=e673f535-1bad-41aa-b617-fcdeee234f01&amp;line=3&amp;uniqifier=1\" rel=\"noopener nofollow ugc\">notebook</a>.</p>\n<h3><a name=\"p-49786-finding-3-per-slot-payments-also-increase-with-longer-sequences-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-finding-3-per-slot-payments-also-increase-with-longer-sequences-8\"></a>Finding 3: Per Slot Payments also increase with longer sequences</h3>\n<p>Supplementary to the absolute average payment, we also looked into the payment per slot position in longer sequences (Figure 4). E.g. how much was on average paid for the third position in a longer sequence.</p>\n<p><strong><img src=\"https://ethresear.ch/uploads/default/original/3X/3/9/3910c4ca760a17b0ae0a9ec76bb90d27155b5e42.png\" alt=\"\" data-base62-sha1=\"88P8QepGXY3Oj7cs6LD3seQ38SC\" width=\"428\" height=\"333\" role=\"presentation\"></strong><br>\n<em>Figure 4: Average MEV-Boost payments per Sequence Position</em></p>\n<p>Also in the payment per slot analysis a similar trend can be observed, however less prevalent. This suggests that there is slight value in longer sequences, however builders are not willing to bid significantly more for longer consecutive sequences or the first slot after a longer sequence.</p>\n<p>This indicates for us that, at least so far, multi-slot strategies are not applied systematically. In this case, we expect builders would need to pay significantly higher values for later slots to ensure to capture the MEV opportunity prepared earlier.</p>\n<h3><a name=\"p-49786-finding-4-low-auto-correlation-between-consecutive-mev-boost-payments-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-finding-4-low-auto-correlation-between-consecutive-mev-boost-payments-9\"></a>Finding 4: Low auto-correlation between consecutive MEV-Boost payments</h3>\n<p><strong></strong></p><div class=\"lightbox-wrapper\"><strong><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/9/d/9db050ae9f5aa540ea6f3c5b6270dee27e111380.png\" data-download-href=\"https://ethresear.ch/uploads/default/9db050ae9f5aa540ea6f3c5b6270dee27e111380\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/9/d/9db050ae9f5aa540ea6f3c5b6270dee27e111380_2_533x321.png\" alt=\"\" data-base62-sha1=\"muYIpGffs7YaMIKuLvKX3WKE9bi\" width=\"533\" height=\"321\" role=\"presentation\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/9/d/9db050ae9f5aa540ea6f3c5b6270dee27e111380_2_533x321.png, https://ethresear.ch/uploads/default/optimized/3X/9/d/9db050ae9f5aa540ea6f3c5b6270dee27e111380_2_799x481.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/9/d/9db050ae9f5aa540ea6f3c5b6270dee27e111380_2_1066x642.png 2x\" data-dominant-color=\"F7F6F5\"></a></strong></div><br>\n<em>Figure 5: Auto-correlation of MEV-Boost Payments</em><p></p>\n<p>We examined auto-correlation in the MEV boost payments to understand if historical MEV data allows us to forecast future MEV and to see if there are low- and high-MEV periods (Figure 5).</p>\n<p>Overall, it can be observed that within the first few slots the correlation strongly decreases until an offset of 2 to 3 slots (we tested for Pearson Correlation Coefficient, Spearman’s Rank Correlation Coefficient and Kendall’s Rank Correlation Coefficient). Based on this we can conclude that not more than one to three slots in advance the MEV value can be moderately predicted based on historical data.</p>\n<p>Further interesting observations can be made. As expected, the Spearman and Kendall correlation coefficients are significantly higher than the Pearson correlation coefficient, underlining that the data is not following a normal distribution but being skewed and having large outliers. Additionally, it is interesting to note that for the Pearson correlation coefficient, the complete data set and the top 50% quantile dataset behave similarly, which is not the case for the Spearman and Kendall coefficients. This might be an indicator that the rank ordering for the lower 50% quantile can be more reliably predicted, further underlying that high MEV values are volatile and spiky, hence difficult to predict.</p>\n<h3><a name=\"p-49786-finding-5-no-indication-of-builder-specialization-on-low-or-high-base-fee-volatility-environment-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-finding-5-no-indication-of-builder-specialization-on-low-or-high-base-fee-volatility-environment-10\"></a>Finding 5: No indication of builder specialization on low- or high base fee volatility environment</h3>\n<p>Previous research (e.g. [6] &amp; [7]) has found that certain builders specialize in low- or high token price volatility environments, with volatility being measured on CEX-price changes. Further, [5] observe that different builders have different strategies with some focusing on high-value blocks while others on gaining market share in low-MEV blocks.</p>\n<p>Complementary, to determine whether low or high base fee volatility impacts (multi-block) MEV, we analyzed changes in base fee data to identify periods of high volatility. The base fee fluctuations are driven by whether the gas usage in the previous block was below or above the gas target, as defined by <a href=\"https://eips.ethereum.org/EIPS/eip-1559\" rel=\"noopener nofollow ugc\">EIP-1559</a>. To identify high volatility environments, we employed two methods: (i) a more naive approach that calculated price changes per slot, classifying the highest and lowest (negative) 10% of these changes as high volatility periods, with the remaining 80 % of slots being categorized as low volatility. Consequently, high volatility blocks occur following a block with either minimal or significant MEV and/or priority tips. (ii) Secondly, the Garman-Klass volatility [<a href=\"https://arxiv.org/pdf/0807.3492\" rel=\"noopener nofollow ugc\">8</a>] was calculated on an epoch basis, with slots in the top 20% of GK values designated as high volatility. This approach allows us to examine longer periods characterized by minimal or significant MEV and/or priority tips.</p>\n<p>Initial correlation analysis shows only a low correlation between low and high volatile periods and the respective builders (<a href=\"https://en.wikipedia.org/wiki/Cram%C3%A9r%27s_V\" rel=\"noopener nofollow ugc\">Cramér’s V</a> for the naive approach 0.0664 and for the Garman-Klass 0.0772). This indicates that there seems to be no builder specialization based on the volatility environment of the base fee. So, it can be observed that in contrast to token price volatility for base price volatility there seems to not have a specialization of builders developed (yet). Further research is needed to elaborate on this first finding.</p>\n<h2><a name=\"p-49786-limitations-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-limitations-11\"></a>Limitations</h2>\n<p>The research presented here is intended as an initial exploratory analysis of the data rather than a comprehensive study. It is important to note several limitations that affect the scope and conclusions of this analysis. Firstly, it is limited by the considered data set being publicly available MEV-Boost payments data. This leaves out roughly 10 % of non-MEV-Boost facilitated blocks and it does not reflect potential private off-chain agreements. Additionally, the data was partially incomplete and in other parts contained duplicate information (see the <a href=\"https://colab.research.google.com/drive/1kKM-da6xP7St8puzPuyn1Ndag6a6wsg3#scrollTo=0d986969-2492-49ac-ad92-8ff78e2a7fe1&amp;line=2&amp;uniqifier=1\" rel=\"noopener nofollow ugc\">notebook</a> for details). Further, missed slots have been excluded so far, a more detailed analysis in the future might focus on the particular effects missed slots have on the subsequent MEV. Lastly, as outlined in the methodology section, using MEV-Boost payments is only a proxy for captured MEV and the competitive metric used in [4] is only partially applicable for our use case.</p>\n<p>As outlined in section Finding 2 it currently can only be speculated about the causation of the increasing average MEV-Boost payouts. Furthermore, running the analysis on the true block value (proposer payment plus builder profits) might generate further insights and solidify the research findings.</p>\n<p>On the frequency analysis, the approach contains somewhat a chicken and egg-problem. The Monte Carlo simulation is run on market shares, while the market shares potentially derive from multi-slot sequences. We see a daily time window as an appropriate balance between precision and the need to filter out isolated effects, although this can be critically challenged.</p>\n<h2><a name=\"p-49786-conclusions-12\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-conclusions-12\"></a>Conclusions</h2>\n<p>Analyzing block meta-data since the merge, we observe that multi-slot sequences occur less frequently than statistically expected. Further, we observe that the average payments for longer multi-slot sequences increase with the sequence length. Similarly, the payments per slot position in longer sequences also slightly rise. This might indicate that there is generally value in longer consecutive sequences. However, considering the only slight increase in value and the fewer observed multi-slot sequences than expected we so far see no indication of deliberate multi-slot MEV strategies being deployed. Also on individual builder level we currently don’t observe strong deviations from expected distributions. This may also stem from the fact that in the current PBS mechanism, with MEV-Boost operating as a just-in-time (JIT) block auction, creating multi-block MEV opportunities carries inherent risk. This risk arises as creating these opportunities typically requires an upfront investment, and the opportunity might be captured by a competing builder in the next slot, assuming no off-chain collusion between the proposer and builder. This element of risk is a critical factor that could be eliminated by some of the proposed changes to the mechanism (e.g. some APS designs), making it an essential consideration when defining future mechanisms.</p>\n<h2><a name=\"p-49786-references-13\" class=\"anchor\" href=\"https://ethresear.ch#p-49786-references-13\"></a>References</h2>\n<p>[1] Babel K, Daian P, Kelkar M, Juels A. Clockwork finance: Automated analysis of economic security in smart contracts. <em>In 2023 IEEE Symposium on Security and Privacy (SP)</em> 2023 May 21 (pp. 2499-2516). IEEE.</p>\n<p>[2] Mackinga T, Nadahalli T, Wattenhofer R. Twap oracle attacks: Easier done than said?. <em>In 2022 IEEE International Conference on Blockchain and Cryptocurrency (ICBC)</em> 2022 May 2 (pp. 1-8). IEEE.</p>\n<p>[3] Jensen JR, von Wachter V, Ross O. Multi-block MEV. arXiv preprint arXiv:2303.04430. 2023 Mar 8.</p>\n<p>[4] Yang S, Nayak K, Zhang F. Decentralization of Ethereum’s Builder Market. arXiv preprint arXiv:2405.01329. 2024 May 2.</p>\n<p>[5] Öz B, Sui D, Thiery T, Matthes F. Who Wins Ethereum Block Building Auctions and Why?. arXiv preprint arXiv:2407.13931. 2024 Jul 18.</p>\n<p>[6] Gupta T, Pai MM, Resnick M. The centralizing effects of private order flow on proposer-builder separation. arXiv preprint arXiv:2305.19150. 2023 May 30.</p>\n<p>[7] Heimbach L, Pahari V, Schertenleib E. Non-atomic arbitrage in decentralized finance. arXiv preprint arXiv:2401.01622. 2024 Jan 3.</p>\n<p>[8] Meilijson I. The Garman-Klass volatility estimator revisited. arXiv preprint arXiv:0807.3492. 2008 Jul 22.</p>\n            <p><small>4 posts - 2 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/does-multi-block-mev-exist-analysis-of-2-years-of-mev-data/20345\">Read full topic</a></p>","link":"https://ethresear.ch/t/does-multi-block-mev-exist-analysis-of-2-years-of-mev-data/20345","pubDate":"Wed, 28 Aug 2024 10:31:36 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20345"},"source":{"@url":"https://ethresear.ch/t/does-multi-block-mev-exist-analysis-of-2-years-of-mev-data/20345.rss","#text":"Does multi-block MEV exist? Analysis of 2 years of MEV Data"},"filter":false},{"title":"A Note on Equivocation in Slot Auction ePBS","dc:creator":"Julian","category":"Proof-of-Stake","description":"<p><em>Thanks to Francesco D’Amato, Barnabé Monnot, Mike Neuder, and Thomas Thiery for feedback and review. Thanks again to Francesco for coming up with the second proposal.</em></p>\n<p>Whether we want to implement slot auctions into ePBS is an <a href=\"https://www.notion.so/Arguments-in-Favor-and-Against-Slot-Auctions-in-ePBS-c7acde3ff21b4a22a3d41ac4cf4c75d6?pvs=21\" rel=\"noopener nofollow ugc\">active discussion area</a>, and support for slot auctions was signaled in the <a href=\"https://youtu.be/fQx_UbaPX-E?si=C8ALtI4zOSmFjRpN\" rel=\"noopener nofollow ugc\">seventh ePBS breakout call</a>. Currently, the ecosystem lacks knowledge about the fork choice safety of slot auctions in the <a href=\"https://ethereum-magicians.org/t/eip-7732-enshrined-proposer-builder-separation-epbs/19634\" rel=\"noopener nofollow ugc\">current ePBS proposal</a>. This note presents two strawman proposals to start discussing the forkchoice safety of slot auction ePBS.</p>\n<p>This note presupposes the reader is familiar with the ePBS proposal (<a href=\"https://ethereum-magicians.org/t/eip-7732-enshrined-proposer-builder-separation-epbs/19634\" rel=\"noopener nofollow ugc\">EIP-7732</a>).  An essential part of this EIP is that a <em>payload boost</em> is applied to a beacon block if the <a href=\"https://ethresear.ch/t/payload-timeliness-committee-ptc-an-epbs-design/16054#proposer-initiated-splitting-18\">Payload-timeliness committee (PTC)</a> reaches a quorum. If an execution payload is seen on time by a majority of the PTC, the beacon block that corresponds to the execution payload receives additional fork-choice weight (Reveal Boost). If the PTC observes a timely message from the builder stating that it withholds its payload, the additional fork-choice weight is given to the parent block of the beacon block corresponding with the withhold message (Withholding Boost).</p>\n<p>In <a href=\"https://mirror.xyz/0x03c29504CEcCa30B93FF5774183a1358D41fbeB1/CPYI91s98cp9zKFkanKs_qotYzw09kWvouaAa9GXBrQ\" rel=\"noopener nofollow ugc\">slot auction</a> ePBS, the beacon proposer does not commit to an execution payload hash, unlike in block auction ePBS. Instead, it commits to a specific builder that can submit an execution payload when it is time to reveal. The first problem is that a builder could submit multiple execution payloads. In this note, we will refer to this as a builder equivocation.</p>\n<p>In block auction ePBS, something similar to equivocation is possible. The builder could wait for at least one PTC member to vote <code>PAYLOAD_ABSENT</code> and then release a withhold message and an execution payload to split the PTC’s view such that none of the three vote options (<code>PAYLOAD_ABSENT</code>, <code>PAYLOAD_WITHHELD</code>, <code>PAYLOAD_PRESENT</code>) reaches the <a href=\"https://discord.com/channels/595666850260713488/874767108809031740/1272916231250382939\" rel=\"noopener nofollow ugc\">quorum of 50%</a> of the votes.</p>\n<p>In block auction ePBS, this equivocation does not benefit the builder much. If the PTC does not reach a quorum, no payload boost is applied, and the honest next-slot validator will take the payload as head. If the builder equivocates, the protocol does not need to guarantee Builder Reveal Safety since the builder does not act as the protocol expects. Still, the builder does not have the flexibility to submit a different execution payload since the beacon block commits to the execution payload hash.</p>\n<p>It could be that the builder is incentivized to play a <a href=\"https://arxiv.org/abs/2305.09032\" rel=\"noopener nofollow ugc\">timing game</a> and eventually decides that it is best if the block were withheld. The builder could submit a withhold message and see if the PTC will reach a quorum on <code>PAYLOAD_WITHHELD</code>. If the PTC does not seem to do so, and the PTC also has not yet reached a quorum on <code>PAYLOAD_ABSENT</code>, the builder reveals its payload after all. This attack seems difficult to pull off, but it allows the builder to check whether it can renege on its promised payment to the proposer while still landing its payload on-chain if it has to pay (assuming an honest next-slot proposer).</p>\n<p>In slot auction ePBS, a builder may be more incentivized to equivocate because it can change the contents of its execution payload. For example, the builder could broadcast a particular execution payload, but a short time later, a significant MEV opportunity appears, and the builder now wants to broadcast a new execution payload.</p>\n<p>Preventing equivocations in slot auction ePBS would be desirable because equivocations would cause insecurity in fork choice. Specifically, we want to obtain the following properties with minimal changes.</p>\n<blockquote>\n<p><img src=\"https://ethresear.ch/images/emoji/facebook_messenger/bulb.png?v=12\" title=\":bulb:\" class=\"emoji only-emoji\" alt=\":bulb:\" loading=\"lazy\" width=\"20\" height=\"20\"><strong>Desiderata</strong></p>\n<ol>\n<li>If the builder reveals precisely one timely execution payload, it should retain the same Builder Reveal Safety guarantees as in block auction ePBS</li>\n<li>If the builder reveals multiple timely and equivocating execution payloads,<br>\na. no execution payload should go on-chain,<br>\nb. but the Unconditional Payment should be as strong as in block auction ePBS</li>\n</ol>\n</blockquote>\n<p>Should slashing or a penalty be applied to equivocating execution payload messages? This question is relevant to block and slot auction ePBS, although the potential benefits of equivocation are likely to be higher in slot auction ePBS. Since ePBS still allows local block construction, it seems unwise to apply harsh slashing or penalties if there is equivocation because this may disincentivize local block construction. Moreover, since it is not clear that there are significant gains to be made from equivocating execution payloads, and if gains are to be made, slashing or penalties do not qualitatively change this, so slashing or penalties are not immediately necessary.</p>\n<h2><a name=\"p-49750-proposal-1-vote-for-execution-payload-hash-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49750-proposal-1-vote-for-execution-payload-hash-1\"></a>Proposal 1: Vote for Execution Payload Hash</h2>\n<p>The first strawman proposal to obtain these properties involves changing the block auction ePBS fork-choice specification as follows.</p>\n<blockquote>\n<p><img src=\"https://ethresear.ch/images/emoji/facebook_messenger/bulb.png?v=12\" title=\":bulb:\" class=\"emoji\" alt=\":bulb:\" loading=\"lazy\" width=\"20\" height=\"20\"> <strong>Proposal 1: Vote for Execution Payload Hash</strong></p>\n<ol>\n<li>Replace <code>PAYLOAD_PRESENT</code> with <code>execution_payload_hash</code></li>\n<li>If no PTC quorum is reached, let the honest next-slot validator use an empty block as its head instead of a full block.</li>\n</ol>\n</blockquote>\n<p>A PTC member would now vote for the <code>execution_payload_hash</code> it has observed instead of simply voting whether a payload is present. Reveal boost is applied if a quorum is reached on <code>execution_payload_hash</code>. Intuitively, this is necessary for slot auctions since the PTC now indicates which execution payload should be used if the block is full and not just that the block is full.</p>\n<p>It seems like desideratum 1—the same Builder Reveal Safety as in block auction ePBS—is immediately satisfied since an honest builder does not release equivocating execution payloads. A PTC member’s <code>execution_payload_hash</code> vote functions the same as a <code>PAYLOAD_PRESENT</code> vote.</p>\n<p>If the builder equivocates but the PTC still reaches a quorum on <code>execution_payload_hash</code>, then the execution payload will make it on-chain in the same way a payload would have made it on-chain if the builder did not equivocate. I believe this is fine because the builder released an equivocating payload that did not split the view of the PTC (sufficiently). This indicates that this equivocating payload is a minor threat to the fork-choice security. Although this outcome contradicts desideratum 2a, the timely requirement in desideratum 2 should be read as the execution payload intends to split the view of the PTC sufficiently.</p>\n<p>If the builder equivocates and the PTC does not reach a quorum, then the next-slot honest proposer should see an empty block as its head. The builder loses some of its Builder Reveal Safety because it could be that the builder reveals only one payload (does not equivocate), yet the PTC does not reach a quorum. However, Builder Reveal Safety is not very strong in block auction ePBS either because a next-slot rational proposer would prefer to build on an empty block than a full block since these are more valuable (the ex-post reorg safety is low if reveal boost is not applied). Changing the default next-slot honest proposer behavior from seeing a full block to an empty block as its head does not change much in Builder Reveal Safety, and the system then satisfies desideratum 2.</p>\n<p>What if the next-slot proposer is dishonest? The builder could collude with the next-slot proposer and broadcast messages such that the PTC does not reach a quorum and include an execution payload late. This is similar to the attack in block auction ePBS, where a builder tries to get Withhold Boost to apply but releases an execution payload if it does not succeed. The builder and next-slot proposer collusion allows the builder to play aggressive timing games while ensuring Builder Reveal Safety. These timing games come at the expense of the execution validation time of the attesting committee. It is not immediately apparent what this attack would gain for the builder and next-slot proposer collusion since the builder timing game gain comes almost entirely from the next-slot proposer’s revenues.</p>\n<p>The downside of this proposal is the problem of free data availability. The PTC could now reach a quorum on an <code>execution_payload_hash</code>. These PTC votes would end up on-chain, and an adversary could use them to show that a piece of data was available to the PTC. Yet the adversary would not have to pay the base fee needed to provide the data on-chain; it only has to pay the proposer to commit to the adversary as the builder.</p>\n<h2><a name=\"p-49750-proposal-2-pretend-payload-absent-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49750-proposal-2-pretend-payload-absent-2\"></a>Proposal 2: Pretend Payload Absent</h2>\n<p>The second strawman proposal does not suffer from the free data availability problem and achieves the desiderata as follows.</p>\n<blockquote>\n<p><img src=\"https://ethresear.ch/images/emoji/facebook_messenger/bulb.png?v=12\" title=\":bulb:\" class=\"emoji\" alt=\":bulb:\" loading=\"lazy\" width=\"20\" height=\"20\"> <strong>Proposal 2: Pretend Payload Absent</strong><br>\nIf the next-slot proposer/attesters observe(s) at least two equivocating payloads, it/they assign(s) no additional fork-choice weight to any empty or full block</p>\n</blockquote>\n<p>The behavior of a PTC member does not change from the block auction ePBS specification. However, suppose a proposer sees that the block producer in the previous slot released equivocating execution payloads. In that case, it ignores the fork-choice weight the PTC may have given to any fork.</p>\n<p>If the builder is honest, this does not change its Builder Reveal Safety since the system works exactly as it does in block auction ePBS. Desideratum 1 is thus immediately satisfied.</p>\n<p>If the builder equivocates, an honest-but-rational proposer will choose to build on an empty block since it allows the proposer to extract the MEV from two slots of time instead of one. The attesters will not object to this since they observed the equivocating payloads and assigned no additional fork-choice weight to any forks. Therefore, if the next-slot proposer and attesters are honest, desideratum 2 is also satisfied.</p>\n<p>The next-slot proposer could collude with the builder. The builder could equivocate, and the next-slot proposer could choose to build on a full block. Similarly to the collusion situation described in the first proposal, though, the gain that a builder gets from this equivocation seems to primarily come from the profits the next-slot proposer could make. It is not clear that the joint utility of the collusion increases by enough to justify the collusion.</p>\n<p>A builder and a next-slot proposer could collude to ensure an execution payload does not become canonical. Consider a builder that submits an execution payload, and the PTC reaches a quorum on whether this payload is timely. Later, the builder regrets the contents of its execution payload and aims to remove it from the canonical chain. It could then release an equivocation payload so the next-slot proposer will not build on the undesirable execution payload. This is similar to a builder not revealing its block in block auction ePBS.</p>\n<p>In conclusion, these strawman proposals seem to achieve the same fork-choice safety under slot auctions as under block auctions with minimal changes. While the first proposal has a problem with free data availability, the second proposal may be more susceptible to builder games, such as reorging its execution payload. The lack of free data availability and being less susceptible to builder games are advantages of slot auctions in ePBS. Further research on a design that simultaneously solves both problems would be very valuable. If you are interested in working on (slot auctions in) ePBS, please see this <a href=\"https://www.notion.so/ePBS-EIP-7732-tracker-9f85f7b086994bd79192bc72bae703a1?pvs=21\" rel=\"noopener nofollow ugc\">page</a>!</p>\n            <p><small>6 posts - 3 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/a-note-on-equivocation-in-slot-auction-epbs/20331\">Read full topic</a></p>","link":"https://ethresear.ch/t/a-note-on-equivocation-in-slot-auction-epbs/20331","pubDate":"Fri, 23 Aug 2024 16:52:02 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20331"},"source":{"@url":"https://ethresear.ch/t/a-note-on-equivocation-in-slot-auction-epbs/20331.rss","#text":"A Note on Equivocation in Slot Auction ePBS"},"filter":false},{"title":"The Role of the P2P Market in ePBS","dc:creator":"Julian","category":"Economics","description":"<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/1/d178209b1bebdec57cfa0665bfacea6970512e8c.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/d178209b1bebdec57cfa0665bfacea6970512e8c\" title=\"role_of_p2p\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/1/d178209b1bebdec57cfa0665bfacea6970512e8c_2_690x389.jpeg\" alt=\"role_of_p2p\" data-base62-sha1=\"tT3a6Eh20ESatNn7IqboSefeEQk\" width=\"690\" height=\"389\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/1/d178209b1bebdec57cfa0665bfacea6970512e8c_2_690x389.jpeg, https://ethresear.ch/uploads/default/optimized/3X/d/1/d178209b1bebdec57cfa0665bfacea6970512e8c_2_1035x583.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/1/d178209b1bebdec57cfa0665bfacea6970512e8c_2_1380x778.jpeg 2x\" data-dominant-color=\"504F56\"></a></div><br>\n<em>A two-tier auction market: the right resembles the less sophisticated publicly observable P2P market, and the left resembles the more sophisticated private RPC market.</em><p></p>\n<p><em>Thanks to Potuz, Barnabé Monnot, Terence Tsao, and Thomas Thiery for comments and discussion.</em></p>\n<p>The current ePBS proposal, <a href=\"https://eips.ethereum.org/EIPS/eip-7732\" rel=\"noopener nofollow ugc\">EIP-7732</a>, suggests operating a two-tier market where builders can bid to obtain the execution payload construction rights. Large block builders are expected to use the pull-based direct connection market. This market allows for lower latency and more flexibility for the builder, as the builder only needs to commit to its bid once the proposer asks for it. This market, however, requires the proposer to connect to the builder’s RPC and actively pull bid(s) from it. Smaller builders who lack this connectivity with the validator set can use the push-based P2P market. This market has stricter rules for what bidders can do but does not need the proposer to pull bid(s) from it since bids are pushed to the proposer.</p>\n<p>This note explores the role of the P2P market in ePBS. Although there has been some <a href=\"https://ethresear.ch/t/builder-bidding-behaviors-in-epbs/20129\">initial</a> <a href=\"https://hackmd.io/@potuz/HyhN0Nt9A\" rel=\"noopener nofollow ugc\">exploration</a> on the topic, this note presents a clear counterfactual of a world where the P2P market were not included in EIP-7732. This note also emphasizes <a href=\"https://collective.flashbots.net/t/tee-boost/3741/5\" rel=\"noopener nofollow ugc\">multiplexing</a>—the ability of proposers to discover builders—as the most important aspect of the P2P market.</p>\n<p>The three arguments in favor of the P2P market that the author has seen in previous work are: 1) it allows anyone to set a floor price for the auction, 2) it can be used for MEV-Burn in future protocol upgrades, and 3) it lowers entry barriers for new entrants or long-tail builders.</p>\n<p>The first argument is that allowing anyone to bid via the publicly observable P2P market gives all validators the ability to set a floor price for the auction. Validators can bid based on the block that they could locally build. Builders must then bid at least above the bid of these validators to obtain the execution payload construction rights. It has been argued that this is valuable if a cartel of builders intends to keep bids low. The floor price, however, would not break up a cartel. Although proposers would make slightly more revenue in this case, it is unclear what the value of such a floor price is to the protocol.</p>\n<p>The beacon proposer selling the rights may be the ideal party to set a reserve price. As I argue in <a href=\"https://mirror.xyz/0x03c29504CEcCa30B93FF5774183a1358D41fbeB1/8aCbi_a-Gh5DWnkJWstm8zA5fvtoQB-QR5we7C8XC90\" rel=\"noopener nofollow ugc\">this post</a>, a proposer may want to put a higher reserve price than its valuation for the execution payload construction rights to attract higher bids from builders. The P2P market allows the proposer to signal its reserve price to the market. In this sense, the P2P market allows the validator and other participants to express their preferences.</p>\n<p>The second argument states that the P2P market may facilitate <a href=\"https://ethresear.ch/t/mev-burn-a-simple-design/15590\">MEV-Burn</a> in future protocol upgrades. MEV-Burn aims to decouple the rewards from selling execution payload construction rights from being a validator. This has numerous benefits; for example, it decreases the value of using a staking service provider (SSP) since MEV-Burn decreases the variance of validator payoffs. MEV-Burn requires that builder bids be legible to the protocol. Most designs achieve this by having a committee that observes the best available bids. If ePBS would only have the direct connection market, the MEV-Burn designs need to be revisited since a proposer selling the execution rights is incentivized to understate the amount that will be burnt. Still, the P2P market is expected to only reflect a small portion of the value of the execution payload construction rights, hence even ePBS with the P2P market may not be satisfactory for an effective MEV-Burn solution.</p>\n<p>The last reason for the P2P market is that it would allow builders from which proposers are unlikely to pull bids to still compete in the market. Proposers may be unlikely to pull bids from builders that infrequently participate in the auction because they are very specialized or from new builders unknown to the proposer. This could be because proposers have an outdated whitelist of builders from which to pull bids. Allowing these proposers to participate in the push-based P2P market will result in more builder diversity in block construction, which may benefit the protocol.</p>\n<p>This last reason is what we will explore in this post. Specifically, what does the Ethereum ecosystem gain by enshrining the push-based P2P market aside from an out-of-protocol solution that facilitates small builders’ participation in the market?</p>\n<p>Shea Ketsdever recently released a post on <a href=\"https://collective.flashbots.net/t/tee-boost/3741\" rel=\"noopener nofollow ugc\">TEE-Boost</a>, an adaptation of MEV-Boost that uses Trusted Execution Environments. In this post, she highlights the different roles a relay plays. One of the roles is multiplexing, allowing proposers to discover builders who may want to participate in the auction.</p>\n<p>The ePBS P2P market aims to achieve multiplexing. In the context of ePBS, multiplexing has at least two facets: trustlessness and value reflection. Trustlessness is important because ePBS removes the trust that proposers and builders must place in a relay to facilitate the fair exchange. Value reflection is essential because a multiplexing tool that poorly reflects the value bidders assign to the auctioned item will not efficiently match an auctioneer with the correct bidder.</p>\n<p>The ePBS P2P market scores very well on the trustlessness front. Neither a proposer nor a builder must trust anyone since bids are broadcast via the P2P network, and the winning bid is committed to on-chain. The P2P market, however, scores poorly on the value reflection front. Since the P2P network must be DOS resistant, it cannot handle too many bids, so bidders will likely not be allowed to bid as often as they could in MEV-Boost, meaning they have to be strategic about when they bid. Moreover, early bids will not be able to be canceled, which could lead to strategic builders only winning via the P2P market if the valuation of other builders that operate via the direct connection market has decreased (<a href=\"https://www.youtube.com/watch?v=-PXGPFFneMI\" rel=\"noopener nofollow ugc\">adverse selection</a>). Finally, the value reflection of the P2P market relative to the RPC market will worsen as the RPC market becomes more sophisticated while the P2P market becomes stale.</p>\n<p>How would an out-of-protocol actor facilitate multiplexing if ePBS were deployed? In MEV-Boost, relays facilitate multiplexing because submitting blocks to relays is (largely) permissionless, and relays are well-connected to validators. In ePBS, a relay - from no one referred to as a bid curation relay - would look different. A bid curation relay could open an RPC endpoint that proposers connect to and host an auction where builders submit bids, like in MEV-Boost. Bids, however, do not need to contain transaction data since the bid curation relay would not be responsible for the fair exchange problem that is solved via ePBS. Bids in ePBS are a bid value and the hash of the execution payload. A proposer then pulls the highest bid from the bid curation relay and, if it so desires, commits to the highest bid via the in-protocol ePBS system. A winning builder then sees this in-protocol commitment and publishes the block via ePBS.</p>\n<p>It becomes clear that the trust assumptions that proposers and builders must place in a bid curation relay are vastly lower than in MEV-Boost. Essentially, the proposer and builders must trust the bid curation relay to forward the highest-paying bid when the proposer asks for it. The bid curation relay is not trusted with the block contents (<a href=\"https://collective.flashbots.net/t/tee-boost/3741\" rel=\"noopener nofollow ugc\">builder privacy</a> is preserved) and is not responsible for unconditional payment (<a href=\"https://collective.flashbots.net/t/tee-boost/3741\" rel=\"noopener nofollow ugc\">data availability and validation</a> are enforced via the protocol).</p>\n<p>The ePBS relay scores worse on the trustlessness front than the P2P market since the proposer and builders must trust the relay not to censor its bids. On the other hand, the value reflection of such a bid curation relay could be far better. The relay could offer bid cancellations and high-frequency bidding to builders. Moreover, relays could invest in latency reductions and charge for this, as some do in MEV-boost. If a relay successfully reduces latency, more prominent builders may connect to it. This means the value reflection of relays relative to directly connected builders may remain stable or improve over time.</p>\n<p><a href=\"https://collective.flashbots.net/t/tee-boost/3741/5?u=julian\" rel=\"noopener nofollow ugc\">Shea also highlights</a> another option that has been discussed widely before: next to the P2P market; there could be an on-chain registry of builders. There could be a smart contract that any builder could write its RPC endpoint to. Any validator could then see the available RPC endpoints and pull bids from it during its slot. This alternative scores well on the trustlessness front since no trust is required, and it scores well on the value reflection point since it allows all builders to compete on a similar level. The proposer could pull from this registry every time it is supposed to propose a block.</p>\n<p>Why do we care about multiplexing? Multiplexing contributes to the credible neutrality of the network. In the context of ePBS, credible neutrality may mean something like this: the builder with the highest valuation for the execution payload construction rights is allocated these rights. If proposers were to rely solely on directly connected builders, some long-tail builders who happened to have an exceptionally high value for a specific block might be excluded. If proposers rely on bid curation relays, they may not forward the highest-paying bid because they prefer to forward another bid for whatever reason. If proposers rely on an on-chain registry of builders, it may not connect to the newer or smaller builders.</p>\n<p>Allowing multiplexing to contribute to credible neutrality is a trade-off between trustlessness and value reflection. If a completely trustless market is so poor at value reflection that it never surfaces a winning bid, it does not contribute much to credible neutrality. If a perfectly value-reflecting market puts a lot of trust in one party, the benefit of credible neutrality is also nonexistent.</p>\n<p>To conclude, the P2P market is easy to implement, and its maintenance does not require a hard fork so clients can iterate freely. Although the P2P market only contributes a little to the core functionality of ePBS, there are virtually no downsides to implementing it, and it is a nice feature that may benefit some users and could be beneficial for proposers as it increases their revenues and may be helpful for MEV-Burn in the future. Further work could specify the P2P market rules and how an on-chain registry of builder RPC endpoints could work.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/the-role-of-the-p2p-market-in-epbs/20330\">Read full topic</a></p>","link":"https://ethresear.ch/t/the-role-of-the-p2p-market-in-epbs/20330","pubDate":"Fri, 23 Aug 2024 16:01:14 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20330"},"source":{"@url":"https://ethresear.ch/t/the-role-of-the-p2p-market-in-epbs/20330.rss","#text":"The Role of the P2P Market in ePBS"},"filter":false},{"title":"An Automatic Technique to Detect Storage Collisions and Vulnerabilities within Solidity Smart Contract","dc:creator":"WaizKhan7","category":"Security","description":"<p>Storage collisions and vulnerabilities within Ethereum smart contracts can lead to unexpected issues like freezing funds, escalating privileges, and financial asset theft. A storage collision occurs when two different storage structs unintentionally use same storage slot(s), or the slot layout is changed during the upgrade of implementation contract. These collision vulnerabilities have been detected in large numbers (worth millions of dollars) in a <a href=\"https://www.ndss-symposium.org/ndss-paper/not-your-type-detecting-storage-collision-vulnerabilities-in-ethereum-smart-contracts/\" rel=\"noopener nofollow ugc\">recent study</a> within smart contracts deployed on the Ethereum network.</p>\n<p>In this topic, we propose a more accurate and complete technique to detect storage vulnerabilities and collisions in Solidity smart contracts. And encourage the Ethereum community to <strong>provide feedback on the proposed technique</strong>.</p>\n<h3><a name=\"p-49742-introduction-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49742-introduction-1\"></a>Introduction</h3>\n<p>We are working on a solution based on advanced static analysis techniques that can identify vulnerabilities within the deep storage of Ethereum Solidity smart contracts. We aim to detect storage collisions in proxy contracts deployed on the Ethereum network like ERC-2535 (Diamond/Multi-Facet Proxy), ERC-1822, upgrade proxy pattern, etc., as complex proxy contracts are more likely to experience a storage collision, like during the upgrade of implementation or facet contracts.</p>\n<p><a href=\"https://www.ndss-symposium.org/ndss-paper/not-your-type-detecting-storage-collision-vulnerabilities-in-ethereum-smart-contracts/\" rel=\"noopener nofollow ugc\">N. Ruaro et al.</a> analyzed Ethereum contracts using contract bytecode to detect storage collisions and reported 14,891 vulnerable contracts. Their technique was able to identify storage slot types correctly with an accuracy of 87.3%. Whereas, we aim to build a solution that will use source code to accurately analyze the storage layout and slot types of the contract. Furthermore, we will also analyze dynamic arrays, mapping variables, and complex nested structs in our analysis.</p>\n<p>Suppose a collision occurs on the state variables’ base slots, our approach will allow us to identify the impact of the collision on dynamic arrays and mapping variables declared consecutively, and arrays data type or mappings key types are same which is a common practice in large contracts like gaming contracts.</p>\n<p>As shown in the below example code, the slot layout was changed during the contract upgrade, and since <code>token_uris</code> and <code>token_version</code> have same key types and data types, both variables will return each other’s data after the upgrade due to collision.</p>\n<pre><code class=\"lang-auto\">library ImplementationStorage1 {\n    struct AddressSlot {\n        address owner; // slot n+0\n        mapping(uint256 =&gt; string) token_uris; // slot n+1\n        mapping(uint256 =&gt; string) token_versions; // slot n+2\n    }\n\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n// updated code\nlibrary ImplementationStorage2 {\n    struct AddressSlot {\n        address owner; //slot n+0\n        mapping(uint256 =&gt; string) token_versions; // slot n+1 (shld be token_uris)\n        mapping(uint256 =&gt; string) token_uris; // slot n+2 (shld be token_versions)\n    }\n\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n</code></pre>\n<p><code>token_uris</code> accessing <code>token_versions</code> and vice-versa after the upgrade.</p>\n<pre><code class=\"lang-auto\">       (before upgrade)                        (after upgrade)   \n      _________________                      _________________\n     |     Proxy       |                     |     Proxy       |\n     |_________________|                     |_________________|\n     | * IMPLEMENT_SLOT| --&gt; NFTManager1     | * IMPLEMENT_SLOT| --&gt; NFTManager2\n     | * ADMIN_SLOT    |                     | * ADMIN_SLOT    |\n     |_________________|                     |_________________|\n     | + upgradeTo()   |                     | + upgradeTo()   |\n     | + changeAdmin() |                     | + changeAdmin() |\n     |_________________|                     |_________________|\n              |                                       |\n              v                                       v\n      _________________                       _________________\n     |   NFTManager1   |                     |   NFTManager2   |\n     |_________________|                     |_________________|\n     | - owner         |                     | - owner         |\n     | - token_uris    | **** collision **** | - token_versions|\n     | - token_versions| **** collision **** | - token_uris    |\n     |_________________|                     |_________________|\n\n</code></pre>\n<p>We plan to build a technology that will automatically detect all storage collisions within a Solidity smart contract.</p>\n<h4><a name=\"p-49742-methodology-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49742-methodology-2\"></a>Methodology</h4>\n<p>We have structured our development plan into three distinct phases, outlined as follows:</p>\n<ul>\n<li><strong><strong>Automatic State Variable Detector and Slot Layout Calculator</strong></strong></li>\n</ul>\n<p>In this phase, we focus on developing an automatic state variable detector and slot layout calculator. This component will facilitate the identification of state variables within smart contracts and determine their corresponding slot layout. By automating this process, we aim to streamline the initial analysis procedures.</p>\n<p>Sample output of Slot Calculator</p>\n<pre><code class=\"lang-auto\">slot 0 - mapping ds.selectorToFacetAndPosition[bytes4] = FacetAddressAndPosition;\nslot 1 - mapping ds.facetFunctionSelectors[address] = FacetFunctionSelectors;\nslot 2 - address [] ds.facetAddresses;\nslot 3 - mapping ds.supportedInterfaces[bytes4] = bool;\nslot 4 - address ds.contractOwner;\nslot 5 - mapping ds.tempSelectorsNested[uint256] = FacetAddressAndPosition;\nslot 6 - FacetAddressAndPosition [] ds.FacetAddressAndPositionArray;\nslot 7 - mapping ds.tempMapping[uint256] = uint256;\nslot 8 - mapping ds.tempMapping2[address] = uint256;\n</code></pre>\n<ul>\n<li><strong><strong>Mapping Keys Analyzer and Slot Calculator of Complex Variables</strong></strong></li>\n</ul>\n<p>Building upon the foundation established in phase 1, in this phase we will first extend the slot calculator capability to calculate the slots of complex variables and their entries (for all data types) i.e. slots of mapping keys, dynamic array, complex struct, mappings with complex struct as value.</p>\n<p>This component will also include the approximation of all keys used in mapping variables for saving data using advanced static analysis techniques. By accurately approximating keys and calculating entries, we seek to enhance the precision and breadth of storage slot calculation methodology, which will help detect storage collision within deep storage data of a smart contract.</p>\n<ul>\n<li><strong><strong>Collision Detector for State Variables and Complex Variables All Entries Slots</strong></strong></li>\n</ul>\n<p>The final phase of our methodology focuses on implementing a collision detector for both state variables and complex variable slots. This critical component will identify any potential collisions or conflicts within any type of state variables and their associated variable(s)/value(s) slots. By detecting and addressing collisions, we aim to ensure the integrity and reliability of smart contracts.</p>\n<p>We aim to develop a robust and comprehensive methodology for smart contract storage collision detectors, by systematically progressing through above discussed three development phases.</p>\n<h4><a name=\"p-49742-conclusion-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49742-conclusion-3\"></a>Conclusion</h4>\n<p>The development of our solution will allow developers to ensure that their contract has no potential storage collisions before deployment. It will also be able to detect storage collisions within deep storage of deployed smart contracts and can help in securing contracts worth millions of dollars.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/an-automatic-technique-to-detect-storage-collisions-and-vulnerabilities-within-solidity-smart-contract/20328\">Read full topic</a></p>","link":"https://ethresear.ch/t/an-automatic-technique-to-detect-storage-collisions-and-vulnerabilities-within-solidity-smart-contract/20328","pubDate":"Fri, 23 Aug 2024 09:35:11 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20328"},"source":{"@url":"https://ethresear.ch/t/an-automatic-technique-to-detect-storage-collisions-and-vulnerabilities-within-solidity-smart-contract/20328.rss","#text":"An Automatic Technique to Detect Storage Collisions and Vulnerabilities within Solidity Smart Contract"},"filter":false},{"title":"Mechan-stein (alt. Franken-ism)","dc:creator":"mikeneuder","category":"Block proposer","description":"<h1><a name=\"p-49714-mechan-stein-alt-franken-ismbrp-classsmallsmall-choose-your-own-adventurehttpsxcomvitalikbuterinstatus1788489148183019929-either-way-just-trying-to-portmanteau-frankenstein-and-mechanismsmallp-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-mechan-stein-alt-franken-ismbrp-classsmallsmall-choose-your-own-adventurehttpsxcomvitalikbuterinstatus1788489148183019929-either-way-just-trying-to-portmanteau-frankenstein-and-mechanismsmallp-1\"></a>Mechan-stein (alt. Franken-ism)<br><p><small><em>^ <a href=\"https://x.com/VitalikButerin/status/1788489148183019929\" rel=\"noopener nofollow ugc\">choose your own adventure</a> – either way, just trying to portmanteau ‘Frankenstein’ and ‘Mechanism.’</em></small></p></h1>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/3/d/3d13edb2750f779fb39f38e943038de48a692422.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/3d13edb2750f779fb39f38e943038de48a692422\" title=\"upload_2936c4a8e65027883c0cacec063f9ea2\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/3/d/3d13edb2750f779fb39f38e943038de48a692422_2_498x500.jpeg\" alt=\"upload_2936c4a8e65027883c0cacec063f9ea2\" data-base62-sha1=\"8IjOZ06fIgkHslXWliL0RLOHwXM\" width=\"498\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/3/d/3d13edb2750f779fb39f38e943038de48a692422_2_498x500.jpeg, https://ethresear.ch/uploads/default/optimized/3X/3/d/3d13edb2750f779fb39f38e943038de48a692422_2_747x750.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/3/d/3d13edb2750f779fb39f38e943038de48a692422_2_996x1000.jpeg 2x\" data-dominant-color=\"8B9D84\"></a></div><br>\n<sub><em><strong>^“don’t worry bro, just one more auction, i swear. check it out.” h/t Mallesh for the relevant <a href=\"https://x.com/malleshpai/status/1748026472923623619\" rel=\"noopener nofollow ugc\">tweet</a>.</strong></em><br>\n</sub><p></p>\n<p><span class=\"math\">\\cdot</span><br>\n<em>by <a href=\"https://twitter.com/mikeneuder\" rel=\"noopener nofollow ugc\">mike</a> – wednesday; august 21, 2024.</em><br>\n<sub><em>^hbd <a href=\"https://en.wikipedia.org/wiki/Bo_Burnham\" rel=\"noopener nofollow ugc\">Bo</a>. if you, dear reader, haven’t seen <a href=\"https://en.wikipedia.org/wiki/Bo_Burnham:_Inside\" rel=\"noopener nofollow ugc\">“Inside”</a> or <a href=\"https://www.youtube.com/watch?v=5XWEVoI40sE\" rel=\"noopener nofollow ugc\">“Inside Outtakes,”</a> watching them is your homework assignment.</em></sub><br>\n<span class=\"math\">\\cdot</span><br>\n<em>Many thanks to <a href=\"https://x.com/barnabemonnot\" rel=\"noopener nofollow ugc\">Barnabé</a>, <a href=\"https://x.com/_julianma\" rel=\"noopener nofollow ugc\">Julian</a>, <a href=\"https://x.com/soispoke\" rel=\"noopener nofollow ugc\">Thomas</a>, <a href=\"https://x.com/jacobykaufmann\" rel=\"noopener nofollow ugc\">Jacob</a>, <a href=\"https://x.com/mteamisloading\" rel=\"noopener nofollow ugc\">mteam</a>, <a href=\"https://x.com/nero_eth\" rel=\"noopener nofollow ugc\">Toni</a>, <a href=\"https://x.com/drakefjustin\" rel=\"noopener nofollow ugc\">Justin</a>, <a href=\"https://x.com/vitalikbuterin\" rel=\"noopener nofollow ugc\">Vitalik</a>, <a href=\"https://x.com/MaxResnick1\" rel=\"noopener nofollow ugc\">Max</a>, and <a href=\"https://x.com/malleshpai\" rel=\"noopener nofollow ugc\">Mallesh</a> for discussions around these topics and comments on the draft!</em><br>\n<span class=\"math\">\\cdot</span><br>\n<em>The idea for the combined mechanism explored in <a href=\"https://ethresear.ch#p-49714-h-2-mechan-stein-9\">Part 2</a> of this post came from a Baranbé-led whiteboarding session and accompanying <a href=\"https://x.com/barnabemonnot/status/1808444733305258047\" rel=\"noopener nofollow ugc\">tweet thread</a>. These ideas are also explored in the <a href=\"https://efdn.notion.site/Block-construction-session-bd611621250f45948eff05fcf6a34067?pvs=4\" rel=\"noopener nofollow ugc\">this doc</a>, which inspired <a href=\"https://github.com/michaelneuder/talks/blob/268e273b55cf2c753b2479c3ebbb826d41811754/misc2024/sbc.pdf\" rel=\"noopener nofollow ugc\">this talk</a>.</em><br>\n<span class=\"math\">\\cdot</span><br>\n<strong>tl;dr;</strong> <em>We sketch a high-level framing for Ethereum block construction centered around the design goals of encouraging builder competition, limiting the value of validator sophistication, and preserving the neutrality of block space. We then highlight three proposed mechanisms and how they interface with the established desiderata. We conclude by exploring the potential synergies of combining these designs into a single flow, called <code>Mechan-stein</code>.</em><br>\n<span class=\"math\">\\cdot</span><br>\n<strong>Contents</strong><br>\n(1) <a href=\"https://ethresear.ch#p-49714-h-1-the-building-blocks-pun-intended-of-block-space-market-design-2\">The building blocks of block-space market design</a><br>\n&nbsp;&nbsp;  <a href=\"https://ethresear.ch#p-49714-enshrined-pbs-mev-burn-via-ptc-3\">Enshrined PBS &amp; MEV-burn via PTC</a><br>\n&nbsp;&nbsp;  <a href=\"https://ethresear.ch#p-49714-execution-auctions-an-attester-proposer-separation-instatiation-5\">Execution Auctions (an Attester-Proposer Separation instantiation)</a><br>\n&nbsp;&nbsp;  <a href=\"https://ethresear.ch#p-49714-focil-7\">FOCIL</a><br>\n(2) <a href=\"https://ethresear.ch#p-49714-h-2-mechan-stein-9\">Mechan-stein</a><br>\n&nbsp;&nbsp;  <a href=\"https://ethresear.ch#p-49714-potential-issues-with-mechan-stein-10\">Potenital Issues with Mechan-stein</a><br>\n<span class=\"math\">\\cdot</span></p>\n<p><strong>Related work</strong></p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://mirror.xyz/barnabe.eth/QJ6W0mmyOwjec-2zuH6lZb0iEI2aYFB9gE-LHWIMzjQ\" rel=\"noopener nofollow ugc\"><em>More words on Proposer-Builder Separation</em></a></td>\n</tr>\n<tr>\n<td><a href=\"https://efdn.notion.site/Block-construction-session-bd611621250f45948eff05fcf6a34067?pvs=4\" rel=\"noopener nofollow ugc\"><em>Notes from block construction session</em></a></td>\n</tr>\n<tr>\n<td><a href=\"https://ethresear.ch/t/burning-mev-through-block-proposer-auctions/14029\"><em>MEV-burn</em></a></td>\n</tr>\n<tr>\n<td><a href=\"https://ethresear.ch/t/payload-timeliness-committee-ptc-an-epbs-design/16054\"><em>PTC</em></a></td>\n</tr>\n<tr>\n<td><a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870\"><em>FOCIL</em></a></td>\n</tr>\n</tbody>\n</table>\n</div><hr>\n<h1><a name=\"p-49714-h-1-the-building-blocks-pun-intended-of-block-space-market-design-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-h-1-the-building-blocks-pun-intended-of-block-space-market-design-2\"></a>[1] The building blocks (pun intended) of block-space market design</h1>\n<p>Since before the Merge, <a href=\"https://github.com/michaelneuder/mev-bibliography\" rel=\"noopener nofollow ugc\">much</a> has been (and continues to be) written about Ethereum’s transaction supply chain and block-space market design. I still think Vitalik’s <a href=\"https://vitalik.eth.limo/general/2021/12/06/endgame.html\" rel=\"noopener nofollow ugc\"><em>Endgame</em></a> summarizes the best-case outcome most succinctly with,</p>\n<blockquote>\n<p><em>“Block production is centralized, block validation is trustless and highly decentralized, and censorship is still prevented.”</em></p>\n</blockquote>\n<p>We can operationalize each of these statements into a design goal for our system:</p>\n<ol>\n<li><em>“Block production is centralized.”</em> <span class=\"math\">\\rightarrow</span> MEV is a fact of life in financial systems, and some actors will inevitably specialize in its extraction. We can’t expect solo-stakers to run profitable builders, but we can encourage competition and transparency in the MEV markets. When discussing <code>MEV-boost</code>, we usually describe it as aiming to democratize access to MEV for all proposers (which it does extremely well), but one under-discussed element of the existing system is that it <em>encourages builder competition</em> by creating a transparent market for buying block space. There are (and always will be) advantages and economies of scale for being a big builder (e.g., colocation with relays, acquiring exclusive order flow deals, and holding large inventory on various trading venues – for more, see this <a href=\"https://arxiv.org/pdf/2407.13931\" rel=\"noopener nofollow ugc\">recent paper</a> from Burak, Danning, Thomas, and Florian), but anyone can send blocks and compete in the auction. Another important element of <code>MEV-boost</code> is that the auction happens Just-In-Time (JIT) for the block proposal, making <a href=\"https://ethresear.ch/t/on-attestations-block-propagation-and-timing-games/20272\">timing games</a> around the block proposal deadline valuable to the proposer who serves as the auctioneer. Still, the real-time nature of the auction ensures that the builder with the highest value <em>for this specific slot</em> wins the auction (rather than, e.g., the builder with the highest average value for any slot – see <a href=\"https://arxiv.org/pdf/2408.03116\" rel=\"noopener nofollow ugc\">Max &amp; Mallesh’s argument</a> for why ahead-of-time auctions are more centralized). This leads to <strong>design goal <span class=\"hashtag-raw\">#1:</span> encourage builder competition.</strong><a href=\"https://ethresear.ch#fn1dst\"><span class=\"math\">^{[1]}</span></a><a name=\"fn1\"></a></li>\n<li><em>“Block validation is trustless and highly decentralized”</em><a href=\"https://ethresear.ch#fn2dst\"><span class=\"math\">^{[2]}</span></a><a name=\"fn2\"></a> <span class=\"math\">\\rightarrow</span> Ethereum’s primary focus has been preserving the validator set’s decentralization (why this is important in item <span class=\"hashtag-raw\">#3</span> below). This fundamental tenet instantiates itself in both the engineering/technical design and the economic/incentive design. On the engineering front, the <a href=\"https://github.com/ethereum/consensus-specs/tree/dev\" rel=\"noopener nofollow ugc\">spec</a> is written with the <a href=\"https://docs.ethstaker.cc/ethstaker-knowledge-base/hardware/hardware-requirements\" rel=\"noopener nofollow ugc\">minimum hardware requirements</a> in mind. This constraint ensures that participation in Ethereum’s consensus is <em>feasible</em> given (relatively) modest resources. On the economic level, the goal is to minimize the disparity in financial outcomes between at-home stakers and professional operators. Beyond feasibility, this aims to make at-home staking <em>not too irrational.</em> This double negative is tongue-in-cheek but hopefully conveys the message of trying to ensure there is some economic viability to at-home staking rather than staking through a centralized provider. Another lens for interpreting this is keeping the marginal value of sophistication low. We can’t expect at-home operators to have the exact same rewards as Coinbase and Lido (e.g., because they may have higher network latency), but the centralized staking providers shouldn’t benefit greatly from sophistication. This leads to <strong>design goal <span class=\"hashtag-raw\">#2:</span> limit the value of validator sophistication.</strong></li>\n<li><em>“Censorship is prevented.”</em> <span class=\"math\">\\rightarrow</span> Credible neutrality is what differentiates crypto-economic systems from FinTech. If centralized entities determine which transactions land on chain and which do not, it’s over. To ensure the anti-fragility and neutrality of Ethereum, we must rely on a <a href=\"https://collective.flashbots.net/t/decentralized-crypto-needs-you-to-be-a-geographical-decentralization-maxi/1385\" rel=\"noopener nofollow ugc\">geographically distributed</a> validators; the validator set is the most decentralized part of the block production pipeline. In my opinion, (i) the main point of having a decentralized validator set is to allow those validators to express different preferences over the transactions that land on chain (“high preference entropy” – <a href=\"https://ethresear.ch/t/unbundling-staking-towards-rainbow-staking/18683\">h/t Dr. Monnot</a>), and (ii) relying on this decentralization is the only way to preserve neutrality of the chain (c.f., <a href=\"https://ethresear.ch/t/uncrowdable-inclusion-lists-the-tension-between-chain-neutrality-preconfirmations-and-proposer-commitments/19372\"><em>Uncrowdable Inclusion Lists</em></a> for more discussion on chain neutrality). This leads to <strong>design goal <span class=\"hashtag-raw\">#3:</span> preserve the neutrality of Ethereum block space.</strong></li>\n</ol>\n<p>Right. To summarize:</p>\n<ol>\n<li><em>“Block production is centralized.”</em> <span class=\"math\">\\rightarrow</span> <strong>design goal <span class=\"hashtag-raw\">#1:</span> encourage builder competition.</strong></li>\n<li><em>“Block validation is trustless and highly decentralized”</em> <span class=\"math\">\\rightarrow</span> <strong>design goal <span class=\"hashtag-raw\">#2:</span> limit the value of validator sophistication.</strong></li>\n<li><em>“Censorship is prevented.”</em> <span class=\"math\">\\rightarrow</span> <strong>design goal <span class=\"hashtag-raw\">#3:</span> preserve the neutrality of Ethereum block space.</strong></li>\n</ol>\n<p>Ok. This is all great, but let’s talk specifics. Many proposals aim to accomplish some of the design goals above. I am going to focus on three:</p>\n<ol>\n<li><strong>Enshrined <a href=\"https://barnabe.substack.com/p/pbs\" rel=\"noopener nofollow ugc\">Proposer-Builder Separation</a> &amp; <a href=\"https://ethresear.ch/t/burning-mev-through-block-proposer-auctions/14029\"><code>MEV-burn</code></a> via <a href=\"https://ethresear.ch/t/payload-timeliness-committee-ptc-an-epbs-design/16054\">Payload-Timeliness Committee</a></strong> (abbr. <code>PTC</code> onwards).</li>\n<li><strong><a href=\"https://mirror.xyz/barnabe.eth/QJ6W0mmyOwjec-2zuH6lZb0iEI2aYFB9gE-LHWIMzjQ\" rel=\"noopener nofollow ugc\">Execution Auctions</a>/Attester-Proposer Separation</strong>.</li>\n<li><strong><a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870/5\">Fork-Choice Enforced Inclusion Lists</a></strong> (abbr. <code>FOCIL</code> onwards).</li>\n</ol>\n<p>This may seem jargon-laden, and I apologize; please check out the links for the canonical article on each topic; for even more legibility, I will present a high-level view of each proposal below.</p>\n<h3><a name=\"p-49714-enshrined-pbs-mev-burn-via-ptc-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-enshrined-pbs-mev-burn-via-ptc-3\"></a>Enshrined PBS &amp; <code>MEV-burn</code> via <code>PTC</code></h3>\n<p>This design enshrines a JIT block auction into the Ethereum consensus layer. The diagram below summarizes the block production pipeline <em>during the slot</em>.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/2/2/22560b81c3e436b0a3524b9c52a1b6b5aa277003.png\" data-download-href=\"https://ethresear.ch/uploads/default/22560b81c3e436b0a3524b9c52a1b6b5aa277003\" title=\"upload_a40f44ea2cb5821c889733125eb53260\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/2/2/22560b81c3e436b0a3524b9c52a1b6b5aa277003_2_423x500.png\" alt=\"upload_a40f44ea2cb5821c889733125eb53260\" data-base62-sha1=\"4TKAeCidlD1n8QgF0Kg8skLBQVt\" width=\"423\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/2/2/22560b81c3e436b0a3524b9c52a1b6b5aa277003_2_423x500.png, https://ethresear.ch/uploads/default/optimized/3X/2/2/22560b81c3e436b0a3524b9c52a1b6b5aa277003_2_634x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/2/2/22560b81c3e436b0a3524b9c52a1b6b5aa277003_2_846x1000.png 2x\" data-dominant-color=\"F2F1F1\"></a></div><p></p>\n<ol>\n<li><strong>The builder bids</strong> in the auction by sending <code>(block header, bid value)</code> pairs to the proposer and the committee members.</li>\n<li><strong>The proposer commits</strong> to the highest bid value by signing and publishing the winning bid.</li>\n<li><strong>The committee enforces</strong> that the proposer selected a sufficiently high bid according to their view.</li>\n<li><strong>The builder publishes</strong> the block.</li>\n<li><strong>The committee enforces</strong> the timeliness of the builder’s publication.</li>\n</ol>\n<h4><a name=\"p-49714-analysis-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-analysis-4\"></a>Analysis</h4>\n<ul>\n<li><code>PTC</code> allows the protocol (through the enforcement of the committee) to serve as the trusted third-party in the <a href=\"https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=208b22c7a094ada20736593afcc8c759c7d1b79c\" rel=\"noopener nofollow ugc\">fair-exchange</a> of the sale of the block building rights. <code>MEV-burn</code> (maybe more aptly denoted as “block maximization” because burning isn’t strictly necessary for the bids) asks the attesters to enforce a threshold for the bid selected as the winner by the proposer.</li>\n<li><span><code>PTC</code> primarily implements <strong>design goal <span class=\"hashtag-raw\">#1:</span> encourage builder competition.</strong></span> <code>PTC</code> enshrines <code>MEV-boost</code>, fully leaning into creating a competitive marketplace for block building. As in <code>MEV-boost</code>, the real-time block auction allows any builder to submit bids and encourages competition during each slot. Additionally, the JIT auction and bid-threshold enforcement of <code>MEV-burn</code> reduces the risk of multi-slot MEV by forcing each auction to take place during the slot. Lastly, <code>PTC</code> and other ePBS designs historically were aimed at <a href=\"https://ethresear.ch/t/why-enshrine-proposer-builder-separation-a-viable-path-to-epbs/15710#reasons-to-enshrine-4\">removing relays</a>. With bid thresholds from <code>MEV-burn</code>, the <a href=\"https://ethresear.ch/t/relays-in-a-post-epbs-world/16278\">bypassability of the protocol</a> becomes less feasible (even if the best builder bypasses, the second best can go through the protocol and ensure their bid wins).</li>\n<li><span><code>PTC</code> marginally addresses <strong>design goal <span class=\"hashtag-raw\">#2:</span> limit the value of validator sophistication.</strong></span> By creating an explicit market for MEV-aware blocks, <code>PTC</code> ensures that all validators can access a large portion of the MEV available in their slot. <code>MEV-burn</code> also smooths out the variance in the validator rewards. However, one of the major limitations of this auction design is the “value-in-flight” (h/t Barnabé for <a href=\"https://www.youtube.com/watch?v=KHw7gdJ14uQ\" rel=\"noopener nofollow ugc\">coining</a> the <a href=\"https://mirror.xyz/barnabe.eth/QJ6W0mmyOwjec-2zuH6lZb0iEI2aYFB9gE-LHWIMzjQ\" rel=\"noopener nofollow ugc\">term</a>) problem of the auction taking place during the slot. Because the value of the sold item changes dramatically throughout a slot, the auctioneer’s role benefits from sophistication. Beyond simple <a href=\"https://dataalways.mirror.xyz/-m0-bp3aZpcqa15_QbMX3MD1v9xg7VCcfGtZBR7I9Bg\" rel=\"noopener nofollow ugc\">timing games</a>, more exotic strategies around the fork-choice rule (e.g., using extra fork-choice weight to <a href=\"https://ethresear.ch/t/on-attestations-block-propagation-and-timing-games/20272\">further delay block publication</a>, h/t Toni) are possible, and we are just starting to see these play out.</li>\n<li><span> <code>PTC</code> does not address <strong>design goal <span class=\"hashtag-raw\">#3:</span> Preserve the neutrality of Ethereum block space.</strong></span> Neither <code>PTC</code> nor PBS generally are designed to encourage censorship resistance. The fact that a few builders account for most of Ethereum’s blocks is not surprising, and we should not count on those builders to uphold the credible neutrality of the chain (even if they are right now). While it is true that <code>PTC</code> aims to maintain a decentralized validator set, the fact that the full block is sold counter-acts that effect by still giving discretionary power of the excluded transactions to the builder (e.g., consider the hypothetical where 100% of validators are at-home stakers (maximally decentralized), but they all outsource to the same builder <span class=\"math\">\\implies</span> the builder fully determines the transactions that land onchain).</li>\n</ul>\n<h3><a name=\"p-49714-execution-auctions-an-attester-proposer-separation-instatiation-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-execution-auctions-an-attester-proposer-separation-instatiation-5\"></a>Execution Auctions (an Attester-Proposer Separation Instatiation)</h3>\n<p>In contrast to the JIT block auction enabled by <code>PTC</code>, this design enshrines an ahead-of-time slot auction into the Ethereum consensus layer. A <a href=\"https://mirror.xyz/0x03c29504CEcCa30B93FF5774183a1358D41fbeB1/CPYI91s98cp9zKFkanKs_qotYzw09kWvouaAa9GXBrQ\" rel=\"noopener nofollow ugc\">slot auction</a> still allocates the entire block to the winner of the auction, but they no longer need to commit to the specific contents of the block when bidding (e.g., they are buying future block space) – this allows the auction to take place well in advance of the slot itself. The diagram below summarizes the block production pipeline <em>32 slots ahead of time</em> (the 32 is just an arbitrary number; you could run the auction any time in advance or even during the slot itself; the key distinction is the fact that the bids don’t contain commitments to the contents of the block).</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/3/6/36fa041386a05b37b3dad9e959dad6c329d506ba.png\" data-download-href=\"https://ethresear.ch/uploads/default/36fa041386a05b37b3dad9e959dad6c329d506ba\" title=\"upload_ba33d4610c47000f0ac60a5273f91f61\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/3/6/36fa041386a05b37b3dad9e959dad6c329d506ba_2_505x500.png\" alt=\"upload_ba33d4610c47000f0ac60a5273f91f61\" data-base62-sha1=\"7QlrhxVS6jHruAgABd4NJWnGO1k\" width=\"505\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/3/6/36fa041386a05b37b3dad9e959dad6c329d506ba_2_505x500.png, https://ethresear.ch/uploads/default/optimized/3X/3/6/36fa041386a05b37b3dad9e959dad6c329d506ba_2_757x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/3/6/36fa041386a05b37b3dad9e959dad6c329d506ba_2_1010x1000.png 2x\" data-dominant-color=\"F6F6F5\"></a></div><p></p>\n<p>N.B., the first three steps are nearly identical to the <code>PTC</code> process. The only differences are (a) the auction for the <code>Slot N+32</code> block production rights takes place during <code>Slot N</code> and (b) the bid object is a single <code>bid value</code> rather than the <code>(block header, bid value)</code> tuples. The actual building and publication of the block happen during <code>Slot N+32</code>, and <code>Execution Auctions</code> are agnostic to that process.</p>\n<ol>\n<li><strong>The builder bids</strong> in the auction by sending <code>bid value</code> to the proposer and the committee members.</li>\n<li><strong>The proposer commits</strong> to the highest bid value by signing and publishing the winning bid.</li>\n<li><strong>The committee enforces</strong> that the proposer selected a sufficiently high bid according to their view.</li>\n</ol>\n<h4><a name=\"p-49714-analysis-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-analysis-6\"></a>Analysis</h4>\n<ul>\n<li><code>Execution Auctions</code> allow the protocol (through the enforcement of the committee) to serve as the trusted third party in the <a href=\"https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=208b22c7a094ada20736593afcc8c759c7d1b79c\" rel=\"noopener nofollow ugc\">fair-exchange</a> of the sale of the block building rights for a future slot.</li>\n<li><span><code>Execution Auctions</code> primarily support <strong>design goal <span class=\"hashtag-raw\">#2:</span> limit the value of validator sophistication.</strong></span> With the real-time auction of <code>PTC</code>, we described how the value-in-flight problem results in value from the sophistication of the validators who conduct the auction. In <code>Execution Auctions</code>, the auction occurs apriori, making the value of the object sold less volatile. The validator conducting the auction has a much simpler role that doesn’t benefit from timing games in the way they do in the JIT auction, thereby reducing their value from sophistication.</li>\n<li><span><code>Execution Auctions</code> do not address <strong>design goal <span class=\"hashtag-raw\">#1:</span> encourage builder competition.</strong></span> By running the auction ahead of time, the highest value bidder will always be the builder who is best at producing blocks (h/t Max and Mallesh for <a href=\"https://arxiv.org/pdf/2408.03116\" rel=\"noopener nofollow ugc\">formalizing this</a>). The builder may still choose to sell the block production rights on the secondary market, but only at a premium over the amount they can extract.<a href=\"https://ethresear.ch#fn3dst\"><span class=\"math\">^{[3]}</span></a><a name=\"fn3\"></a></li>\n<li><span><code>Execution Auctions</code> do not address <strong>design goal <span class=\"hashtag-raw\">#3:</span> Preserve the neutrality of Ethereum block space.</strong></span> <code>Execution Auctions</code> are <em>not designed to encourage censorship resistance</em>. We fully expect the future block space and builder markets to remain centralized. Another major concern with <code>Execution Auctions</code> is the risk of multi-slot MEV. Because the auction is not real-time, it is possible to acquire multiple consecutive future slots and launch multi-slot MEV strategies without competing in any auction during the slot itself. (We could try to mitigate this by making the look-ahead only a single slot – e.g., <code>Slot N+1</code> auction during <code>Slot N</code>, but this may open up the same value-in-flight issues around JIT block auctions. More research is needed (and actively being done h/t Julian) here.)</li>\n</ul>\n<h3><a name=\"p-49714-focil-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-focil-7\"></a>FOCIL</h3>\n<p>This design allows multiple consensus participants to construct lists of transactions that must be included in a given slot. In contrast to the previous designs, this <em>is not</em> an auction and <em>does not</em> aim to enshrine a MEV marketplace into the protocol. Instead, the focus here is improving the system’s neutrality by allowing multiple parties to co-create a template (in the form of a set of constraints) for the produced block. The diagram below describes the block production process <em>during the slot itself.</em></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/c/bc6cae7b07f724344d704a6bd035e33e82f7500f.png\" data-download-href=\"https://ethresear.ch/uploads/default/bc6cae7b07f724344d704a6bd035e33e82f7500f\" title=\"upload_badb6db529bdfb2640abe1ce4d767dd2\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/c/bc6cae7b07f724344d704a6bd035e33e82f7500f_2_455x500.png\" alt=\"upload_badb6db529bdfb2640abe1ce4d767dd2\" data-base62-sha1=\"qSSC2LzxrDmdrY79j3qf78r0d7V\" width=\"455\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/c/bc6cae7b07f724344d704a6bd035e33e82f7500f_2_455x500.png, https://ethresear.ch/uploads/default/optimized/3X/b/c/bc6cae7b07f724344d704a6bd035e33e82f7500f_2_682x750.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/c/bc6cae7b07f724344d704a6bd035e33e82f7500f_2_910x1000.png 2x\" data-dominant-color=\"F6F7F7\"></a></div><p></p>\n<ol>\n<li><strong>The IL committee publishes</strong> their inclusion lists to the builder (clumping this together with the proposer for this diagram because the builder must follow the block template) and the attesters.</li>\n<li><strong>The builder publishes</strong> a block that includes an aggregate view of the ILs they received and conforms to the constraints therein.</li>\n<li><strong>The attesters enforce</strong> the block validity conditions, which now check that the builder included a sufficient threshold of observed inclusion lists.</li>\n</ol>\n<h4><a name=\"p-49714-analysis-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-analysis-8\"></a>Analysis</h4>\n<ul>\n<li><code>FOCIL</code> increases the protocol’s neutrality by allowing multiple validators to express their preferences in the block co-creation.</li>\n<li><span><code>FOCIL</code> primarily contributes to <strong>design goal <span class=\"hashtag-raw\">#3:</span> preserve the neutrality of Ethereum blockspace.</strong></span> This is the direct goal; more inputs to the block construction seems like a no-brainer (very much in line with the latest thread of <a href=\"https://www.youtube.com/watch?v=mJLERWmQ2uw\" rel=\"noopener nofollow ugc\">concurrent proposer research</a>). Critically, <code>FOCIL</code> intentionally does not give any MEV power to the inclusion list constructors (see <a href=\"https://ethresear.ch/t/uncrowdable-inclusion-lists-the-tension-between-chain-neutrality-preconfirmations-and-proposer-commitments/19372\"><em>Uncrowdability</em></a> for more) to avoid the economic capture of that role. In particular, <code>FOCIL</code> <em>does not</em> aim to constrain the builder’s ability to extract MEV generally; the builder can still reorder and insert transactions at will in their block production process. Instead, it’s their ability to <em>arbitrarily exclude</em> transactions, which <code>FOCIL</code> reduces.</li>\n<li><span><code>FOCIL</code> does not address <strong>design goal <span class=\"hashtag-raw\">#1:</span> encourage builder competition.</strong></span> <code>FOCIL</code> is agnostic to the exact block production process beyond enforcing a block template for transactions that cannot be excluded arbitrarily.</li>\n<li><span><code>FOCIL</code> does not address <strong>design goal <span class=\"hashtag-raw\">#2:</span> limit the value of validator sophistication.</strong></span> <code>FOCIL</code> is agnostic to the exact block production process beyond enforcing a block template for transactions that cannot be excluded arbitrarily.</li>\n</ul>\n<p>Right. That was the “vegetable eating” portion of this article. The critical takeaway is <strong>each of the above proposals primarily addresses one of the cited design goals, but none address all three simultaneously.</strong> This makes it easy to point out flaws in any specific design.<br>\n…<br>\nYou probably see where we are going with this. Let’s not bury the lede. What if we combine them? Each serves a specific role and operates on a different portion of the slot duration; why not play it out?</p>\n<h1><a name=\"p-49714-h-2-mechan-stein-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-h-2-mechan-stein-9\"></a>[2] Mechan-stein</h1>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/5/0/508d35ee9a4052135205628aa738a64cbcdd4c51.png\" data-download-href=\"https://ethresear.ch/uploads/default/508d35ee9a4052135205628aa738a64cbcdd4c51\" title=\"upload_bc314953eed471a97f9afd50b068bb14\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/5/0/508d35ee9a4052135205628aa738a64cbcdd4c51_2_440x500.png\" alt=\"upload_bc314953eed471a97f9afd50b068bb14\" data-base62-sha1=\"buAJSXQO5HfSBYYswmTEgmwSzOp\" width=\"440\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/5/0/508d35ee9a4052135205628aa738a64cbcdd4c51_2_440x500.png, https://ethresear.ch/uploads/default/optimized/3X/5/0/508d35ee9a4052135205628aa738a64cbcdd4c51_2_660x750.png 1.5x, https://ethresear.ch/uploads/default/original/3X/5/0/508d35ee9a4052135205628aa738a64cbcdd4c51.png 2x\" data-dominant-color=\"ADAB9A\"></a></div><p></p>\n<p>With the groundwork laid, we can ~nearly~ combine the three mechanisms directly. There is one issue, however, which arises from both auctions selling the same object – the proposing rights for <code>Slot N+32</code>. The resulting bids in the first auction (the slot auction sale of <code>Slot N+32</code> during <code>Slot N</code>) would thus not carry any economic meaning because bidders would be competing for the slot but would then be forced sellers by the time the slot arrived. To resolve this, the second auction (which happens JIT during the slot) could instead be a Top-of-Block auction (e.g., the first 5mm gas consumed in the block). There are many articles exploring the Top-of-Block/Rest-of-Block split (sometimes called block prefix/suffixes) (see, e.g., <a href=\"https://ethresear.ch/t/how-much-can-we-constrain-builders-without-bringing-back-heavy-burdens-to-proposers/13808\">here</a>, <a href=\"https://github.com/bharath-123/pepc-boost-relay\" rel=\"noopener nofollow ugc\">here</a>, <a href=\"https://ethresear.ch/t/state-lock-auctions-towards-collaborative-block-building/18558\">here</a>), so we won’t go into the details of the consensus changes required to facilitate this exchange. Taking its feasibility for granted, the double-auction design of Mechan-stein makes more sense.<br>\n- <strong>Auction 1 during <code>Slot N</code></strong> sells the block proposing rights for <code>Slot N+32</code> and is conducted by the proposer of <code>Slot N</code>.<br>\n- <strong>Auction 2 during <code>Slot N+32</code></strong> sells the Top-of-Block to a (potentially different) builder who specifies the specific set of transactions to be executed first in the block. This auction is conducted just in time by the builder/winner of Auction 1.</p>\n<p>With this framing, the winner of Auction 1 effectively bought the option to build (or sell) the Rest-of-Block for <code>Slot  N+32</code> – thus the expected value of the bids in that auction would be the average amount of MEV extractable in the block suffix (aside: this might play nicely with <a href=\"https://x.com/barnabemonnot/status/1808444762376020121\" rel=\"noopener nofollow ugc\">preconfs</a>). The diagram below shows the flow at a high level (leaving off many back-and-forths for legibility).</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/8/d/8dd0b952112b0f09ac63c9b1a5fba3e4c718dc60.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/8dd0b952112b0f09ac63c9b1a5fba3e4c718dc60\" title=\"upload_95efb121f762fdc00a15aecb64fe6e54-1\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/8/d/8dd0b952112b0f09ac63c9b1a5fba3e4c718dc60_2_690x373.jpeg\" alt=\"upload_95efb121f762fdc00a15aecb64fe6e54-1\" data-base62-sha1=\"keyvL4i2Ho9QV3E9PximOsHCRcA\" width=\"690\" height=\"373\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/8/d/8dd0b952112b0f09ac63c9b1a5fba3e4c718dc60_2_690x373.jpeg, https://ethresear.ch/uploads/default/optimized/3X/8/d/8dd0b952112b0f09ac63c9b1a5fba3e4c718dc60_2_1035x559.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/3X/8/d/8dd0b952112b0f09ac63c9b1a5fba3e4c718dc60_2_1380x746.jpeg 2x\" data-dominant-color=\"F5F5F5\"></a></div><p></p>\n<ol>\n<li><strong>The <code>Slot N</code> proposer auctions off</strong> the <code>Slot N+32</code> proposing rights.</li>\n<li><strong>The <code>Slot N</code> attesters enforce</strong> the bid threshold of the slot auction.</li>\n<li><em>[32 slots later]</em> <strong>The <code>Slot N+32</code> IL committee publishes</strong> their ILs.</li>\n<li><strong>The <code>Slot N+32</code> builder auctions off</strong> the Top-of-Block for <code>Slot N+32</code>.</li>\n<li><strong>The <code>Slot N+32</code> <code>PTC</code> enforces</strong> the bid threshold of the Top-of-Block auction.</li>\n<li><strong>The <code>Slot N+32</code> <code>PTC</code> enforces</strong> the timeliness of the block publication from the winning builder.</li>\n<li><strong>The <code>Slot N+32</code> attesters enforce</strong> the IL threshold of the final block.</li>\n</ol>\n<p>Yeah, yeah – it’s a lot of steps, but the pitch is pretty compelling.</p>\n<ul>\n<li><span>Mechan-stein addresses <strong>design goal <span class=\"hashtag-raw\">#1:</span> encourage builder competition.</strong></span> The permissionless, JIT Top-of-Block auction helps mitigate the risk of multi-slot MEV in <code>Execution Auctions</code> by <em>forcing</em> the slot auction winner to sell a portion of the block or at least pay a threshold to build the full block themselves.</li>\n<li><span>Mechan-stein addresses <strong>design goal <span class=\"hashtag-raw\">#2:</span> limit the value of validator sophistication.</strong></span> The role of an average validator in block production is now the simple combination of (1) conducting the ahead-of-time slot auction and (2) publishing their inclusion list when part of an IL committee. This greatly reduces the power bestowed on the validator because (1) they are now conducting an auction apriori (thus, latency and timing games play a smaller role) and (2) the inclusion list intentionally does not generate much value for MEV-carrying transactions (because it only guarantees inclusion rather than ordering).</li>\n<li><span>Mechan-stein addresses <strong>design goal <span class=\"hashtag-raw\">#3:</span> preserve the neutrality of Ethereum block space.</strong></span> By allowing many participants to co-create the set of constraints enforced on the builder of each block, high preference entropy is achieved without unduly benefiting the transactions that land in an inclusion list, as block builders can still reorder and insert at their leisure. However, the builder’s ability to exclude is limited, removing some of their monopolist power over the transactions in the block.</li>\n</ul>\n<p>The combined mechanism creates a set of checks and balances where the weaknesses of one design in isolation are the strengths of another. Everything is perfect, right?</p>\n<h3><a name=\"p-49714-potential-issues-with-mechan-stein-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-potential-issues-with-mechan-stein-10\"></a>Potential issues with Mechan-stein</h3>\n<p>It might not be only rainbows and butterflies. Without being comprehensive (neither in the list of potential issues nor the responses to said issues), let’s run down a few of the most obvious questions with Mechan-stein and some initial counter-points.</p>\n<ul>\n<li><span><strong>Point <span class=\"hashtag-raw\">#1</span></strong> – complexity, complexity, complexity.</span> This could (and maybe should) count for multiple points (h/t Mallesh for the relevant <a href=\"https://x.com/malleshpai/status/1748026472923623619\" rel=\"noopener nofollow ugc\">tweet</a>). Each of these proposals involves massive changes to the consensus layer of Ethereum with wide-ranging impact (particularly on the fork-choice rule). The devil is truly in the details, and getting something like this spec’ed out and implemented would be an immense research and engineering lift – let’s just say <a href=\"https://en.wikipedia.org/wiki/Occam%27s_razor\" rel=\"noopener nofollow ugc\">William of Ockham</a> would not be impressed.\n<ul>\n<li><span><strong>Counter-point <span class=\"hashtag-raw\">#1</span></strong> – building the future of finance in a permissionless and hyper-financialized world wasn’t going to be simple (“Rome wasn’t built in a day”).</span> It shouldn’t be shocking that there doesn’t seem to be a silver bullet for building an MEV-aware, decentralized, credibly neutral blockchain. Maybe eating the complexity now can leave the chain in a more stable equilibrium. Also, there may be significant synergies in combining designs (e.g., using the same committee for <code>FOCIL</code> and <code>PTC</code>). You could probably do a subset of Mechan-stein and still get some benefits (e.g., <code>FOCIL</code> + <code>PTC</code>).</li>\n</ul>\n</li>\n<li><span><strong>Point <span class=\"hashtag-raw\">#2</span></strong> – how may the ahead-of-time slot auction distort the MEV market?</span> Mostly just reciting <a href=\"https://arxiv.org/pdf/2408.03116\" rel=\"noopener nofollow ugc\">Max and Mallesh’s</a> argument (3rd time referencing that paper in this article lol). By removing the real-time nature of the initial auction, you bias it towards a winner-take-all for the best builder (or the “Best Block Space Future Value Estimator™”). I’d say this is similar in spirit to the Phil Daian view of making the competition as deterministic as possible (e.g., <a href=\"https://youtu.be/SBOGdofF4u8?t=620\" rel=\"noopener nofollow ugc\">“deterministic vs statistical opportunities”</a>).\n<ul>\n<li><span><strong>Counter-point <span class=\"hashtag-raw\">#2</span></strong> – that is the point of still having the <code>PTC</code> conduct a JIT Top-of-Block auction.</span> I think this feels reasonable. However, there is still a slight edge that the auctioneer (who may be a builder themselves) has in the JIT auction, which is they can benefit from the sophistication and latency investments as they are the auctioneer and a participant. As mentioned above, you could consider skipping the <code>Execution Auctions</code> part of Mechan-stein and just going with <code>FOCIL</code> + <code>PTC</code> (or even leave <code>MEV-boost</code> alone as the primary PBS market and just do <code>FOCIL</code>). (h/t Justin for pointing out that you could try to do <code>Execution Auctions</code> where multiple proposers (more than one auction winner) are selected – another combined mechanism that tries to mitigate the multi-slot MEV risk.)</li>\n</ul>\n</li>\n<li><span><strong>Point <span class=\"hashtag-raw\">#3</span></strong> – there is still power in being the block producer.</span> As pointed out in this <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870/3\">comment</a> and <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870/4\">its response</a> on the <code>FOCIL</code> post, there is still some discretionary power in being the block builder. Namely, they can choose which ILs they exclude from their aggregate up to some protocol-enforced tolerance. This notion of having an IL “aggregator” is the main difference between <code>FOCIL</code> and a leaderless approach like <a href=\"https://www.youtube.com/watch?v=mJLERWmQ2uw\" rel=\"noopener nofollow ugc\">Braid</a>.\n<ul>\n<li><span><strong>Counter-point <span class=\"hashtag-raw\">#3</span></strong> – this seems like a fundamental feature.</span> Again, I find myself leaning on Phil’s comment and mental model for “how economic power expresses itself in the protocol.” In a distributed system with network latency and geographic decentralization, some parties will have advantages over others. Suppose the protocol doesn’t explicitly imbue some participants with power during some period (e.g., by electing a leader). In that case, that power will still manifest somewhere else, likely in a more implicit (thus more sophisticated) way. This is more of a meta point, and I am happy to be convinced otherwise.</li>\n</ul>\n</li>\n</ul>\n<p>All right, going to cut it here; hope you found it interesting. Lot’s to think on still.</p>\n<p><em>thank for reading <img src=\"https://ethresear.ch/images/emoji/facebook_messenger/heart.png?v=12\" title=\":heart:\" class=\"emoji\" alt=\":heart:\" loading=\"lazy\" width=\"20\" height=\"20\"> -mike</em></p>\n<hr>\n<h3><a name=\"p-49714-footnotes-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49714-footnotes-11\"></a>footnotes</h3>\n<p><span class=\"math\">^{[1]}</span><a name=\"fn1dst\"></a>: It is worth noting that, conditioned on having strong censorship resistance properties, the difference between a monopolist builder and a competitive marketplace of builders isn’t so vital. As discussed with Barnabé and Julian, perhaps a more important property is the “replace-ability” of a monopolist builder if they begin abusing their power. All else being equal, I still prefer the outcome where we have multiple builders, even if just for the memetic reality of having a single block builder looks highly centralized, even if the other consensus participants heavily constrain them. Hence, builder competition still feels like a fair desiderata.<a href=\"https://ethresear.ch#fn1\"><img src=\"https://ethresear.ch/images/emoji/facebook_messenger/leftwards_arrow_with_hook.png?v=12\" title=\":leftwards_arrow_with_hook:\" class=\"emoji\" alt=\":leftwards_arrow_with_hook:\" loading=\"lazy\" width=\"20\" height=\"20\">︎</a></p>\n<p><span class=\"math\">^{[2]}</span><a name=\"fn2dst\"></a>: Vitalik pointed out that when he originally wrote this, he was referring more to the act of validating the blocks (e.g., by verifying a ZK proof) rather than explicitly participating in consensus. The name “validator” denotes someone who engages in consensus, which has been a nomenclatural pain point since the launch of the beacon chain. Despite this, I still like the framing of keeping some form of consensus participation decentralized (mainly as a means to better chain neutrality), so I will slightly abuse the naming confusion. xD <a href=\"https://ethresear.ch#fn2\"><img src=\"https://ethresear.ch/images/emoji/facebook_messenger/leftwards_arrow_with_hook.png?v=12\" title=\":leftwards_arrow_with_hook:\" class=\"emoji\" alt=\":leftwards_arrow_with_hook:\" loading=\"lazy\" width=\"20\" height=\"20\">︎</a></p>\n<p><span class=\"math\">^{[3]}</span><a name=\"fn3dst\"></a>: It is worth noting that validators could also choose to only sell their block at a premium in the more general case through the use of the <a href=\"https://writings.flashbots.net/the-cost-of-resilience\" rel=\"noopener nofollow ugc\"><code>min-bid</code></a> feature of <code>MEV-boost</code>. See more on <code>min-bid</code> from <a href=\"https://mirror.xyz/0x03c29504CEcCa30B93FF5774183a1358D41fbeB1/8aCbi_a-Gh5DWnkJWstm8zA5fvtoQB-QR5we7C8XC90\" rel=\"noopener nofollow ugc\">Julian</a> and <a href=\"https://hackmd.io/@dataalways/resilience\" rel=\"noopener nofollow ugc\">Data Always</a>. <a href=\"https://ethresear.ch#fn3\"><img src=\"https://ethresear.ch/images/emoji/facebook_messenger/leftwards_arrow_with_hook.png?v=12\" title=\":leftwards_arrow_with_hook:\" class=\"emoji\" alt=\":leftwards_arrow_with_hook:\" loading=\"lazy\" width=\"20\" height=\"20\">︎</a></p>\n            <p><small>7 posts - 5 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/mechan-stein-alt-franken-ism/20321\">Read full topic</a></p>","link":"https://ethresear.ch/t/mechan-stein-alt-franken-ism/20321","pubDate":"Wed, 21 Aug 2024 13:23:40 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20321"},"source":{"@url":"https://ethresear.ch/t/mechan-stein-alt-franken-ism/20321.rss","#text":"Mechan-stein (alt. Franken-ism)"},"filter":false},{"title":"L2 sequencer proving on weak hardware; parallelization and decentralization","dc:creator":"rezahsnz","category":"ZK Rollup","description":"<p><a href=\"https://ethresear.ch/t/vortex-building-a-prover-for-the-zk-evm/14427\">Linea’s sequencer</a> proves a 30m gassed block of transactions in 5 minutes. Here’s its setup:</p>\n<blockquote>\n<ul>\n<li>On a 96 cores machine with 384 GB of RAM (hpc6a.48xlarge on AWS)</li>\n<li>In 5 minutes (only including the inner-proof)</li>\n</ul>\n</blockquote>\n<p>So is it possible to reduce the proving time and, at the same time, obtain decentralization guarantees? We have an idea.</p>\n<h3><a name=\"p-49694-overview-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49694-overview-1\"></a>Overview</h3>\n<p>Almost all of the L2 sequencers are closed-source, intellectual property, and thus protected behind centralized setups. To cram that much power into an entity requires a great deal of justification today. To decentralize the flow, on the other hand, one has to accept certain amounts of delay and noise usually found in decentralized compute networks.</p>\n<h4><a name=\"p-49694-zkvms-recursion-and-risc0s-approach-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49694-zkvms-recursion-and-risc0s-approach-2\"></a>zkVMs, recursion, and Risc0’s approach</h4>\n<p>Any zkVM toolset puts a certain upper bound on the maximum number of cycles(roughly speaking 1 cycle equals 1 operation) it can prove in one go. This is usually done for efficiency reasons. For <a href=\"https://github.com/risc0\" rel=\"noopener nofollow ugc\">Risc0</a>, a RISC-V general zkVM, it is 2^24 ~ 16.78m cycles. With recursion, proving infinitely sized programs are made possible. So the solution is to divide a large program into individual sub-programs(called segment in Risc0 jargon) and have them proved one by one and aggregate the proofs into a final proof as if the whole program was proved in one go. For example, consider proving a 1b cycles program. With 16.78M maximum segment size limit, one ends up proving 60 segments. The upper bound for segment size limit is not the end of story however and one can customize it into a well-known range of [2^13 - 2^24]. Each segment limit size needs specific memory requirements shown on Table 1:<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/7/b790b7f5fb18cec94d0e621383844425862ba9fb.png\" data-download-href=\"https://ethresear.ch/uploads/default/b790b7f5fb18cec94d0e621383844425862ba9fb\" title=\"Screenshot from 2024-07-18 14-37-34\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/7/b790b7f5fb18cec94d0e621383844425862ba9fb_2_690x387.png\" alt=\"Screenshot from 2024-07-18 14-37-34\" data-base62-sha1=\"qbTqZ7OMhRtwxJFVg1x6kuxiXub\" width=\"690\" height=\"387\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/7/b790b7f5fb18cec94d0e621383844425862ba9fb_2_690x387.png, https://ethresear.ch/uploads/default/optimized/3X/b/7/b790b7f5fb18cec94d0e621383844425862ba9fb_2_1035x580.png 1.5x, https://ethresear.ch/uploads/default/original/3X/b/7/b790b7f5fb18cec94d0e621383844425862ba9fb.png 2x\" data-dominant-color=\"FAFAFA\"></a></div><br>\nExtrapolating Table 1’s values, we get 50m cycles for a program that needs 384gb of memory, in order to be proved in Risc0. Recall that Linea’s prover uses 384gb of memory to generate proofs. This is a naive 1-1 translation, but we can treat it as baseline for further testing. So, with this assumption, should one write Linea’s sequencer logic in Risc0, she would end up with a program that is 50m cycles long. Doubling cycles to ~90m, to account for aggregation won’t hurt here.<p></p>\n<h4><a name=\"p-49694-segmentation-parallel-proving-and-decentralization-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49694-segmentation-parallel-proving-and-decentralization-3\"></a>Segmentation, parallel proving, and decentralization</h4>\n<p>Recursion is a powerful idea in zkVM proving. With recursion once can get to prove seemingly large programs very quickly assuming she has a prove-ready network of machines. Table 2 shows a segmented prove session for a 90m cycles program on a pretty weak machine(8+ years old, Intel core i7 5500U(2C 4T), 16gb memory):<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/0/9/091af39f1eb4b3465f1de18222eed6c4d1051edb.png\" data-download-href=\"https://ethresear.ch/uploads/default/091af39f1eb4b3465f1de18222eed6c4d1051edb\" title=\"Screenshot from 2024-07-18 14-47-06\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/0/9/091af39f1eb4b3465f1de18222eed6c4d1051edb_2_690x235.png\" alt=\"Screenshot from 2024-07-18 14-47-06\" data-base62-sha1=\"1iy2x6FkIBx6qV5pfSRvPJE0oKT\" width=\"690\" height=\"235\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/0/9/091af39f1eb4b3465f1de18222eed6c4d1051edb_2_690x235.png, https://ethresear.ch/uploads/default/optimized/3X/0/9/091af39f1eb4b3465f1de18222eed6c4d1051edb_2_1035x352.png 1.5x, https://ethresear.ch/uploads/default/original/3X/0/9/091af39f1eb4b3465f1de18222eed6c4d1051edb.png 2x\" data-dominant-color=\"F0F4EF\"></a></div><p></p>\n<p>As you can see, different segment size limits result in varied proving regimes. In Table 2, two columns are colored in green, 2^18 and 2^19. Consulting Table 1, we would get 2gb and 4gb of required memory to prove them respectively. These columns are sweet spots for any zkVM proving network whose nodes are presumably weak. Focusing on the 2^19 segment size limit, to prove a 90m cycles program, one would need at least 168 nodes in order to prove the program in 4 minutes and 9 seconds. But 168 nodes is a faulty assumption. In reality, if a p2p network is to undertake the proving job, it needs to have redundancy values of 1:4 and above. The redundancy accounts for noise that is a feature of any p2p network. With 1:4 redundant nodes, 1 in every 5 nodes is assumed to be honest and the rest are time wasters. So, a 1:4 redundant p2p network needs at least of 840 nodes to get the job done.<br>\nAssuming that the proving network is p2p, one can expect to obtain decentralized guarantees en route.</p>\n<h3><a name=\"p-49694-conclusion-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49694-conclusion-4\"></a>Conclusion</h3>\n<p>Here we introduced an imaginary setup to decentralize and improve L2 sequencer proving times. If the claim turns out to be legit, we would expect to improve the overall proving time for any zkVM application area. In addition, the setup provides decentralization guarantees as a side effect. While everything looks nice, we, at <a href=\"https://github.com/WholesumNet\" rel=\"noopener nofollow ugc\">Wholesum network</a> would like to put this setup to test and see if it works in action. If successful, a p2p verifiable compute network of 10,000 weak nodes can handle up to 10 Linea like L2s.</p>\n<p>A somewhat more expanded version of this post is also available <a href=\"https://github.com/WholesumNet/docs/blob/779942cf6f650d24fcedf2d8da5a6dd2033a9fee/parallelization/parallelized-proving/report.pdf\" rel=\"noopener nofollow ugc\">here</a>.</p>\n<p>We appreciate your feedback.</p>\n            <p><small>3 posts - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/l2-sequencer-proving-on-weak-hardware-parallelization-and-decentralization/20313\">Read full topic</a></p>","link":"https://ethresear.ch/t/l2-sequencer-proving-on-weak-hardware-parallelization-and-decentralization/20313","pubDate":"Tue, 20 Aug 2024 15:18:35 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20313"},"source":{"@url":"https://ethresear.ch/t/l2-sequencer-proving-on-weak-hardware-parallelization-and-decentralization/20313.rss","#text":"L2 sequencer proving on weak hardware; parallelization and decentralization"},"filter":false},{"title":"On Proposer Timing Games and Economies of Scale","dc:creator":"Nero_eth","category":"Economics","description":"<h1><a name=\"p-49689-on-proposer-timing-games-and-economies-of-scale-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-on-proposer-timing-games-and-economies-of-scale-1\"></a>On Proposer Timing Games and Economies of Scale</h1>\n<p><a href=\"https://timing.pics\">Timing games</a> are a known phenomenon (<a href=\"https://eprint.iacr.org/2023/760\">[1]</a>, <a href=\"https://arxiv.org/abs/2305.09032\">[2]</a> and <a href=\"https://ethresear.ch/t/deep-diving-attestations-a-quantitative-analysis/20020\">[3]</a>). The concern is that proposer timing games come with a negative impact on the network.</p>\n<p>In the following, I want to show how the success of playing proposer timing games is also a function of economies of scale.</p>\n<p><strong>The main finding is:</strong><br>\n<em><strong> → An entity with 30% market share can delay 0.8s longer than a 5% entity.</strong></em><br>\n<em><strong> → For every 1% increase in validator market share, the delay in block proposals can increase by 0.03 seconds without facing additional reorg risk.</strong></em></p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/c/5/c58fec82d848d1fb7ae0352e8c50c4e8071253c5.png\" alt=\"tgeos\" data-base62-sha1=\"sbIpRwMTj4kkAqp5n8VjmOUp793\" width=\"456\" height=\"318\"></p>\n<p><em>Special thanks to <a href=\"https://x.com/weboftrees\">Anders</a>, <a href=\"https://x.com/mikeneuder\">Mike</a> and <a href=\"https://x.com/casparschwa\">Caspar</a> for feedback!</em></p>\n<h2><a name=\"p-49689-introduction-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-introduction-2\"></a>Introduction</h2>\n<p>A proposer must gather at least 40% of these votes to ensure their block is accepted and not reorged by the following proposer. It’s 40% because that’s the proposer boost threshold. Blocks with less than 40% attestations can be reorged by the next proposer leveraging proposer boost. The challenge for a timing-gamer lies in determining the optimal time to propose (or call getHeader). An economically rational validator would want to wait as long as possible (providing the builder with the longest possible time window) without risking a reorg.</p>\n<p>First, let’s revisit the following chart from <a href=\"https://ethresear.ch/t/deep-diving-attestations-a-quantitative-analysis/20020\">this analysis</a>:<br>\n</p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/4/2/42fe46361f7b2a22bd61c0195f719a57df04d64d.png\" data-download-href=\"https://ethresear.ch/uploads/default/42fe46361f7b2a22bd61c0195f719a57df04d64d\" title=\"42fe46361f7b2a22bd61c0195f719a57df04d64d\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/4/2/42fe46361f7b2a22bd61c0195f719a57df04d64d_2_690x304.png\" alt=\"42fe46361f7b2a22bd61c0195f719a57df04d64d\" width=\"690\" height=\"304\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/4/2/42fe46361f7b2a22bd61c0195f719a57df04d64d_2_690x304.png, https://ethresear.ch/uploads/default/optimized/3X/4/2/42fe46361f7b2a22bd61c0195f719a57df04d64d_2_1035x456.png 1.5x, https://ethresear.ch/uploads/default/original/3X/4/2/42fe46361f7b2a22bd61c0195f719a57df04d64d.png 2x\" data-dominant-color=\"FBFBFC\"></a></div><p></p>\n<p><strong>~80% of all attestations are seen until second 5 in the slot</strong>. The <strong>40% threshold is reached somewhere around second 3.8</strong>. Thus, assuming zero latency, a block published at second 3.8 should still be able to receive 60% of attestations.</p>\n<p><strong>In the following, we refer to this curve as <span class=\"math\">C(t)</span>.</strong></p>\n<h2><a name=\"p-49689-initial-setup-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-initial-setup-3\"></a>Initial Setup</h2>\n<p>The core idea is to determine how the cumulative votes cast by validators evolve over a slot and how a proposer’s control over a portion of these validators may influence the optimal timing of their block proposal.</p>\n<p>Given that <span class=\"math\">C(t)</span> represents the cumulative percentage of votes cast by time <span class=\"math\">t</span>, the proposer controls <span class=\"math\">x\\%</span> of validators, and needs to ensure that they can still reach at least 40% by the time they propose, we start with the following condition:</p>\n<div class=\"math\">\nx + (1 - C(t)) \\times (1 - x) \\geq 0.4\n</div>\n<p>In this equation:</p>\n<ul>\n<li><strong><span class=\"math\">(1 - C(t)) \\times (1 - x)</span>:</strong> The remaining uncast votes from validators not controlled by the proposer, which could support the proposer’s block.</li>\n</ul>\n<blockquote>\n<p>Note that <strong><span class=\"math\">x \\times C(t)</span></strong> would be the portion of votes from the proposer’s validators already included in <span class=\"math\">C(t).</span></p>\n</blockquote>\n<p>Two assumptions are important to stress:</p>\n<ul>\n<li><strong>Coordination</strong>: It is assumed that validators coordinate when attesting, e.g. using a central oracle that provides the commands.</li>\n<li><strong>Honest Validators</strong>: All validators who have not yet voted at the time of the block proposal will vote for the proposed block (and not the parent block). See <a href=\"https://github.com/ethereum/consensus-specs/blob/b2f2102dad0cd8b28a657244e645e0df1c0d246a/specs/phase0/validator.md#phase-0----honest-validator\">honest validator specs</a>.</li>\n</ul>\n<h3><a name=\"p-49689-simplifying-the-equation-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-simplifying-the-equation-4\"></a>Simplifying the Equation</h3>\n<p>We rearrange the initial equation to find the threshold for <span class=\"math\">C(t)</span>, the cumulative percentage of votes that can be cast before the proposer must act:</p>\n<div class=\"math\">\nx + (1 - C(t)) \\times (1 - x) \\geq 0.4\n</div>\n<p>Expanding and simplifying:</p>\n<div class=\"math\">\n(1−C(t))×(1−x) = 1 - x - C(t) + C(t) \\times x \n</div>\n<div class=\"math\">\n1 - C(t) + C(t) \\times x \\geq 0.4\n</div>\n<p>Finally, solving for <span class=\"math\">C(t)</span>:</p>\n<div class=\"math\">\nC(t) \\leq \\frac{0.6}{1 - x}\n</div>\n<p>Find the complete derivation <a href=\"https://hackmd.io/L0A6zeBZSzGew2Ni0AzFVQ\">here</a>.</p>\n<h3><a name=\"p-49689-interpretation-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-interpretation-5\"></a>Interpretation</h3>\n<p>This simplified equation <span class=\"math\">C(t) \\leq \\frac{0.6}{1 - x}</span> means that the proposer can safely propose as long as the cumulative attestations <span class=\"math\">C(t)</span> remain below the threshold defined by <span class=\"math\">\\frac{0.6}{1 - x}</span>.</p>\n<ul>\n<li><strong><span class=\"math\">C(t)</span>:</strong> The cumulative percentage of votes cast by time <span class=\"math\">t</span>.</li>\n<li><strong><span class=\"math\">x \\%</span>:</strong> The percentage of total validators controlled by the proposer.</li>\n<li><strong><span class=\"math\">0.4</span>:</strong> The 40% threshold needed to secure a majority (<span class=\"math\">1-0.4=0.6)</span>.</li>\n</ul>\n<p>The equation ensures that the proposer, with their share of validators, can still influence the outcome favorably by proposing before the cumulative attestations exceed this threshold.</p>\n<p>A node operator with many validators can risk a few seconds more than a small-size operator, knowing that their own validators will never vote against them.</p>\n<p><strong>The following chart shows the effects of economies of scale and answers the question of <em>how long a node operator with <em>x%</em> market share can maximally wait until the point it won’t be able to receive at least 40% of all attestations anymore</em>.</strong></p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/e/2/e24d2c92d6d6e9a6965edcac0b21f454c6404795.png\" data-download-href=\"https://ethresear.ch/uploads/default/e24d2c92d6d6e9a6965edcac0b21f454c6404795\" title=\"timing_games_proposer_share\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/e/2/e24d2c92d6d6e9a6965edcac0b21f454c6404795_2_690x383.png\" alt=\"timing_games_proposer_share\" data-base62-sha1=\"whXfGVbSxvX8hcoDUyfDKp6p04B\" width=\"690\" height=\"383\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/e/2/e24d2c92d6d6e9a6965edcac0b21f454c6404795_2_690x383.png, https://ethresear.ch/uploads/default/original/3X/e/2/e24d2c92d6d6e9a6965edcac0b21f454c6404795.png 1.5x, https://ethresear.ch/uploads/default/original/3X/e/2/e24d2c92d6d6e9a6965edcac0b21f454c6404795.png 2x\" data-dominant-color=\"FAF9F9\"></a></div><p></p>\n<p>The “<em>seconds in slot</em>” values on the y-axis are <code>attestation_seen</code> timestamps that are not corrected by the time required for block propagation and verification. Since those numbers are just constants impacting the absolute values on the y-axis, this doesn’t matter in making the relative impact of market share on the limits of timing games visible.</p>\n<p><strong>We can see that a node operator with 30% of the market share can potentially wait 0.8 seconds longer than a node operator with 5% market share while risking the same.</strong></p>\n<h2><a name=\"p-49689-in-python-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-in-python-6\"></a>In Python</h2>\n<p>Using Python, we can calculate the latest “safe” proposal time for different percentages of validator control. Here’s the key part of the implementation:</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">import numpy as np\nfrom scipy.interpolate import interp1d\n\n# Provided cumulative attestation data (seconds, % of casted attestations)\ndata = [\n     (0.791, 0.0005390835579514825),\n     # (additional data points omitted for brevity)\n     (2.228, 0.05444743935309973),\n     (2.464, 0.10835579514824797),\n     (2.639, 0.16226415094339622),\n     (2.777, 0.21617250673854446),\n     (2.932, 0.27008086253369273),\n     (3.104, 0.323989218328841),\n     (3.308, 0.3778975741239892),\n     (3.627, 0.43180592991913747),\n     (4.069, 0.4857142857142857),\n     (4.25, 0.539622641509434),\n     (4.407, 0.5935309973045823),\n     (4.576, 0.6474393530997304),\n     (4.723, 0.7013477088948787),\n     (4.898, 0.7552560646900269),\n     (5.039, 0.8091644204851752),\n     (5.245, 0.8630727762803234),\n     (5.521, 0.9169811320754717),\n     (6.187, 0.9708894878706199)\n]\n\n# Extracting the times and cumulative attestation percentages\ntimes = np.array([point[0] for point in data])\ncumulative_attestations = np.array([point[1] for point in data])\n\n# Interpolating the cumulative attestation function\ncumulative_attestation_func = interp1d(times, cumulative_attestations, kind='linear', fill_value=\"extrapolate\")\n\n# Function to calculate the latest time a proposer with x% control can safely propose a block\ndef calculate_latest_proposal_time(x):\n    threshold = 0.5 / (1 - x)\n    \n    for t in np.linspace(times[0], times[-1], 1000):\n        if cumulative_attestation_func(t) &gt; threshold:\n            return t\n    return None\n\n</code></pre>\n<h1><a name=\"p-49689-conclusion-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49689-conclusion-7\"></a>Conclusion</h1>\n<p>By understanding and calculating the relationship between validator market share and cumulative attestations, proposers can optimize their proposal timing to minimize the likelihood of reorgs while maximizing profits.</p>\n<p>Such strategies could be improved by checking which CL client the subsequent validator runs, or, even simpler, the slot index in an epoch. Based on that information one can better estimate the chances of getting reorged (e.g. if it’s Teku, Nimbus, Lodestar, or the last slot in an epoch, then the reorg probability is significantly lower because no honest reorg strategy is implemented).</p>\n<p>Pushing proposer timing games to their limits has a <a href=\"https://ethresear.ch/t/on-attestations-block-propagation-and-timing-games/20272\">negative impact on attesters</a> and can have cascading effects: If validators realize they miss out on profits because they vote for the wrong block too often, they might start delaying their attestation.</p>\n<p><strong>Ultimately, pushing timing games to their limits can have a detrimental impact on the network. Furthermore, validator coordination that goes beyond running multiple validators from a single node shouldn’t be tolerated/supported. Now, it is important to follow/contribute to block construction research and find ways to <a href=\"https://eips.ethereum.org/EIPS/eip-7716\">reduce the profitability of timing games</a> or prevent them entirely.</strong></p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/on-proposer-timing-games-and-economies-of-scale/20309\">Read full topic</a></p>","link":"https://ethresear.ch/t/on-proposer-timing-games-and-economies-of-scale/20309","pubDate":"Tue, 20 Aug 2024 05:48:59 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20309"},"source":{"@url":"https://ethresear.ch/t/on-proposer-timing-games-and-economies-of-scale/20309.rss","#text":"On Proposer Timing Games and Economies of Scale"},"filter":false},{"title":"Decentralized and Verifiable Cloud Service on Ethereum","dc:creator":"0x1cc","category":"Applications","description":"<p><em>by <a href=\"https://x.com/0x_1cc\" rel=\"noopener nofollow ugc\">KD.Conway</a></em></p>\n<h2><a name=\"p-49659-tldr-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-tldr-1\"></a>TL;DR</h2>\n<ul>\n<li>\n<p>We propose a decentralized and verifiable cloud service protocol on Ethereum, which can provide computationally intensive service to all web2 or web3 applications, making decentralized ChatGPT, decentralized blockchain explorer reality. By migrating the full stack, including frontend and backend components, to the decentralized cloud, we move toward fully decentralized and verifiable end-to-end Web3 applications.</p>\n</li>\n<li>\n<p>The protocol operates under a minority trust assumption, requiring only one honest node to guarantee service quality. Additionally, the correctness of the cloud service is verifiable on Ethereum.</p>\n</li>\n<li>\n<p>With near-zero on-chain costs, our decentralized cloud service platform can be even more affordable than traditional centralized options.</p>\n</li>\n</ul>\n<h2><a name=\"p-49659-protocol-overview-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-protocol-overview-2\"></a>Protocol Overview</h2>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/d/8/d816db0bb6bbc127b1a5f2fa1f320e7c923dbb77.png\" data-download-href=\"https://ethresear.ch/uploads/default/d816db0bb6bbc127b1a5f2fa1f320e7c923dbb77\" title=\"ecs\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/d/8/d816db0bb6bbc127b1a5f2fa1f320e7c923dbb77_2_690x331.png\" alt=\"ecs\" data-base62-sha1=\"uPC6iBUHxlToWnG59kzCXWtSGtF\" width=\"690\" height=\"331\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/d/8/d816db0bb6bbc127b1a5f2fa1f320e7c923dbb77_2_690x331.png, https://ethresear.ch/uploads/default/optimized/3X/d/8/d816db0bb6bbc127b1a5f2fa1f320e7c923dbb77_2_1035x496.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/d/8/d816db0bb6bbc127b1a5f2fa1f320e7c923dbb77_2_1380x662.png 2x\" data-dominant-color=\"F1F2F3\"></a></div><p></p>\n<p>A service contract exists on Ethereum, functioning similarly to a gRPC protobuf. This contract defines the service, and the functions within it specify the methods that can be invoked.</p>\n<p>Each service provider must register and stake on the service contract. For each service, multiple providers will be available to offer the service.</p>\n<p>When a user initiates a service request, such as requesting an AI inference from an LLM model:</p>\n<ul>\n<li>\n<p>The user first utilizes a verifiable Ethereum light client, such as Helios, to retrieve the list of available service providers from the on-chain service contract.</p>\n</li>\n<li>\n<p>The user randomly selects several providers from this list.</p>\n</li>\n<li>\n<p>The user then sends off-chain transactions to these selected providers in parallel. These off-chain transactions are essentially the same as calling the corresponding service function in the smart contract, but they use a different chain ID. This specific chain ID indicates that the transaction is intended to call a cloud service rather than perform an on-chain transaction on Ethereum.</p>\n</li>\n<li>\n<p>The service providers execute the required computations in their local environments according to the program defined in the corresponding function in the service contract. They then return the responses to the user. Each response is signed by the service provider and includes the user’s transaction hash and the results.</p>\n</li>\n<li>\n<p>Upon receiving the responses from the selected providers, the user first verifies the signatures and checks the consistency of the results.</p>\n<ul>\n<li>\n<p>If the results are consistent, the service is considered to have functioned correctly, and no further action is required.</p>\n</li>\n<li>\n<p>If there is a discrepancy in the results, this indicates the presence of at least one malicious service provider. In this case, the user submits the providers’ responses to the on-chain arbitration contract. This triggers a process where the service providers must defend the accuracy of their results. The on-chain arbitration process is detailed in the following section.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-49659-service-contract-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-service-contract-3\"></a>Service Contract</h2>\n<p>The design of the service contract is akin to the design of gRPC. A new service contract corresponds to a new service in gRPC, and the functions defined in the service contract specify the methods that can be invoked. Due to the constraints of smart contracts, we cannot implement complex computations, such as AI computations, directly within the smart contract. Instead, we define a standard for writing a program, which is then uploaded to decentralized DA services, with the program’s hash stored in the on-chain smart contract.</p>\n<p>Following the design principle of “Separate Execution from Proving,” there are two implementations for the service program. One is compiled for native execution, optimized for speed, and can leverage multithreaded CPUs and GPUs to accelerate execution. The other implementation is for proving; the service program is compiled into machine-independent code, allowing us to use zkVM (zero-knowledge virtual machine) or fpVM (fraud-proof virtual machine) to generate proofs. This dual-target approach ensures fast execution, while proving is based on the machine-independent code.</p>\n<p>For example, consider matrix multiplication. Native execution utilizes GPU computation (e.g., CUDA) for acceleration. During the proving phase, the service program is compiled into machine-independent instructions, which can be executed in zkVM or fpVM. Both implementations ensure consistent execution results.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/1/b1ccfdf9e6f994151293a835a4619dca5e974865.png\" data-download-href=\"https://ethresear.ch/uploads/default/b1ccfdf9e6f994151293a835a4619dca5e974865\" title=\"output\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/b/1/b1ccfdf9e6f994151293a835a4619dca5e974865_2_690x151.png\" alt=\"output\" data-base62-sha1=\"pmTHL7pfXZqNQUG3qbGzDdecvfD\" width=\"690\" height=\"151\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/b/1/b1ccfdf9e6f994151293a835a4619dca5e974865_2_690x151.png, https://ethresear.ch/uploads/default/optimized/3X/b/1/b1ccfdf9e6f994151293a835a4619dca5e974865_2_1035x226.png 1.5x, https://ethresear.ch/uploads/default/optimized/3X/b/1/b1ccfdf9e6f994151293a835a4619dca5e974865_2_1380x302.png 2x\" data-dominant-color=\"F8F8F9\"></a></div><p></p>\n<p>When processing user requests, service providers will run the program in the native execution environment and return the results to the users. Only when on-chain arbitration is required will the service providers run the program for proving. This approach allows service providers to handle requests as quickly as possible in most cases.</p>\n<p>Additionally, the service program can be configured to read data from trustworthy sources, such as Ethereum or other blockchains, as well as from decentralized, trustworthy data storage providers. This flexibility allows the service program to function as a blockchain explorer, an AI service, or a decentralized search engine.</p>\n<p>A demo version of the service contract is shown below.</p>\n<pre data-code-wrap=\"solidity\"><code class=\"lang-solidity\">contract Service {\n\n    // address =&gt; web2 domain\n    mapping(address =&gt; string) serviceProviderHost;\n\n    address[] serviceProviders;\n\n    // function selector =&gt; programHash\n    mapping(bytes4 =&gt; bytes32) programHashs;\n\n    event Request(\n        address account,\n        bytes4 functionSelector,\n        bytes32 programHash,\n        bytes input\n    );\n\n    function func1(bytes calldata input) public {\n        emit Request(msg.sender, this.func1.selector, programHashs[this.func1.selector], input);\n    }\n}\n</code></pre>\n<p>Note that <code>func1</code> specifies the method that can be called. When a user wants to call <code>func1</code>, instead of sending an on-chain transaction on Ethereum, the user needs to send an off-chain transaction directly to the service providers. Besides, the user can obtain the list of service provider addresses, along with their corresponding Web2 domains using Ethereum verifiable light client.</p>\n<h2><a name=\"p-49659-onchain-arbitration-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-onchain-arbitration-4\"></a>Onchain Arbitration</h2>\n<p>We support multiple proving systems for on-chain arbitration, including zero-knowledge proofs, Trusted Execution Environments (TEE), and fraud-proof systems. For demonstration purposes, we focus on the fraud-proof system, as it offers lower generation costs compared to zero-knowledge proofs and does not require specific hardware. In previous work, we demonstrated the ability to generate fraud proofs for extremely large AI models. For more details, please refer to opML (<a href=\"https://arxiv.org/abs/2401.17555\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">[2401.17555] opML: Optimistic Machine Learning on Blockchain</a>).</p>\n<p>The on-chain arbitration process using the fraud-proof system proceeds as follows:</p>\n<ul>\n<li>\n<p>If a user receives inconsistent results from the service providers, they submit the providers’ responses to the on-chain arbitration contract, initiating an interactive dispute game with all the involved providers.</p>\n</li>\n<li>\n<p>At this point, the service providers must run the proving-version of the service program in their local fraud-proof VMs to generate the fraud proof, which they then submit to the on-chain arbitration contract to defend their results. For more details on the interactive dispute game, refer to the fraud-proof system design.</p>\n</li>\n<li>\n<p>Service providers who supplied incorrect results will lose the dispute game, resulting in their staked amount being slashed. The slashed stake will be distributed to the winners of the dispute game, as well as to the user, as compensation.</p>\n</li>\n</ul>\n<p>This on-chain arbitration mechanism ensures that only one honest node is required to guarantee the correctness of the provided service. As a result, the protocol relies on a minority trust assumption and inherits security from Ethereum. Assuming at least one honest node and the safety of Ethereum, the protocol can guarantee the correctness of the service.</p>\n<p>It’s important to note that on-chain arbitration only occurs when some service providers produce incorrect results. In typical cases, no on-chain interaction is needed, which allows the service to operate as quickly as current centralized cloud service providers.</p>\n<h2><a name=\"p-49659-charging-mechanism-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-charging-mechanism-5\"></a>Charging Mechanism</h2>\n<p>There are several possible charging mechanisms:</p>\n<ul>\n<li>\n<p><strong>Subscription Model:</strong> This is similar to the Web2 approach, where the charging mechanism can be conducted off-chain. For example, to use ChatGPT via an API for commercial purposes, you would pay OpenAI a monthly fee to access their services. Multiple service providers can offer the service, allowing for competition and choice.</p>\n</li>\n<li>\n<p><strong>On-Chain Payment Mechanism:</strong> Paying for each request on-chain can be costly due to transaction fees. Batching and rolling up these requests and payments can significantly reduce on-chain transaction costs. One possible approach is to use payment channels to pay for requests. Alternatively, service providers could generate service proofs and claim fees as follows:</p>\n<ul>\n<li>\n<p>A service agreement contract specifies the price for each service request.</p>\n</li>\n<li>\n<p>Users first stake funds into the service agreement contract.</p>\n</li>\n<li>\n<p>Service providers can claim their fees by submitting service proofs to the on-chain service agreement contract. To minimize transaction costs, providers can batch and roll up user requests.</p>\n</li>\n<li>\n<p>The on-chain service proof is a zk-proof, which verifies that the service provider has delivered a certain number of responses to users. The provider can then claim the corresponding service fees according to the agreement contract. This proof ensures the correctness of the user’s request transaction signature, the service provider’s response signature, and the transaction nonce.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Free Service Model:</strong> Another approach is for companies to cover the service fees by the themselves (currently, the web2 companies pay the cloud service fee by themselves), offering free services to users while generating revenue through other means, such as advertising or VIP services.</p>\n</li>\n</ul>\n<h2><a name=\"p-49659-advantages-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-advantages-6\"></a>Advantages</h2>\n<ul>\n<li>\n<p>This decentralized cloud service can be cheaper than centralized cloud services while maintaining similar speed.</p>\n<ul>\n<li>\n<p><strong>Cost-Effectiveness:</strong> Decentralized servers can be significantly cheaper than centralized cloud servers. For example, <a href=\"http://io.net\" rel=\"noopener nofollow ugc\">io.net</a> has shown that the cost of decentralized GPUs can be as low as one-third of the cost of AWS. For services with lower security requirements, such as using LLMs for personal queries, using just two nodes is often sufficient. Additionally, a random check mechanism can be adopted, querying one node most of the time and occasionally checking another to verify correctness. This setup can be more cost-effective than centralized platform.</p>\n</li>\n<li>\n<p><strong>Scalability and Speed:</strong> This platform can outperform centralized systems, especially for computationally intensive tasks. A decentralized cloud service platform operates on an N-to-M model (N users with M servers, where the number of servers can be infinite), whereas centralized platforms use an N-to-1 model (N users with a single super server). This allows a decentralized cloud service platform to scale more effectively. For instance, a centralized AI platform like ChatGPT may slow down during peak times because it can’t scale its computing power quickly enough. In contrast, decentralized platform can dynamically distribute the load across many servers, ensuring faster response times even during heavy usage.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Trustless and Verifiable:</strong> The protocol operates under a minority trust assumption, requiring only one honest node to guarantee service quality. Additionally, the correctness of the cloud service is verifiable on Ethereum.</p>\n</li>\n<li>\n<p><strong>Censorship-Resilient:</strong> This platform contributes to a more robustly decentralized Web3, enhancing censorship resistance.</p>\n</li>\n</ul>\n<h2><a name=\"p-49659-toward-fully-decentralized-and-verifiable-web3-application-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-toward-fully-decentralized-and-verifiable-web3-application-7\"></a>Toward Fully Decentralized and Verifiable Web3 Application</h2>\n<p>With this protocol, we can move toward fully decentralized and verifiable Web3 applications.</p>\n<p><strong>Decentralized and Verifiable Blockchain Explorer:</strong> Currently, blockchain explorers like Etherscan are hosted by centralized entities, and the results they present are not verifiable. If such an explorer were hacked, it could display malicious and misleading information, such as fake transactions or contracts, potentially leading to phishing scams. By migrating the entire blockchain explorer—including both the frontend and backend services—to our platform, we can ensure full verifiability and robust security for the blockchain explorer.</p>\n<p><strong>Decentralized, Verifiable, Faster, and Cheaper AI Platform:</strong> This protocol enables the creation of a fully decentralized, verifiable, and cost-effective AI platform. By moving the entire stack, including both frontend and backend services as well as AI computation, to a decentralized cloud, we can build an AI platform that is not only more affordable but also potentially faster than centralized alternatives.</p>\n<p><strong>Decentralized Cloud Gaming:</strong> Some games require high-end hardware, such as powerful GPUs and CPUs, leading game companies to move their games to cloud services, reducing the hardware requirements for customers. We can similarly bring Web3 games to our platform. Since our platform is verifiable on Ethereum, game reward settlements can be easily managed through smart contracts.</p>\n<h2><a name=\"p-49659-further-discussion-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-further-discussion-8\"></a>Further Discussion</h2>\n<h3><a name=\"p-49659-updating-the-state-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-updating-the-state-9\"></a>Updating the State</h3>\n<p>In the previous discussion, the service program operates under a stateless design, meaning it does not modify its internal state. However, the data source used by the service program is upgradable. For instance, if a service program uses Ethereum as its data source, users can interact with smart contracts on Ethereum to update the state. The service program can then utilize the latest Ethereum state as its data source, enabling the implementation of a decentralized explorer.</p>\n<p>If updating the internal state of the service program is required, a state machine replication network must be established among the service providers. In this case, each service program would correspond to a layer 2 or layer 3 blockchain on Ethereum. When users invoke a method that updates the internal state, they would send the transaction to the corresponding layer 2 or layer 3 blockchain. The service providers would then reach a consensus on the execution results of that transaction and update the internal state accordingly. Periodically, the layer 2 blockchain would roll up the transactions and its latest state back to Ethereum.</p>\n<h3><a name=\"p-49659-verifiable-fhe-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-verifiable-fhe-10\"></a>Verifiable FHE</h3>\n<p>To ensure user privacy, Fully Homomorphic Encryption (FHE) can be integrated into our protocol. In this case, the FHE computation would be incorporated into the service program. Instead of sending plaintext data to the service providers, users would encrypt their input and send only the ciphertext, thereby preserving their privacy. Additionally, if on-chain arbitration is triggered, the FHE service program would be compiled into machine-independent instructions, and a fraud proof or zk-proof would be generated to make the FHE computation fully verifiable.</p>\n<h2><a name=\"p-49659-related-work-and-comparison-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49659-related-work-and-comparison-11\"></a>Related Work and Comparison</h2>\n<p><strong>Comparison with Web3URL</strong></p>\n<p>Web3URL (<a href=\"https://w3url.w3eth.io/\" rel=\"noopener nofollow ugc\">https://w3url.w3eth.io/</a>) is an interesting project that transforms Ethereum into an unstoppable decentralized web server. Our protocol can be seen as a significant extension of Web3URL. In Web3URL, service functions must be written within smart contracts, which naturally limits large-scale applications. In contrast, our protocol supports complex service programs, such as AI computations, and provides flexible access to large-scale data, making decentralized ChatGPT and decentralized explorers a reality.</p>\n<p><strong>Comparison with ICP</strong></p>\n<p>The Internet Computer (ICP: <a href=\"https://internetcomputer.org/\" rel=\"noopener nofollow ugc\">https://internetcomputer.org/</a>) hosts decentralized serverless compute, similar to our goal of creating a decentralized cloud service platform. However, we differ from ICP in several key aspects:</p>\n<ul>\n<li>\n<p><strong>Ethereum Integration:</strong> We are building on Ethereum, allowing us to inherit its security features.</p>\n</li>\n<li>\n<p><strong>Higher Security:</strong> We achieve a higher level of security compared to ICP. While ICP operates in a Byzantine Fault Tolerance (BFT) network under a majority trust assumption—requiring that most nodes in the subnet are honest—we adopt an approach similar to rollups, with on-chain arbitration ultimately reverting to Ethereum. This allows us to guarantee correctness under a minority trust assumption, where just one honest node can ensure the integrity of our protocol.</p>\n</li>\n<li>\n<p><strong>Complex Computation:</strong> Following the design principle of “Separate Execution from Proving,” we can handle complex computations natively, such as LLM inference or even fine-tuning. In contrast, service programs in ICP always run within canisters, which significantly limits their applicability for large-scale computations.</p>\n</li>\n</ul>\n<p>If you are interested in this project or have suggestions for improvements, please feel free to reach out to me.</p>\n            <p><small>6 posts - 4 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/decentralized-and-verifiable-cloud-service-on-ethereum/20292\">Read full topic</a></p>","link":"https://ethresear.ch/t/decentralized-and-verifiable-cloud-service-on-ethereum/20292","pubDate":"Sat, 17 Aug 2024 11:48:03 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20292"},"source":{"@url":"https://ethresear.ch/t/decentralized-and-verifiable-cloud-service-on-ethereum/20292.rss","#text":"Decentralized and Verifiable Cloud Service on Ethereum"},"filter":false},{"title":"Censorship Insurance Markets for BRAID","dc:creator":"jonahb27","category":"Block proposer","description":"<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/b/f/bf7665c93b36acdfa0cb7c8ed757aa3ef87f101f.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/bf7665c93b36acdfa0cb7c8ed757aa3ef87f101f\" title=\"BRAID\"><img src=\"https://ethresear.ch/uploads/default/original/3X/b/f/bf7665c93b36acdfa0cb7c8ed757aa3ef87f101f.jpeg\" alt=\"BRAID\" data-base62-sha1=\"rjKRtDgYAP4vmSSayhZ1b1A8Fm7\" width=\"500\" height=\"500\" data-dominant-color=\"495C57\"></a></div><p></p>\n<p>By: <a href=\"https://x.com/_jonahb_\">Jonah Burian</a> and <a href=\"https://x.com/BenLevy0\">Ben Levy</a></p>\n<p><em>Tl;dr: We point out that BRAID’s liquidity requirements lead to poor user UX and suggest censorship insurance markets as a potential solution.</em></p>\n<p><em>Thanks to <a href=\"https://x.com/maxresnick1\">Max Resnick</a> and <a href=\"https://x.com/davidecrapis\">Davide Crapis</a> for the feedback.</em></p>\n<h2><a name=\"p-49651-intro-1\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-intro-1\"></a>Intro</h2>\n<blockquote>\n<p>“The greatness of <s>America</s> <em>Ethereum</em> lies not in being more enlightened than any other <s>nation</s> <em>blockchain</em>, but rather in her ability to repair her faults.” <em>- Alexis de Tocqueville</em></p>\n</blockquote>\n<p>Censorship resistance (CR) is one of the core security properties of a blockchain.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/3X/c/7/c7e58a93fe9b45a91ecf29a6aefa91567c310262.png\" data-download-href=\"https://ethresear.ch/uploads/default/c7e58a93fe9b45a91ecf29a6aefa91567c310262\" title=\"CR\"><img src=\"https://ethresear.ch/uploads/default/optimized/3X/c/7/c7e58a93fe9b45a91ecf29a6aefa91567c310262_2_690x180.png\" alt=\"CR\" data-base62-sha1=\"swmO0GJ1QBKqG3t56pVSs0ZWPDA\" width=\"690\" height=\"180\" srcset=\"https://ethresear.ch/uploads/default/optimized/3X/c/7/c7e58a93fe9b45a91ecf29a6aefa91567c310262_2_690x180.png, https://ethresear.ch/uploads/default/optimized/3X/c/7/c7e58a93fe9b45a91ecf29a6aefa91567c310262_2_1035x270.png 1.5x, https://ethresear.ch/uploads/default/original/3X/c/7/c7e58a93fe9b45a91ecf29a6aefa91567c310262.png 2x\" data-dominant-color=\"151515\"></a></div><p></p>\n<p>Ethereum gifts proposers with one-slot monopolies on transaction inclusion, creating a principal-agent problem and a single point of failure. A censoring party can bribe the current proposer to censor a transaction.</p>\n<p>There has been considerable work to mitigate this problem. A key insight is that the weak link problem of a single proposer results in weak CR. Multi-proposer schemes like <a href=\"https://www.youtube.com/watch?v=mJLERWmQ2uw\">BRAID</a> and <a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870/1\">FOCIL</a> can correct this principal-agent problem.</p>\n<p>In this piece, we focus on BRAID, a multi-proposer mechanism that has garnered significant recent attention. It aims to increase CR in a capital-efficient way via a conditional tipping mechanism (explained below).</p>\n<p>One challenge in this approach, the need for a deterministic ordering rule, is already well understood. <em><strong>In this piece we identify another challenge—liquidity requirements that adversely affect UX—and propose a few potential solutions.</strong></em></p>\n<h2><a name=\"p-49651-braid-at-a-high-level-2\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-braid-at-a-high-level-2\"></a>BRAID at a High Level:</h2>\n<p>BRAID runs <span class=\"math\">k</span> subchains in parallel, each with a unique proposer. Block <span class=\"math\">n</span> of Ethereum is the union of transactions from block <span class=\"math\">n</span> of the <span class=\"math\">k</span> subchains, with a special ordering rule applied to order this unordered set.</p>\n<h3><a name=\"p-49651-tipping-in-braid-3\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-tipping-in-braid-3\"></a>Tipping in BRAID</h3>\n<p>Bidders submit a conditional twin tip <span class=\"math\">(t,T)</span> which depends on the number of proposers who include the transaction. If only a single proposer includes a transaction, they receive <span class=\"math\">T</span>; if multiple proposers include the transaction, they split <span class=\"math\">t</span>.</p>\n<h3><a name=\"p-49651-tipping-properties-4\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-tipping-properties-4\"></a>Tipping Properties</h3>\n<p>Let <span class=\"math\">ϕ(t,T)</span> be the minimum cost to censor a BRAID transaction. It has been <a href=\"https://arxiv.org/abs/2301.13321\">shown</a> that <span class=\"math\">ϕ(t,T)=kT</span>.</p>\n<p>The goal of BRAID is that users will most likely never actually have to pay <span class=\"math\">T</span>; instead, they pay <span class=\"math\">t</span>, which can be much lower than <span class=\"math\">T</span>.</p>\n<p>This multi-dimensional tip disentangles the cost of inclusion (for the transacting party) from the cost of censoring such that <span class=\"math\">t&lt;&lt;T</span>.</p>\n<p>Simply put, a user get’s <span class=\"math\">kT</span> worth of CR while (usually) only paying <span class=\"math\">t</span>.</p>\n<p><strong>How Users Will Tip:</strong></p>\n<ul>\n<li><span class=\"math\">T</span>: From a user’s perspective, they set <span class=\"math\">T=\\frac{V}{k}</span> where <span class=\"math\">V</span> is the value the user places in their transaction not being censored.</li>\n<li><span class=\"math\">t</span>: In current BRAID specs, the ordering of transactions depends on <span class=\"math\">t</span>, with more favorable ordering (i.e., coming first) given to those with the highest <span class=\"math\">t</span>. Therefore, a user will choose their <span class=\"math\">t</span> based on where they want to be in the ordering.</li>\n</ul>\n<p><em>Note that if a user does not care about CR, they can set <span class=\"math\">T=t</span> and send their transaction to just one proposer.</em></p>\n<h2><a name=\"p-49651-the-ux-challenge-5\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-the-ux-challenge-5\"></a>The UX Challenge:</h2>\n<p>While a user will only pay <span class=\"math\">t</span> for their transaction, they need to have <span class=\"math\">T</span> available to make a credible promise to the protocol that they can pay <span class=\"math\">T</span>. Hence a user needs to have <span class=\"math\">T</span> of additional available liquidity to make a transaction. We saw before that <span class=\"math\">T \\propto V</span>: <span class=\"math\">T</span> tends to scale with the value of the transaction. This burdens users with a liquidity requirement.</p>\n<p>For example, say a user wants to sell $5M of ETH due to impending interest rate fears and values censorship resistance at $1M. Let’s say there are 4 shards, i.e., <span class=\"math\">k=4</span>. The user needs to have $250k of additional unpledged liquidity available just to exit their position. This hampers the UX of on-chain finance by placing additional and obscure liquidity requirements on participants that scale with the value of their positions.</p>\n<h2><a name=\"p-49651-fixes-6\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-fixes-6\"></a>Fixes:</h2>\n<h3><a name=\"p-49651-proof-of-post-state-liquidity-7\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-proof-of-post-state-liquidity-7\"></a><strong>Proof of Post-State Liquidity</strong></h3>\n<p><strong>Idea:</strong> A user submits a transaction with a proof that they will have enough liquidity to pay <span class=\"math\">T</span> if necessary after their transaction. In the case before, the proof will show that the transaction will give the user $1M of liquidity so they could afford the <span class=\"math\">T=</span> $250k if necessary.</p>\n<p><strong>Problem:</strong> This assumes that a proposer has a good understanding of the post-state of a transaction. Most financial transactions interact with shared state, and as a result, transaction ordering is needed to know the post-state. This knowledge relies on the final ordering so we can’t include it as an input to the transaction. Even when there is a reasonable lower bound on post-state available liquidity, establishing it would (unrealistically) require bespoke proofs for each transaction type.</p>\n<h3><a name=\"p-49651-censorship-insurance-ci-8\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-censorship-insurance-ci-8\"></a>Censorship Insurance (CI)</h3>\n<p><strong>Idea:</strong> A third party–the CI provider–can sponsor the escrow of <span class=\"math\">T</span> for the transaction. Users will have to pay an insurance premium of <span class=\"math\">rT</span> to the CI provider, where <span class=\"math\">r</span> represents the rate (mostly) based on the likelihood of censorship. CI providers are thus assessing the rewards of censoring the transaction in real time to ensure it is below <span class=\"math\">kT</span>.</p>\n<p>To prevent an attack where a user purchases insurance and then only sends their tx to one proposer whom they are colluding with, the CI should be (one of) the relayer(s) for the tx. This mirrors how gas sponsorship works and indeed CI insurance should likely just be included in a gas sponsorship service.</p>\n<p>Effectively a user pays a total of <span class=\"math\">t + rT</span> for their transaction and only needs to have <span class=\"math\">t + rT</span> on hand as opposed to <span class=\"math\">T</span>, which is frequently more than <span class=\"math\">t + rT</span>.</p>\n<p>An additional benefit of this scheme is that a marketplace of at least two CI providers will conveniently alert users when their <span class=\"math\">T</span> is too low and there is a high risk of censorship because they’ll refuse to censorship-insure the transaction at a reasonable rate.</p>\n<p><strong>Problem:</strong> It will be difficult to bootstrap a two-sided marketplace for this from scratch.</p>\n<h3><a name=\"p-49651-ci-market-structure-9\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-ci-market-structure-9\"></a>CI Market Structure</h3>\n<p>In practice applications or wallets will likely claim jurisdiction over this issue. One possible solution to the bootstrapping problem, therefore, is for applications and/or wallets to sign wholesale agreements with CI providers à la PFOF.</p>\n<p>While the above solution likely works fine, another option is to create a proper on-chain market with e.g. an RFQ for each transaction whose sender wishes to purchase censorship resistance for.</p>\n<p><img src=\"https://ethresear.ch/uploads/default/original/3X/0/4/049237e341dc88cd24cde968c71e70ce689c3444.png\" alt=\"snake\" data-base62-sha1=\"ErbepHjP783sZdbfKfWocF9KUQ\" width=\"240\" height=\"240\"></p>\n<p>This market, fittingly, would benefit from the CR properties of BRAID.</p>\n<h2><a name=\"p-49651-conclusion-10\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-conclusion-10\"></a>Conclusion</h2>\n<p>BRAID is still in its early days as a proposal. The UX issue of liquidity requirements has not been sufficiently explored, though there are promising signs that we can reasonably punt the issue to the application layer. For next steps, we suggest further exploration of the feasibility of CI markets.</p>\n<h2><a name=\"p-49651-previous-work-11\" class=\"anchor\" href=\"https://ethresear.ch#p-49651-previous-work-11\"></a>Previous work:</h2>\n<ul>\n<li><a href=\"https://arxiv.org/abs/2301.13321\">Censorship Resistance in On-Chain Auctions</a>: Elijah, Max, Mallesh</li>\n<li><a href=\"https://ethresear.ch/t/concurrent-block-proposers-in-ethereum/18777\">Concurrent Block Proposers in Ethereum</a>: Mike, Max</li>\n<li><a href=\"https://blog.duality.xyz/introducing-multiplicity/\">Introducing Multiplicity</a>: Duality blog</li>\n<li><a href=\"https://efdn.notion.site/ROP-9-Multiplicity-gadgets-for-censorship-resistance-7def9d354f8a4ed5a0722f4eb04ca73b\">ROP-9: Multiplicity gadgets for censorship-resistance</a> RIG</li>\n<li><a href=\"https://www.youtube.com/watch?v=mJLERWmQ2uw\">BRAID: Implementing Multiple Concurrent Block Proposers</a>: Max</li>\n<li><a href=\"https://ethresear.ch/t/fork-choice-enforced-inclusion-lists-focil-a-simple-committee-based-inclusion-list-proposal/19870/1\">Fork-Choice enforced Inclusion Lists (FOCIL): A simple committee-based inclusion list proposal</a>: Thomas, Barnabé, Francesco and Julian</li>\n</ul>\n            <p><small>4 posts - 3 participants</small></p>\n            <p><a href=\"https://ethresear.ch/t/censorship-insurance-markets-for-braid/20288\">Read full topic</a></p>","link":"https://ethresear.ch/t/censorship-insurance-markets-for-braid/20288","pubDate":"Fri, 16 Aug 2024 15:36:38 +0000","discourse:topicPinned":"No","discourse:topicClosed":"No","discourse:topicArchived":"No","guid":{"@isPermaLink":"false","#text":"ethresear.ch-topic-20288"},"source":{"@url":"https://ethresear.ch/t/censorship-insurance-markets-for-braid/20288.rss","#text":"Censorship Insurance Markets for BRAID"},"filter":false}]}}}